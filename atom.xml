<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuZhi&#39;Blog</title>
  
  <subtitle>人生苦短</subtitle>
  <link href="/Augus-LIUZHI.github.io/atom.xml" rel="self"/>
  
  <link href="https://augus-liuzhi.github.io/"/>
  <updated>2019-11-05T12:15:11.547Z</updated>
  <id>https://augus-liuzhi.github.io/</id>
  
  <author>
    <name>LiuZhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第2章 java语言编程基础</title>
    <link href="https://augus-liuzhi.github.io/2019/11/05/%E7%AC%AC2%E7%AB%A0%20java%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://augus-liuzhi.github.io/2019/11/05/第2章 java语言编程基础/</id>
    <published>2019-11-05T12:15:37.845Z</published>
    <updated>2019-11-05T12:15:11.547Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-标识符、关键字和注释"><a href="#1-标识符、关键字和注释" class="headerlink" title="1 标识符、关键字和注释"></a>1 标识符、关键字和注释</h4><h5 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1 标识符"></a>1.1 标识符</h5><ul><li><p>标识符由字母、数字、_和$组成，其中第一个字符不能是数字</p></li><li><p>标识符大小写敏感</p></li><li><p>标识符没有长度限制，通常不超过15个字符</p></li><li><p>java关键字、保留字等不能作为用户的自定义标识符使用</p></li></ul><h5 id="1-2-关键字、保留字、注释"><a href="#1-2-关键字、保留字、注释" class="headerlink" title="1.2　关键字、保留字、注释"></a>1.2　关键字、保留字、注释</h5><ul><li>关键字</li><li>保留字</li><li>注释</li></ul><ol><li>单行注释  用//标记</li><li>块注释 用/<em>和 </em>/来标记</li><li>doc注释 用/*<em> 和 </em>/来标记</li></ol><h4 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2 基本数据类型"></a>2 基本数据类型</h4><h5 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">数据类型--&gt;基本数据类型</span><br><span class="line">数据类型--&gt;引用类型</span><br><span class="line">基本数据类型--&gt;数值类型</span><br><span class="line">基本数据类型--&gt;字符类型</span><br><span class="line">基本数据类型--&gt;布尔类型</span><br><span class="line">引用类型--&gt;类</span><br><span class="line">引用类型--&gt;接口</span><br><span class="line">引用类型--&gt;数组</span><br><span class="line">数值类型--&gt;整型</span><br><span class="line">数值类型--&gt;浮点型</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">byte--1字节--&gt;short</span><br><span class="line">short--2字节--&gt;int</span><br><span class="line">int--4字节--&gt;long</span><br><span class="line">long--8字节--&gt;float</span><br><span class="line">float--4字节--&gt;double</span><br><span class="line">double--8字节--&gt;boolean</span><br><span class="line">boolean--1字节--&gt;char</span><br><span class="line">char--2字节--&gt;!</span><br></pre></td></tr></table></figure><h5 id="2-2-整数类型"><a href="#2-2-整数类型" class="headerlink" title="2.2 整数类型"></a>2.2 整数类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> b=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="2-3-浮点类型"><a href="#2-3-浮点类型" class="headerlink" title="2.3 浮点类型"></a>2.3 浮点类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f=<span class="number">1.2f</span>;</span><br></pre></td></tr></table></figure><h5 id="2-4-布尔类型"><a href="#2-4-布尔类型" class="headerlink" title="2.4 布尔类型"></a>2.4 布尔类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> l=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> t=<span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h5 id="2-5-字符类型"><a href="#2-5-字符类型" class="headerlink" title="2.5 字符类型"></a>2.5 字符类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br></pre></td></tr></table></figure><h5 id="2-6-数据类型转换"><a href="#2-6-数据类型转换" class="headerlink" title="2.6 数据类型转换"></a>2.6 数据类型转换</h5><h6 id="2-6-1-自动转换"><a href="#2-6-1-自动转换" class="headerlink" title="2.6.1 自动转换"></a>2.6.1 自动转换</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>--&gt;<span class="keyword">short</span>--&gt;<span class="keyword">char</span>--&gt;<span class="keyword">int</span>--&gt;<span class="keyword">long</span>--&gt;<span class="keyword">float</span>--&gt;<span class="keyword">double</span></span><br></pre></td></tr></table></figure><h6 id="2-6-2-强制转换"><a href="#2-6-2-强制转换" class="headerlink" title="2.6.2 强制转换"></a>2.6.2 强制转换</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">高——&gt;低</span><br><span class="line"><span class="keyword">double</span> d=<span class="number">2.3</span>;</span><br><span class="line"><span class="keyword">int</span> l=(<span class="keyword">int</span>)d;</span><br></pre></td></tr></table></figure><h4 id="3-运算符与表达式"><a href="#3-运算符与表达式" class="headerlink" title="3 运算符与表达式"></a>3 运算符与表达式</h4><h5 id="3-1-算术运算符与算数表达式"><a href="#3-1-算术运算符与算数表达式" class="headerlink" title="3.1 算术运算符与算数表达式"></a>3.1 算术运算符与算数表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ - * / %</span><br><span class="line">+ - ++ --</span><br></pre></td></tr></table></figure><h5 id="3-2-关系运算符与关系表达式"><a href="#3-2-关系运算符与关系表达式" class="headerlink" title="3.2 关系运算符与关系表达式"></a>3.2 关系运算符与关系表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt; &gt;= &lt;= == !=</span><br></pre></td></tr></table></figure><h5 id="3-3-逻辑运算符与逻辑表达式"><a href="#3-3-逻辑运算符与逻辑表达式" class="headerlink" title="3.3 逻辑运算符与逻辑表达式"></a>3.3 逻辑运算符与逻辑表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; ||</span><br></pre></td></tr></table></figure><p>#####　3.4 位运算符与位表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ &amp; | ^ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h5 id="3-5-赋值运算符与赋值表达式"><a href="#3-5-赋值运算符与赋值表达式" class="headerlink" title="3.5 赋值运算符与赋值表达式"></a>3.5 赋值运算符与赋值表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%= &amp;= |= ^= &gt;&gt;= &lt;&lt;= &gt;&gt;&gt;=</span><br></pre></td></tr></table></figure><h5 id="3-6-条件运算符与条件表达式"><a href="#3-6-条件运算符与条件表达式" class="headerlink" title="3.6 条件运算符与条件表达式"></a>3.6 条件运算符与条件表达式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式<span class="number">1</span>？表达式<span class="number">2</span>：表达式<span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="3-7-其他运算符"><a href="#3-7-其他运算符" class="headerlink" title="3.7 其他运算符"></a>3.7 其他运算符</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">()括号运算符</span><br><span class="line">[]下标运算符</span><br><span class="line"><span class="keyword">instanceof</span>对象运算符，用于测试一个指向的对象是否是指定类或它的子类的一个实例化对象</span><br><span class="line">String s=<span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">boolean</span> b=s <span class="keyword">instanceof</span> String;</span><br><span class="line"><span class="keyword">new</span> 内存分配运算符</span><br></pre></td></tr></table></figure><h5 id="3-8-运算符的优先级与结合性"><a href="#3-8-运算符的优先级与结合性" class="headerlink" title="3.8 运算符的优先级与结合性"></a>3.8 运算符的优先级与结合性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">算数--关系--逻辑--赋值</span><br></pre></td></tr></table></figure><h4 id="4-控制语句"><a href="#4-控制语句" class="headerlink" title="4 控制语句"></a>4 控制语句</h4><h5 id="4-1-选择语句"><a href="#4-1-选择语句" class="headerlink" title="4.1 选择语句"></a>4.1 选择语句</h5><h6 id="4-1-1-单分支if语句"><a href="#4-1-1-单分支if语句" class="headerlink" title="4.1.1 单分支if语句"></a>4.1.1 单分支if语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(明天下雨)</span><br><span class="line">    停课；</span><br></pre></td></tr></table></figure><h6 id="4-1-2-双分支if-else语句"><a href="#4-1-2-双分支if-else语句" class="headerlink" title="4.1.2 双分支if-else语句"></a>4.1.2 双分支if-else语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(明天下雨)</span><br><span class="line">    停课；</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">上课；</span><br></pre></td></tr></table></figure><h6 id="4-1-3-多分支if-else语句"><a href="#4-1-3-多分支if-else语句" class="headerlink" title="4.1.3 多分支if-else语句"></a>4.1.3 多分支if-else语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(grade&gt;<span class="number">90</span>)</span><br><span class="line">    A;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;<span class="number">80</span>)</span><br><span class="line">    B;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;<span class="number">70</span>)</span><br><span class="line">    C;</span><br></pre></td></tr></table></figure><h6 id="4-1-4-switch语句"><a href="#4-1-4-switch语句" class="headerlink" title="4.1.4 switch语句"></a>4.1.4 switch语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(c)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'a'</span>:A;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'b'</span>:B;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'c'</span>:c;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:G;</span><br><span class="line">&#125;</span><br><span class="line">c只能是字符型或者整型</span><br></pre></td></tr></table></figure><h5 id="4-2-循环语句"><a href="#4-2-循环语句" class="headerlink" title="4.2 循环语句"></a>4.2 循环语句</h5><h6 id="4-2-1-不确定循环"><a href="#4-2-1-不确定循环" class="headerlink" title="4.2.1 不确定循环"></a>4.2.1 不确定循环</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;<span class="comment">//又称当型循环</span></span><br><span class="line">代码；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   代码块； </span><br><span class="line">&#125;<span class="keyword">while</span>(条件)<span class="comment">//又称直到型循环，至少被执行一次</span></span><br></pre></td></tr></table></figure><h6 id="4-2-2-确定循环"><a href="#4-2-2-确定循环" class="headerlink" title="4.2.2 确定循环"></a>4.2.2 确定循环</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    代码；</span><br><span class="line">&#125;</span><br><span class="line">初始化，判断终止部分迭代部分，可以都是空，分号必须留，是无限循环</span><br></pre></td></tr></table></figure><h4 id="5-跳转语句"><a href="#5-跳转语句" class="headerlink" title="5 跳转语句"></a>5 跳转语句</h4><h5 id="5-1-break语句"><a href="#5-1-break语句" class="headerlink" title="5.1 break语句"></a>5.1 break语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> 中使用</span><br><span class="line">循环体中使用，退出当前循环</span><br></pre></td></tr></table></figure><h5 id="5-2-continue语句"><a href="#5-2-continue语句" class="headerlink" title="5.2 continue语句"></a>5.2 continue语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结束当前循环，继续进行下一次循环</span><br></pre></td></tr></table></figure><h5 id="5-3-return语句"><a href="#5-3-return语句" class="headerlink" title="5.3 return语句"></a>5.3 return语句</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>后面句子不执行</span><br></pre></td></tr></table></figure><h4 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h4><h5 id="6-1-一维数组"><a href="#6-1-一维数组" class="headerlink" title="6.1 一维数组"></a>6.1 一维数组</h5><h6 id="６-１-１-一维数组的声明"><a href="#６-１-１-一维数组的声明" class="headerlink" title="６.１.１　一维数组的声明"></a>６.１.１　一维数组的声明</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];</span><br></pre></td></tr></table></figure><h6 id="６-１-２-数组元素的内存分配"><a href="#６-１-２-数组元素的内存分配" class="headerlink" title="６.１.２　数组元素的内存分配"></a>６.１.２　数组元素的内存分配</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">50</span>];<span class="comment">//给数组分配50个内存空间</span></span><br></pre></td></tr></table></figure><h6 id="６-１-３-一维数组的初始化"><a href="#６-１-３-一维数组的初始化" class="headerlink" title="６.１.３　一维数组的初始化"></a>６.１.３　一维数组的初始化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">默认初始化</span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">50</span>];</span><br><span class="line">赋值初始化</span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h6 id="６-１-４-一维数组的引用"><a href="#６-１-４-一维数组的引用" class="headerlink" title="６.１.４　一维数组的引用"></a>６.１.４　一维数组的引用</h6><h5 id="６．２-数组的数组"><a href="#６．２-数组的数组" class="headerlink" title="６．２　数组的数组"></a>６．２　数组的数组</h5><h5 id="６．３-数组的排序"><a href="#６．３-数组的排序" class="headerlink" title="６．３　数组的排序"></a>６．３　数组的排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>&#125;</span><br><span class="line">Arrays.sort(a)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x:a)&#123;<span class="comment">//声明循环的变量类型必须和数组类型一致</span></span><br><span class="line">    System.out.println(x+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-标识符、关键字和注释&quot;&gt;&lt;a href=&quot;#1-标识符、关键字和注释&quot; class=&quot;headerlink&quot; title=&quot;1 标识符、关键字和注释&quot;&gt;&lt;/a&gt;1 标识符、关键字和注释&lt;/h4&gt;&lt;h5 id=&quot;1-1-标识符&quot;&gt;&lt;a href=&quot;#1-1-标识
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面向对象基础</title>
    <link href="https://augus-liuzhi.github.io/2019/10/28/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <id>https://augus-liuzhi.github.io/2019/10/28/java面向对象基础/</id>
    <published>2019-10-28T01:02:24.648Z</published>
    <updated>2019-10-28T01:01:51.023Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-面向对象基础"><a href="#1-面向对象基础" class="headerlink" title="1 面向对象基础"></a>1 面向对象基础</h4><p>1.1 对象</p><blockquote><p>概念：世间万物皆为对象，具有一定的属性和行为</p></blockquote><p>1.2 类</p><blockquote><p>概念：类是具有相同属性和行为的对象的抽象</p></blockquote><p>1.3 属性</p><blockquote><p>概念：描述对象的状态，在java中就是变量</p></blockquote><p>1.4 行为</p><blockquote><p>概念：描述对象的行为，在java中就是函数</p></blockquote><p>1.5 面向对象编程的三大特点</p><p>1.5.1 封装</p><blockquote><p>封装：将对象的属性和行为封装起来，对外的载体就是类【核心思想】</p></blockquote><blockquote><p>隐藏对象的属性和实现细节，仅对外提供公共访问方式</p></blockquote><p>好处：</p><ul><li><p>将转化提高</p></li><li><p>便于使用</p></li><li><p>提高重用性</p></li><li><p>提高安全性</p></li></ul><p><strong>封装原则</strong></p><blockquote><p>将不需要的对外提供的内容隐藏起来，把属性都隐藏，提供公共方法对其访问。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cardemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">car c=<span class="keyword">new</span> car();</span><br><span class="line">c.setAge(<span class="number">0</span>);</span><br><span class="line">System.out.println(c.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">0</span>&amp;&amp;age&lt;<span class="number">100</span>)</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"age 错误！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.5.2 继承</p><blockquote><p>继承：子类有父类的属性和行为，子类也可以定义自己独有的属性和行为</p></blockquote><p>1.5.3 多态</p><p>多态：</p><h4 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h4><p>2.1 成员变量和局部变量</p><blockquote><ol><li>成员变量定义在类中，整个类中都有访问。局部变量定义在函数、语句、局部代码块中，只有在所属区域有效</li><li>成员变量存在于堆内存的对象中，局部变量存在于栈内存的对象中</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失。局部变量随着所属区域的执行而存在，随着所属区域结束而释放</li><li>成员变量都有默认初始值，局部变量必须初始化。</li><li>局部变量和成员变量同名，局部变量优先原则</li></ol></blockquote><p><strong>注意</strong>：类类型的参数一定指向对象，否则为NULL</p><p><strong>匿名对象</strong></p><blockquote><p>​    没有名字的对象new car(); 定义对象的简写格式</p><ol><li><p>当对象对方法进行一次调用，可以使用匿名对象</p><p>new car().num=5;</p><p>new car().color=”red”;</p><p>new car().run();</p></li><li><p>匿名对象可以作为实际参数传递</p><p>show(new car());</p></li></ol></blockquote><p><strong>构造函数</strong></p><blockquote><p>函数名和类名相同</p><p>没有返回值</p><p>作用: 给对象初始化</p><p>创建对象都必须通过构造函数初始化</p><p>一个类中如果没有定义过构造函数，那么该类中就会有一个默认无参的构造函数</p><p>如果类中指定了构造函数，那么类中默认的构造函数就没有了</p><p>构造函数和一般函数的区别</p><p>调用时间：</p><p>构造函数对象创建时调用，对对象初始化，一般函数，对象创建后，才可以调用</p><p>调用次数：</p><p>构造函数只调用一次且是自动调用，一般函数可以调用多次且手动调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cardemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">person p = <span class="keyword">new</span> person();</span><br><span class="line">p.speak();</span><br><span class="line">person p1 = <span class="keyword">new</span> person(<span class="string">"旺旺"</span>);</span><br><span class="line">p1.speak();</span><br><span class="line">person p2 = <span class="keyword">new</span> person(<span class="string">"强强"</span>,<span class="number">10</span>);</span><br><span class="line">p2.speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">person() &#123;</span><br><span class="line">name = <span class="string">"baby"</span>;</span><br><span class="line">age = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"person run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">person(String n) &#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line">person(String n, <span class="keyword">int</span> a) &#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">" "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个构造函数出现，必须按照重载方式【参数类型，参数个数，参数顺序】对不同的对象进行初始化</strong></p><p>2.2 成员方法</p><blockquote><p>权限修饰符 返回值类型 方法名（参数1，参数2，……参数N）{</p><p>​                //方法体（可以为空）</p><p>​                //返回值</p><p>}</p><p>构造方法</p><p>特点：1 无返回值</p><p>​            2 方法名和类名相同</p><p>权限修饰符 方法名（）{</p><p>//构造方法体</p><p>}</p><p>如果没有构造方法，系统会自动创建一个，如果有自己写的，系统将不会创建构造无参构造方法</p></blockquote><p>2.3 权限修饰符</p><table><thead><tr><th></th><th>private</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>本类</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>同包其他类或者子类</td><td>不可见</td><td>可见</td><td>可见</td></tr><tr><td>其他包的类或者子类</td><td>不可见</td><td>不可见</td><td>可见</td></tr></tbody></table><p><strong>如果没有设置权限修饰符，默认为本包可见，类的权限决定变量和方法的权限</strong></p><p>2.4 this关键字</p><blockquote><ol><li><p>调用成员的变量和成员的方法</p></li><li><p>当成员变量和局部变量同名时 用this区分</p></li><li><p>this表示当前对象的引用</p></li><li>this可以在构造函数中调用其它构造函数，但是必须放在当前调用构造函数的第一行，即this函数放置在第一行</li></ol></blockquote><p>2.5 静态变量、常量和方法</p><blockquote><p>用static修饰的成员被所有对象共享</p><p>static优于对象存在，因为static的成员随着类的加载就已经存在了</p><p>用关键字static修饰的变量，常量，方法称为静态变量，常量，方法</p><p>static修饰的成员多了一种调用方式，使用语法：类名.静态类成员</p><p>static修饰的数据是共享数据（静态/类变量，静态方法），对象中存储的数据是特有数据（叫成员/实例变量，成员方法）</p><p>静态放法中不可以使用this关键字</p><p>在静态方法中不可以直接调用非静态方法</p><p>局部变量不可以声明static</p></blockquote><p><strong>成员变量和静态变量的区别</strong></p><blockquote><p>1 两个变量的生命周期的时间不一样，成员变量随着对象的创建而存在，随着对象的释放被回收，静态变量随着类的加载而实现，随着类的消失而消失</p><p>2 调用方式不同</p><p>成员变量只能被对象调用，然而静态变量可以用类名和对象调用【尽量使用类名调用】</p><p>3 别名不同</p><p>成员变量也叫实例变量</p><p>静态变量也叫类变量</p><p>4 存储位置不同</p><p>成员变量的数据存储在堆内存的对象中，所以也叫对象的特有数据</p><p>静态变量存储在方法区的静态区【共享数据区】，所以也叫对象的共享数据</p></blockquote><p><strong>静态的注意事项</strong>：</p><blockquote><ol><li>静态方法只能访问静态成员。【访问局限性】</li><li>非静态即可以访问静态，又可以访问静态</li><li>静态方法中不可以使用this和super关键字</li><li>主函数是静态的</li></ol></blockquote><p><strong>主函数</strong>：</p><blockquote><ol><li>格式是固定的</li><li><p>被JVM识别和调用</p><p>public：权限是最大的</p><p>static : 虚拟机调用主函数，不需要对象，直接用类名调用</p><p>void : 无返回值</p><p>main : 函数名，JVM识别的一个名字</p><p>String[] args: 参数列表，是一个数组类型的参数，元素都是字符串【==&gt;new String[0]】</p></li></ol></blockquote><h4 id="3-对象"><a href="#3-对象" class="headerlink" title="3 对象"></a>3 对象</h4><p>3.1 对象的创建</p><blockquote><p>语法：</p><p>Test test=new Test();</p><p>Test test=new Test(a);</p></blockquote><p><strong>注意</strong>：每创建一个对象，就会调用一次构造方法</p><p>3.2 访问对象的属性和行为</p><blockquote><p>类名.行为</p><p>类名.属性</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-面向对象基础&quot;&gt;&lt;a href=&quot;#1-面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;1 面向对象基础&quot;&gt;&lt;/a&gt;1 面向对象基础&lt;/h4&gt;&lt;p&gt;1.1 对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;概念：世间万物皆为对象，具有一定的属性
      
    
    </summary>
    
    
      <category term="--satic关键字 --this关键字" scheme="https://augus-liuzhi.github.io/tags/satic%E5%85%B3%E9%94%AE%E5%AD%97-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>结对项目代码</title>
    <link href="https://augus-liuzhi.github.io/2019/10/22/%E7%BB%93%E5%AF%B9%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/"/>
    <id>https://augus-liuzhi.github.io/2019/10/22/结对项目代码/</id>
    <published>2019-10-22T09:50:52.795Z</published>
    <updated>2019-10-22T09:50:52.795Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1-操作数随机"><a href="#1-操作数随机" class="headerlink" title="1.操作数随机"></a>1.操作数随机</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operand</span> </span>&#123;<span class="comment">// 定义随机操作数类</span></span><br><span class="line"><span class="keyword">int</span> op1, op2;</span><br><span class="line"></span><br><span class="line">Operand(<span class="keyword">int</span> Limits) &#123;</span><br><span class="line">op1 = (<span class="keyword">int</span>) (Math.random() * Limits + <span class="number">1</span>);</span><br><span class="line">op2 = (<span class="keyword">int</span>) (Math.random() * Limits + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-加法类"><a href="#2-加法类" class="headerlink" title="2. 加法类"></a>2. 加法类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">Operand</span> </span>&#123;<span class="comment">// 定义加法类</span></span><br><span class="line">Add(<span class="keyword">int</span> Limits) &#123;</span><br><span class="line"><span class="keyword">super</span>(Limits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(op1 + <span class="string">"+"</span> + op2 + <span class="string">"="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-减法类"><a href="#3-减法类" class="headerlink" title="3. 减法类"></a>3. 减法类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Operand</span> </span>&#123;<span class="comment">//定义减法类</span></span><br><span class="line">Sub(<span class="keyword">int</span> Limits) &#123;</span><br><span class="line"><span class="keyword">super</span>(Limits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(op1 + <span class="string">"-"</span> + op2 + <span class="string">"="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-乘法类"><a href="#4-乘法类" class="headerlink" title="4. 乘法类"></a>4. 乘法类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mul</span> <span class="keyword">extends</span> <span class="title">Operand</span> </span>&#123;<span class="comment">//定义乘法类</span></span><br><span class="line">Mul(<span class="keyword">int</span> Limits) &#123;</span><br><span class="line"><span class="keyword">super</span>(Limits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(op1 + <span class="string">"*"</span> + op2 + <span class="string">"="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-除法类"><a href="#5-除法类" class="headerlink" title="5. 除法类"></a>5. 除法类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Div</span> <span class="keyword">extends</span> <span class="title">Operand</span> </span>&#123;<span class="comment">//定义除法类</span></span><br><span class="line">Div(<span class="keyword">int</span> Limits) &#123;</span><br><span class="line"><span class="keyword">super</span>(Limits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(op1 + <span class="string">"/"</span> + op2 + <span class="string">"="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-随机符号运算"><a href="#6-随机符号运算" class="headerlink" title="6. 随机符号运算"></a>6. 随机符号运算</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Add add = <span class="keyword">new</span> Add(limits);</span><br><span class="line">add.add();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Sub sub = <span class="keyword">new</span> Sub(limits);</span><br><span class="line">sub.sub();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Mul mul = <span class="keyword">new</span> Mul(limits);</span><br><span class="line">mul.mul();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">Div div = <span class="keyword">new</span> Div(limits);</span><br><span class="line">div.div();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="7-添加需求"><a href="#7-添加需求" class="headerlink" title="7. 添加需求"></a>7. 添加需求</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">limits=input.nextInt();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"捕获错误："</span>+ e);</span><br><span class="line">System.out.println(<span class="string">"请重新输入范围："</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;1-操作数随机&quot;&gt;&lt;a href=&quot;#1-操作数随机&quot; class=&quot;headerlink&quot; title=&quot;1.操作数随机&quot;&gt;&lt;/a&gt;1.操作数随机&lt;/h6&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java接口</title>
    <link href="https://augus-liuzhi.github.io/2019/10/17/java%E6%8E%A5%E5%8F%A3/"/>
    <id>https://augus-liuzhi.github.io/2019/10/17/java接口/</id>
    <published>2019-10-17T10:46:14.267Z</published>
    <updated>2019-10-28T01:06:14.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-接口定义"><a href="#1-接口定义" class="headerlink" title="1. 接口定义"></a>1. 接口定义</h4><blockquote><p>当一个抽象类的所有方法是抽象方法的时候，这时可以将该抽象类用另一种形式和定义来表示，那就是接口 interface【接口和抽象类似，必须全部覆盖接口类的所有抽象方法】</p></blockquote><p><strong>定义接口关键字：</strong><code>interface</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于接口中常见的成员，这些成员都有固定修饰符</p></blockquote><ol><li>全局常量：public static final</li><li>抽象方法：public abstract void show();</li></ol><p><strong>结论：接口的成员都是公共权限</strong></p><h4 id="2-接口的实现"><a href="#2-接口的实现" class="headerlink" title="2. 接口的实现"></a>2. 接口的实现</h4><blockquote><p>类与接口之间的关系是实现，类与类之间是继承关系</p><p>接口不能实例化，只能由实现类覆盖接口类的所有方法，实现类才可以实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementtext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">demoimpl d = <span class="keyword">new</span> demoimpl();</span><br><span class="line">System.out.println(d.num);</span><br><span class="line">System.out.println(demo.num);<span class="comment">//静态类名调用</span></span><br><span class="line">System.out.println(demoimpl.num);<span class="comment">//静态类名调用</span></span><br><span class="line">d.show();</span><br><span class="line">d.show1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demoimpl</span> <span class="keyword">implements</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java不支持多继承，会出现不确定调用，进行多继承改良，采用多实现</p><p>多实现：一个类可以实现多个接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个类继承另一类的时候还可以实现多个接口</p><p>接口的出现避免单继承的局限性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">gg</span> </span>&#123;<span class="comment">//接口gg</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">mm</span> </span>&#123;<span class="comment">//接口mm</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">see</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">gg</span>, <span class="title">mm</span> </span>&#123;<span class="comment">// 接口和接口之间是继承关系，而且还是多继承</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;<span class="comment">//类Q有3个方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口和抽象类的区别</strong></p><blockquote><p>相同点：都是向上抽取来的</p><p>不同点：</p><p>​                抽象类需要被继承，而且单继承，接口需要被实现，可以多实现</p><p>​                抽象类中可以定义抽象方法和非抽象方法，子类继承后可以直接使用非抽象方法，但是接口中只能                           定义抽象方法必须有子类去实现</p><p>​                抽象类的继承是 is a 关系，定义体系内共性内容，接口的实现是like a关系，定义的体系额外功能</p></blockquote><p>用一个例子来说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">dog</span> </span>&#123;<span class="comment">//定义犬类</span></span><br><span class="line">String name;<span class="comment">//有名字</span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//有年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;<span class="comment">//能吃</span></span><br><span class="line">System.out.println(<span class="string">"can eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;<span class="comment">//能睡，不同狗睡的地方不一样</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fun_seek</span> </span>&#123;<span class="comment">//定义额外功能接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">seekroad</span><span class="params">()</span></span>;<span class="comment">//认路</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fun_look</span> //定义额外功能接口</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">void</span> <span class="title">lookfor</span>()</span>;<span class="comment">//查毒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eyedog</span> <span class="keyword">extends</span> <span class="title">dog</span> <span class="keyword">implements</span> <span class="title">fun_seek</span> </span>&#123;<span class="comment">//定义导盲犬继承犬类的共性，并添加认路的功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;<span class="comment">//重写抽象类睡觉的方式</span></span><br><span class="line">System.out.println(<span class="string">"在主人家睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seekroad</span><span class="params">()</span> </span>&#123;<span class="comment">//重写添加的认路功能</span></span><br><span class="line">System.out.println(<span class="string">"俺认识路"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lookdog</span> <span class="keyword">extends</span> <span class="title">dog</span> <span class="keyword">implements</span> <span class="title">fun_look</span> </span>&#123;<span class="comment">//定义缉毒犬继承犬类共性，并添加找毒的功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="comment">//重写抽象类睡觉的方式</span></span></span><br><span class="line"><span class="function">System.out.<span class="title">println</span><span class="params">(<span class="string">"在警察局睡觉"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookfor</span><span class="params">()</span> </span>&#123;<span class="comment">//重写添加找毒的功能</span></span><br><span class="line">System.out.println(<span class="string">"俺可以查毒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-接口定义&quot;&gt;&lt;a href=&quot;#1-接口定义&quot; class=&quot;headerlink&quot; title=&quot;1. 接口定义&quot;&gt;&lt;/a&gt;1. 接口定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当一个抽象类的所有方法是抽象方法的时候，这时可以将该抽象类用另一种形式和定义来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>super和final关键字</title>
    <link href="https://augus-liuzhi.github.io/2019/10/15/super%E5%92%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://augus-liuzhi.github.io/2019/10/15/super和final关键字/</id>
    <published>2019-10-15T14:14:28.782Z</published>
    <updated>2019-10-17T03:38:03.211Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-super关键字"><a href="#1-super关键字" class="headerlink" title="1. super关键字"></a>1. super关键字</h4><ul><li>调用构造方法</li><li>调用隐藏变量</li><li>调用重写方法</li></ul><blockquote><p>注意：super调用的都是父类</p></blockquote><blockquote><p>super使用代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">A() &#123;</span><br><span class="line">System.out.println(<span class="string">"父类无参构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"父类有参构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">B() &#123;</span><br><span class="line"><span class="keyword">super</span>();<span class="comment">// 调用父类无参构造方法</span></span><br><span class="line">System.out.println(<span class="string">"隐藏变量已经调用:"</span>+<span class="keyword">super</span>.num);<span class="comment">// 调用隐藏变量</span></span><br><span class="line">System.out.println(<span class="string">"B子类的构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.show();<span class="comment">// 调用父类被重写的方法</span></span><br><span class="line">System.out.println(<span class="string">"子类show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">C() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">4</span>);<span class="comment">// 调用父类中的有参构造方法</span></span><br><span class="line">System.out.println(<span class="string">"C子类的构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-final关键字"><a href="#2-final关键字" class="headerlink" title="2. final关键字"></a>2. final关键字</h4><p>继承的弊端：打破封装性</p><p>final关键字可以修饰类、方法、变量</p><h6 id="2-1-final修饰类"><a href="#2-1-final修饰类" class="headerlink" title="2.1 final修饰类"></a>2.1 final修饰类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final修饰的类不能被继承，即不能有子类</p><h6 id="2-2-final修饰方法"><a href="#2-2-final修饰方法" class="headerlink" title="2.2 final修饰方法"></a>2.2 final修饰方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final修饰的方法不允许被子类重写</p><h6 id="2-3-final变量"><a href="#2-3-final变量" class="headerlink" title="2.3 final变量"></a>2.3 final变量</h6><p>final修饰的变量为常量，常量一般同时使用时final和static修饰，只能被赋值一次（常量大写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3. 抽象类"></a>3. 抽象类</h4><h6 id="3-1-抽象定义"><a href="#3-1-抽象定义" class="headerlink" title="3.1 抽象定义"></a>3.1 抽象定义</h6><blockquote><p>抽象：模糊，不具体，看不懂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;<span class="comment">// 定义抽象动物类</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">// 定义抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;<span class="comment">//定义实例方法</span></span><br><span class="line">System.out.println(<span class="string">"can sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用筷子拿着吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用嘴叼着吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-抽象特点"><a href="#3-2-抽象特点" class="headerlink" title="3.2 抽象特点"></a>3.2 抽象特点</h6><p>方法只有声明没有实现时，该方法就是抽象方法，被abstract修饰，抽象方法必须定义在抽象类中。</p><p>抽象类不可以被实例化【调用抽象方法没有意义】</p><p>抽象类的子类，必须重写抽象类的所有抽象方法才可以实例化，否则，子类还是抽象类</p><h6 id="3-3-抽象细节"><a href="#3-3-抽象细节" class="headerlink" title="3.3 抽象细节"></a>3.3 抽象细节</h6><ol><li><p>抽象类有构造函数，给子类对象进行初始化</p></li><li><p>抽象类可以不定义抽象方法【一般这种类主要是不让创建对象】</p></li><li><p>抽象关键字不可以和哪些关键字共存【private不行，static不行，final不行】</p></li><li><p>抽象类和一般类的异同</p></li></ol><blockquote><p>​            相同：描述事物，都在内部定了成员</p><p>​            不同点：</p><p>​                        1 一般类中有足够的信息用来描述事物，抽象类描述不足</p><p>​                        2 一般类中，不可以定义抽象方法，但是抽象类中可以定义，也可以定义非抽象</p><p>​                        3 一般类类可以被实例化，抽象类不可以被实例化</p></blockquote><ol start="5"><li>抽象类一定是父类【子类覆盖其方法后才可以对子类实例化】</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-super关键字&quot;&gt;&lt;a href=&quot;#1-super关键字&quot; class=&quot;headerlink&quot; title=&quot;1. super关键字&quot;&gt;&lt;/a&gt;1. super关键字&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;调用构造方法&lt;/li&gt;
&lt;li&gt;调用隐藏变量&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java面向对象——继承</title>
    <link href="https://augus-liuzhi.github.io/2019/10/15/Java%E7%BB%A7%E6%89%BF/"/>
    <id>https://augus-liuzhi.github.io/2019/10/15/Java继承/</id>
    <published>2019-10-15T12:08:31.215Z</published>
    <updated>2019-10-15T12:32:55.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-继承的概述"><a href="#1-继承的概述" class="headerlink" title="1. 继承的概述"></a>1. 继承的概述</h4><blockquote><p>继承就是子类继承父类的变量和方法，下面用代码解释一下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;<span class="comment">// 定义学生类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"studay good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;<span class="comment">// 定义工人类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"work good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上述例子中可以看到，学生类和工人类都有共同的特征，为了实现代码复用性，进行抽取，java中抽取用类表示将共有的的行为或特征进行抽取，然后原来的来类也要可以用，我们就需要用原来类继承我们抽取的类，用extends关键字进行调用，如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义学生类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"studay good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义工人类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"work good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义我们抽取的类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常称Person（被继承的类）类为父类（也叫操类，基类），称Work和Student（继承类）称为子类。</p><h4 id="2-继承的优点"><a href="#2-继承的优点" class="headerlink" title="2. 继承的优点"></a>2. 继承的优点</h4><ul><li>提高代码复用性</li><li>让类与类产生关系，给多态提供了前提</li><li>java支持单继承，不支持多继承，对C++多继承进行改良</li></ul><blockquote><p>单继承：一个子类只能有一个直接父类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多继承：一个子类能有多个直接父类(为什么不能多继承)【不直接支持，会产生调用的不确定性】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们new c();调用show方法，调用的是A的还是B的？为了区分java对此进行了改良，不用多继承，用接口</p></blockquote><ul><li>java支持多层（多重继承）=&gt;传递性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-类的继承原则"><a href="#3-类的继承原则" class="headerlink" title="3. 类的继承原则"></a>3. 类的继承原则</h4><ul><li>单继承</li><li>继承具有传递性</li><li>继承不能循环</li><li>除Object类，所有类都有父类</li></ul><h4 id="4-继承的使用"><a href="#4-继承的使用" class="headerlink" title="4. 继承的使用"></a>4. 继承的使用</h4><p>当要使用一个继承体系时，如何使用 ?</p><blockquote><ol><li>查看该体系中顶层类，了解该体系的基本功能。</li><li>创建该体系中最子类的对象，完成功能的使用。</li></ol></blockquote><p>什么时候写继承？</p><blockquote><p>当类存在所属关系，就定义继承，A属于B,则A继承B</p></blockquote><h4 id="5-继承中的成员变量"><a href="#5-继承中的成员变量" class="headerlink" title="5. 继承中的成员变量"></a>5. 继承中的成员变量</h4><p>当本类局部和成员变量名相同时用this区分</p><p>当子父类中成员变量相同时用super区分</p><p>this和super的用法很相似</p><blockquote><p>this：代表一个本类对象的引用</p></blockquote><blockquote><p>super：代表一个父类空间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.num + <span class="string">"……"</span> + <span class="keyword">super</span>.num);<span class="comment">//调用子类和父类的成员变量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>注意：子类不能直接访问父类的私有成员</u></p><h4 id="6-继承中的成员方法"><a href="#6-继承中的成员方法" class="headerlink" title="6. 继承中的成员方法"></a>6. 继承中的成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.show1();</span><br><span class="line">b.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当子父类中函数一样，将会运行子类的函数，称为<strong>覆盖操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-1-函数的两个特性"><a href="#6-1-函数的两个特性" class="headerlink" title="6.1 函数的两个特性"></a>6.1 函数的两个特性</h6><ol><li>重载：同一个类</li><li>覆盖：子类中，覆盖也叫重写</li></ol><h6 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h6><ol><li>子类的方法覆盖父类方法时，子类的权限必须大于父类的权限</li><li>静态只能覆盖静态，或被静态覆盖</li></ol><h6 id="6-3-什么时候使用覆盖操作"><a href="#6-3-什么时候使用覆盖操作" class="headerlink" title="6.3 什么时候使用覆盖操作"></a>6.3 什么时候使用覆盖操作</h6><p>当对一个类进行子类扩展时，子类需要保留父类的功能声明，但要定义子类中功能的特有内容时，就用覆盖操作完成。(修改方法，添加功能)如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;<span class="comment">// 定义一个手机类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;<span class="comment">// 通话功能</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能</span></span><br><span class="line">System.out.println(<span class="string">"number"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newphone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能重写</span></span><br><span class="line">System.out.println(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"jpg"</span>);</span><br><span class="line">System.out.println(<span class="string">"number"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newphone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能重写</span></span><br><span class="line">System.out.println(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"jpg"</span>);</span><br><span class="line"><span class="keyword">super</span>.show();<span class="comment">//调用父类show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-继承中的构造函数"><a href="#7-继承中的构造函数" class="headerlink" title="7. 继承中的构造函数"></a>7. 继承中的构造函数</h4><p>在子类构造对象时，访问子类构造函数时，父类也运行，在子类的构造函数中，有一个默认的隐士语句，super();调用父类中空参数的构造函数，无覆盖，无继承</p><blockquote><p>无参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu() &#123;</span><br><span class="line">System.out.println(<span class="string">"fu run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line"><span class="keyword">super</span>();<span class="comment">//隐士自带的调用父类空参数构造函数</span></span><br><span class="line">System.out.println(<span class="string">"zi run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"fu run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">4</span>);<span class="comment">//隐士自带的调用父类空参数构造函数</span></span><br><span class="line">System.out.println(<span class="string">"zi run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>子类的实例化过程，子类中的每个构造函数都会访问父类中空参数的构造函数</u></p><blockquote><ol><li>结果：AC AD</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> zi();</span><br><span class="line"><span class="keyword">new</span> zi(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">zi(<span class="keyword">int</span> x)&#123;</span><br><span class="line">System.out.println(<span class="string">"D"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>结果：BD</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> zi(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">zi(<span class="keyword">int</span> x)&#123;</span><br><span class="line"><span class="keyword">super</span>(x);<span class="comment">//覆盖隐式super();</span></span><br><span class="line">System.out.println(<span class="string">"D"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么自子类实例化的时候，会调用父类构造方法？</p><blockquote><p>子类继承父类，所以子类有父类的属性，在使用父类内容前，要先看父类如何对自己的内容进行初始化，所以子类构造函数初始化的时候，必须调用父类构造函数，所以在子类的构造函数默认加了super();</p><p>如果父类中没有定义无参构造函数或者说是父类中定义了有参，没有定义无参，那么必须用super();来指定调用父类的构造函数</p><p>如果子类的构造函数中使用了this();调用本类的构造函数，那么super();就没有了，因为super和this只能定义在第一行，所以只能有一个，但是可以保证的是，子类中肯定会有其他构造方法来访问父类的构造函数。</p></blockquote><p><strong>注意：super();语句必须要定义在子类构造函数的第一行，因为父类的初始化要先完成</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-继承的概述&quot;&gt;&lt;a href=&quot;#1-继承的概述&quot; class=&quot;headerlink&quot; title=&quot;1. 继承的概述&quot;&gt;&lt;/a&gt;1. 继承的概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;继承就是子类继承父类的变量和方法，下面用代码解释一下：&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java计算器编程</title>
    <link href="https://augus-liuzhi.github.io/2019/10/01/Java%E8%AE%A1%E7%AE%97%E5%99%A8%E7%BC%96%E7%A8%8B/"/>
    <id>https://augus-liuzhi.github.io/2019/10/01/Java计算器编程/</id>
    <published>2019-10-01T09:16:56.462Z</published>
    <updated>2019-10-01T09:09:54.838Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jisuanqi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">opreation op1 = <span class="keyword">new</span> opreation();</span><br><span class="line">opreation op2 = <span class="keyword">new</span> opreation();</span><br><span class="line">Scanner read = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入第一个数："</span>);</span><br><span class="line">op1.a = read.nextInt();</span><br><span class="line">System.out.println(<span class="string">"请输入运算符："</span>);</span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>) System.in.read();</span><br><span class="line">System.out.println(<span class="string">"请输入第二个数："</span>);</span><br><span class="line">op2.b = read.nextInt();</span><br><span class="line"><span class="keyword">char</span> c=ch;</span><br><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">add ad = <span class="keyword">new</span> add();</span><br><span class="line">ad.add(op1.a, op2.b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">sub su = <span class="keyword">new</span> sub();</span><br><span class="line">su.sub(op1.a, op2.b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">mul mu = <span class="keyword">new</span> mul();</span><br><span class="line">mu.mul(op1.a, op2.b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">div di = <span class="keyword">new</span> div();</span><br><span class="line">di.div(op1.a, op2.b);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">opreation</span></span>&#123;  <span class="comment">//定义抽象操作类</span></span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">add</span> <span class="keyword">extends</span> <span class="title">opreation</span></span>&#123;<span class="comment">//定义加法类</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"> c=a+b;</span><br><span class="line"> System.out.println(a+<span class="string">"+"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sub</span> <span class="keyword">extends</span> <span class="title">opreation</span></span>&#123;<span class="comment">//定义减法类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">c=a-b;</span><br><span class="line">System.out.println(a+<span class="string">"-"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mul</span> <span class="keyword">extends</span> <span class="title">opreation</span></span>&#123;<span class="comment">//定义乘法类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">c=a*b;</span><br><span class="line">System.out.println(a+<span class="string">"*"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">div</span> <span class="keyword">extends</span> <span class="title">opreation</span></span>&#123;<span class="comment">//定义除法类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">System.out.println(<span class="string">"除数不能为0"</span>);</span><br><span class="line"><span class="keyword">double</span> c=a/b;</span><br><span class="line">System.out.println(a+<span class="string">"/"</span>+b+<span class="string">"="</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="--Java编程" scheme="https://augus-liuzhi.github.io/tags/Java%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java基础——第一章</title>
    <link href="https://augus-liuzhi.github.io/2019/09/23/%E7%AC%AC1%E7%AB%A0%20java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <id>https://augus-liuzhi.github.io/2019/09/23/第1章 java语言概述/</id>
    <published>2019-09-23T11:58:38.637Z</published>
    <updated>2019-09-23T12:02:12.788Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-java简介"><a href="#1-1-java简介" class="headerlink" title="1.1 java简介"></a>1.1 java简介</h3><p>java是一种高级的面向对象程序设计语言，可以在任何计算机、系统和支持java硬件的设备上运行</p><hr><h5 id="1-1-1-java语言的历史"><a href="#1-1-1-java语言的历史" class="headerlink" title="1.1.1 java语言的历史"></a>1.1.1 java语言的历史</h5><blockquote><p>曾用名：OAK</p><p>Sun公司（命名JAVA）—被收购—&gt;Oracle公司</p><p>是一种解释型语言（java可以看成一种编译+解释的语言，在后面特点中细说）</p></blockquote><h5 id="1-1-2-javay语言的特点"><a href="#1-1-2-javay语言的特点" class="headerlink" title="1.1.2 javay语言的特点"></a>1.1.2 javay语言的特点</h5><ul><li><p>简单    </p><blockquote><p>java源于c++,语法简洁，取消指针，多重继承等复杂，实现垃圾自动回收          </p></blockquote></li><li><p>面向对象</p><blockquote><p>所有元素通过类和对象访问</p></blockquote></li><li><p>安全</p><ol><li>强类型语言</li><li>不支持指针操作</li><li>提供异常处理机制</li></ol></li><li><p>解释性</p><ol><li><p>java代码编译后，不生成机器语言，先生成字节码，再借助java解释器，对编译的后的字节码进行解释执行</p></li><li><p>java克服传统的解释型语言，先进行编译，再解释，有编译型语言的效率高的优点，也有解释型语言平台无关的优点</p></li></ol></li><li><p>平台无关</p><blockquote><p>和平台没有关系，只要保证该平台有java解释器就可以运行java字节码文件</p></blockquote></li><li><p>多线程</p><ol><li>java环境本身的多线程</li><li>java语言内置多线程控制</li></ol></li><li><p>动态性</p><blockquote><p>动态调整程序，不影响客户端的使用</p></blockquote></li><li><p>开源性</p><blockquote><p>免费，开放JDK源代码</p></blockquote></li></ul><h5 id="1-1-3-java应用领域"><a href="#1-1-3-java应用领域" class="headerlink" title="1.1.3 java应用领域"></a>1.1.3 java应用领域</h5><ul><li>[x] 桌面应用系统开发</li><li>[x] 嵌入式系统开发</li><li>[x] 电子商务应用</li><li>[x] 企业级应用开发</li><li>[x] 交互式系统开发</li><li>[x] 多媒体系统开发</li><li>[x] 分布式系统开发</li><li>[x] web应用系统开发</li></ul><h5 id="1-1-4-java的版本"><a href="#1-1-4-java的版本" class="headerlink" title="1.1.4 java的版本"></a>1.1.4 java的版本</h5><ol><li>Java SE 主要用于桌面程序的开发</li><li>Java EE 主要开发企业级分布式网络应用程序</li><li>Java ME 主要是嵌入式系统开发</li></ol><h3 id="1-2-java开发环境的搭建"><a href="#1-2-java开发环境的搭建" class="headerlink" title="1.2 java开发环境的搭建"></a>1.2 java开发环境的搭建</h3><hr><h5 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1.2.1"></a>1.2.1</h5><p>下载JDK </p><p> <a href="https://www.oracle.com/java/technologies/jdk12-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/jdk12-downloads.html</a></p><h5 id="1-2-2"><a href="#1-2-2" class="headerlink" title="1.2.2"></a>1.2.2</h5><blockquote><p>双击运行点下一步</p></blockquote><p><img src="https://img-blog.csdnimg.cn/201909231952571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-3"><a href="#1-2-3" class="headerlink" title="1.2.3"></a>1.2.3</h5><blockquote><p>默认路径，不用更改，继续下一步</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190923195313701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2.4"></a>1.2.4</h5><blockquote><p>关闭即可</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019092319532893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-5"><a href="#1-2-5" class="headerlink" title="1.2.5"></a>1.2.5</h5><blockquote><p>环境配置</p></blockquote><blockquote><p>我的电脑——属性——高级系统设置——高级——环境变量</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190923195339371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-6"><a href="#1-2-6" class="headerlink" title="1.2.6"></a>1.2.6</h5><blockquote><p>添加一个系统变量</p></blockquote><blockquote><p>变量名：JAVA_HOME</p></blockquote><blockquote><p>路径：C:\Program Files\Java\jdk-12.0.2</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190923195352331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="1-2-7"><a href="#1-2-7" class="headerlink" title="1.2.7"></a>1.2.7</h5><blockquote><p>在Path变量中再添加一条</p></blockquote><blockquote><p>%JAVA_HOME%\bin;</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190923195404813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注意：</p></blockquote><blockquote><p>1）分号【英文下的】</p></blockquote><blockquote><p>2）12版本默认无jre,不需要jre的变量，也不需要classpath</p></blockquote><h5 id="1-2-8"><a href="#1-2-8" class="headerlink" title="1.2.8"></a>1.2.8</h5><blockquote><p>测试</p></blockquote><p><img src="https://img-blog.csdnimg.cn/2019092319542295.png" alt="在这里插入图片描述"></p><blockquote><p>Cmd下输入 java -version 出现版本，安装成功</p></blockquote><h3 id="1-3-Java开发过程"><a href="#1-3-Java开发过程" class="headerlink" title="1.3  Java开发过程"></a>1.3  Java开发过程</h3><hr><blockquote><p>源文件（.java文件）–&gt;Java编译器：javac–&gt;字节码文件：.class–&gt;java 主类名–&gt;解释执行字节码文件</p></blockquote><h3 id="1-4-java编程风格"><a href="#1-4-java编程风格" class="headerlink" title="1.4 java编程风格"></a>1.4 java编程风格</h3><hr><ul><li><p>Allman风格：各占一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Kernighan风格：省一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-第一个Java程序"><a href="#1-5-第一个Java程序" class="headerlink" title="1.5 第一个Java程序"></a>1.5 第一个Java程序</h3><hr></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello,world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用记事本写好文件，然后以Hellojava.java保存，打开控制台，先用javac 编译成 <code>.class</code>文件结尾的字节码文件，再用java去执行</p></blockquote><h3 id="1-6-知识拓展"><a href="#1-6-知识拓展" class="headerlink" title="1.6 知识拓展"></a>1.6 知识拓展</h3><hr><blockquote><p>计算机不能理解高级语言，也不能执行高级语言，只识别机器语言（01代码，二进制），用高级语言写的程序，要想让计算机运行，必须翻译成机器语言，翻译方法有两种 1. 编译 2. 解释 因此高级语言分编译型语言和解释型语言</p><p>编译型语言：用专用的的编译器，针对特定的平台（如linux,windows等）执行成可以被该平台识别的的机器语言然后加以包装生成可执行的程序如.exe文件，这个.exe下次执行可以脱离开发环境，在该平台运行，运行效率高。【源代码参与一次】</p><p>解释型语言：用专用的解释器，解释成特定平台的机器语言，然后在该特定平台上执行，解释型语言每次运行都需要解释器解释成相应平台的机器语言，然后再次执行，所以效率低，但是只要任何平台提供相应的解释器，就可以在任何平台运行，方便程序的移植。【每次运行都需要源代码参与】</p></blockquote><blockquote><p>jre(java runtime environment,java运行时环境) 由JVM和Java API组成,主要负责java的运行</p><p>解释型语言：用专用的解释器，解释成特定平台的机器语言，然后在该特定平台上执行，解释型语言每次运行都需要解释器解释成相应平台的机器语言，然后再次执行，所以效率低，但是只要任何平台提供相应的解释器，就可以在任何平台运行，方便程序的移植。【每次运行都需要源代码参与】</p></blockquote><blockquote><p>jre(java runtime environment,java运行时环境) 由JVM和Java API组成,主要负责java的运行</p><p>JDK(java development kit,java开发工具集)包含jre包含java程序开发的所需要的编译，调试等工具，还包含jdk源码</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-java简介&quot;&gt;&lt;a href=&quot;#1-1-java简介&quot; class=&quot;headerlink&quot; title=&quot;1.1 java简介&quot;&gt;&lt;/a&gt;1.1 java简介&lt;/h3&gt;&lt;p&gt;java是一种高级的面向对象程序设计语言，可以在任何计算机、系统和支持jav
      
    
    </summary>
    
    
      <category term="-java" scheme="https://augus-liuzhi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>软件工程第三次作业——关于软件质量保障初探</title>
    <link href="https://augus-liuzhi.github.io/2019/09/22/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C/"/>
    <id>https://augus-liuzhi.github.io/2019/09/22/软件质量保障/</id>
    <published>2019-09-22T14:00:24.671Z</published>
    <updated>2019-09-22T13:59:36.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q1-对教材与参考资料阅读后关于软件质量保障你的体会是什么？"><a href="#Q1-对教材与参考资料阅读后关于软件质量保障你的体会是什么？" class="headerlink" title="Q1:  对教材与参考资料阅读后关于软件质量保障你的体会是什么？"></a>Q1:  对教材与参考资料阅读后关于软件质量保障你的体会是什么？</h3><hr><blockquote><p>A:    首先了解一下什么是软件质量，根据IEEE认为符合用户以及利益相关者的需求，那么软件的质量又从程序质量和软件工程质量来看，软件质量又从软件功能的质量来体现，软件工程的又体现在，可见性，风险控制，成本，指标情况等，简单来说出来就是软件质量满足需求，还要满足盈利中造出足够好的软件,那什么是软件质量保障就是我们所说的QA,软件质量保障的工作无异于就是测试，但是这些还是不够的，读了质量保障以后说一下体会吧，虽然是专人专责，但是不意味着 某个模块出了问题，但是我没有责任，我就不管，项目毕竟是整体的，只要是项目的问题，我们就应该付出责任，也不应该盲目相信专业人士，应该根据我们的具体情况来，制定明确的责任人承担责任，采用高质量的测试用例</p></blockquote><h3 id="Q2-如果你是一个项目的QA，那么你认为你的工作职责范围是什么"><a href="#Q2-如果你是一个项目的QA，那么你认为你的工作职责范围是什么" class="headerlink" title="Q2: 如果你是一个项目的QA，那么你认为你的工作职责范围是什么?"></a>Q2: 如果你是一个项目的QA，那么你认为你的工作职责范围是什么?</h3><hr><blockquote><p>A:   从项目需求阶段、设计阶段、研发过程、产品测试、验收几乎项目的整个生命周期都参与，需求设计阶段要审查设计时候合理，是否能满足客户的真正需求。是否符合客户群体的使用习惯，操作是否简单易学等等。数据库结构设计、系统架构、功能页面等是否能按照需求实现。另外，还要督促研发进度，要定好项目进度，并督促其完成。每个让都有惰性，没有人监督总会有延迟。产品出来了，QA还要检测质量，其实就是测试。通常QA手下有一组测试人员，负责产品测试。产品经过测试、修改，形成最终产品。此时产品可以交给客户了。产品到了客户那里，没有一个客户会一言不发欣然接受。总是提出这样那样的要求，这时候QA还要细心倾听客户的要求，耐心的给予讲解说明，汇总所有需要修改的点，反馈给研发人员（项目经理或研发经理）并确认其按照客户要求完成修改</p></blockquote><p><strong>总结：</strong></p><ol><li><p><strong>qa应该懂开发，一个不懂开发的qa只能做流水线测试，而有些bug往往是测试不出来的。</strong></p></li><li><p><strong>qa必须了解需求项目中，qa的参与从需求开始。一个不了解需求的qa必然不是一名合格的qa.</strong></p></li><li><p><strong>qa必须了解项目的上下游的结构一个不了解上游的qa, 必然无法确定dev对上游的调用是否可靠；一个不了解下游的qa, 必然无法确定项目的实现是否符合下游的调用场景。</strong></p></li><li><p><strong>qa为整个项目的质量负责qa在项目中不是为找bug而存在的。</strong></p></li></ol><h3 id="Q3：如果你是一个项目经理，那么你认为这你的项目中需要专职的QA么？还是只需有Test即可？如果一旦出现问题，你如何界定由谁担责？"><a href="#Q3：如果你是一个项目经理，那么你认为这你的项目中需要专职的QA么？还是只需有Test即可？如果一旦出现问题，你如何界定由谁担责？" class="headerlink" title="Q3：如果你是一个项目经理，那么你认为这你的项目中需要专职的QA么？还是只需有Test即可？如果一旦出现问题，你如何界定由谁担责？"></a>Q3：如果你是一个项目经理，那么你认为这你的项目中需要专职的QA么？还是只需有Test即可？如果一旦出现问题，你如何界定由谁担责？</h3><hr><blockquote><p>A：读了《我们需要专职的QA》后，一开始我也不敢说只需要QA或者只需要Test,我认为如果对于专职QA来说，他们只懂得用高级的工具进行流水线似的测试，但是不懂开发和原理，那么专职的QA对开发来说那就是一种累赘，不仅测试会生出许多的bug,甚至不是bug也会处理成bug让开发来进行处理，这就大大阻碍的工程的进度，还会在人际交往上产生隔阂，并且QA没有什么责任来承担，就像文中所说，项目即将上线了，出现了内存bug，本应该两个月之前应该告诉开发，却迟迟晚了两个月，如果这个时候，要是再有不太愿意上心的开发人员，那这个项目，我感觉质量啥的根本不用说什么保障了，在这个实例中，我感觉这个QA就是打酱油的，没有存在的价值，但是如果一个上心又有能力的QA，那会不会有就不太一样了呢，比如，促进项目的发展，节省项目开发成本，节省测试时间，按照我个人的观点来看，我感觉专职的QA我们不需要，我们只需要Test就可以了，让test每天跟进开发人员的脚步，而不是和以前一样只是，自己做自己的测试，完全不需要和开发人员进行协商，让开发和test各司其职，对项目共同负责，对项目责任进行划分，首先让开发首先进行自我测试，并且要注释明确，对于BUG进行等级划分，不能出现太多小的bug让测试来做吧，Test在进行测试的时候,如果在某个模块出现bug太多，如果说这个模块在以后的项目中，出现问题那么就由这个开发来负责，如果bug等级高，数量少并且没有被开发发现，后续过程中，test也没有发现，那这个责任由test负责，无论是谁负责，在项目中都应该尽职尽责，保证项目上线不会出问题。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Q1-对教材与参考资料阅读后关于软件质量保障你的体会是什么？&quot;&gt;&lt;a href=&quot;#Q1-对教材与参考资料阅读后关于软件质量保障你的体会是什么？&quot; class=&quot;headerlink&quot; title=&quot;Q1:  对教材与参考资料阅读后关于软件质量保障你的体会是什么？
      
    
    </summary>
    
    
      <category term="-软件质量保证 -QA _QA工作职责 -QA和Test" scheme="https://augus-liuzhi.github.io/tags/%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%BF%9D%E8%AF%81-QA-QA%E5%B7%A5%E4%BD%9C%E8%81%8C%E8%B4%A3-QA%E5%92%8CTest/"/>
    
  </entry>
  
  <entry>
    <title>ospf的配置</title>
    <link href="https://augus-liuzhi.github.io/2019/09/22/OSPF%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"/>
    <id>https://augus-liuzhi.github.io/2019/09/22/OSPF快速配置/</id>
    <published>2019-09-22T06:51:38.658Z</published>
    <updated>2019-09-22T07:00:56.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><p><img src="https://img-blog.csdn.net/20180202202509942?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVmljdG9yeUtpbmdMSVU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="hihi"></p><h5 id="R1"><a href="#R1" class="headerlink" title="R1"></a>R1</h5><blockquote><p><huawei>system-view<br>[Huawei]int g0/0/1<br>[Huawei-GigabitEthernet0/0/1]ip add 10.1.12.1 24<br>[Huawei-GigabitEthernet0/0/1]q<br>[Huawei]int LoopBack 0<br>[Huawei-LoopBack0]ip add 1.1.1.1<br>[Huawei-LoopBack0]q<br>[Huawei]ospf 1 router-id 1.1.1.1<br>[Huawei-ospf-1]area 0<br>[Huawei-ospf-1-area-0.0.0.0]network 10.1.12.0 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.0]network 1.1.1.1 0.0.0.0</huawei></p></blockquote><h5 id="R2"><a href="#R2" class="headerlink" title="R2"></a>R2</h5><blockquote><p><huawei>system-view<br>[Huawei]int g0/0/0<br>[Huawei-GigabitEthernet0/0/0]ip add 10.1.12.2 24<br>[Huawei-GigabitEthernet0/0/0]int g0/0/1<br>[Huawei-GigabitEthernet0/0/1]ip add 10.1.23.1 24<br>[Huawei-GigabitEthernet0/0/1]q<br>[Huawei]int LoopBack 0<br>[Huawei-LoopBack0]ip add 2.2.2.2 32<br>[Huawei-LoopBack0]q<br>[Huawei]ospf 1 router-id 2.2.2.2<br>[Huawei-ospf-1]area 0<br>[Huawei-ospf-1-area-0.0.0.0]network 10.1.12.0 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.0]q<br>[Huawei-ospf-1]area 1<br>[Huawei-ospf-1-area-0.0.0.1]network 10.1.23.0 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.1]network 2.2.2.2 0.0.0.0<br>[Huawei-ospf-1-area-0.0.0.1]vlink-peer 3.3.3.3</huawei></p></blockquote><h5 id="R3"><a href="#R3" class="headerlink" title="R3"></a>R3</h5><blockquote><p><huawei>system-view<br>[Huawei]int g0/0/0<br>[Huawei-GigabitEthernet0/0/0]ip add 10.1.23.2 24<br>[Huawei-GigabitEthernet0/0/0]int g0/0/1<br>[Huawei-GigabitEthernet0/0/1]ip add 10.1.34.1 24<br>[Huawei-GigabitEthernet0/0/1]q<br>[Huawei]int LoopBack 0<br>[Huawei-LoopBack0]ip add 3.3.3.3 32<br>[Huawei]ospf 1 router-id 3.3.3.3<br>[Huawei-ospf-1]area 1<br>[Huawei-ospf-1-area-0.0.0.1]network 10.1.23.0 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.1]network 3.3.3.3 0.0.0.0<br>[Huawei-ospf-1-area-0.0.0.1]q<br>[Huawei-ospf-1]area 2<br>[Huawei-ospf-1-area-0.0.0.2]network 10.1.34.0 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.2]q<br>[Huawei-ospf-1]area 1<br>[Huawei-ospf-1-area-0.0.0.1]vlink-peer 2.2.2.2</huawei></p></blockquote><h5 id="R4"><a href="#R4" class="headerlink" title="R4"></a>R4</h5><blockquote><p><huawei>system-view<br>[Huawei]int g0/0/1<br>[Huawei-GigabitEthernet0/0/1]ip add 10.1.34.2 24<br>[Huawei-GigabitEthernet0/0/1]q<br>[Huawei]int LoopBack 0<br>[Huawei-LoopBack0]ip add 4.4.4.4 32<br>[Huawei]ospf 1 router-id 4.4.4.4<br>[Huawei-ospf-1]area 2<br>[Huawei-ospf-1-area-0.0.0.2]network 10.1.34.2 0.0.0.255<br>[Huawei-ospf-1-area-0.0.0.2]network 4.4.4.4 0.0.0.0</huawei></p></blockquote><h5 id="验证："><a href="#验证：" class="headerlink" title="验证："></a>验证：</h5><h6 id="R1-ping-R2"><a href="#R1-ping-R2" class="headerlink" title="R1  ping  R2"></a>R1  ping  R2</h6><p><img src="https://img-blog.csdn.net/20180202205827537?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVmljdG9yeUtpbmdMSVU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="ho"></p><h6 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h6><p><img src="https://img-blog.csdn.net/20180202205942329?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvVmljdG9yeUtpbmdMSVU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="hlo"></p><blockquote><p>如需引入外部路由在边缘路由执行：</p><p>[Huawei-ospf-1]default-route-advertise always （路由的注入）</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;拓扑结构&quot;&gt;&lt;a href=&quot;#拓扑结构&quot; class=&quot;headerlink&quot; title=&quot;拓扑结构&quot;&gt;&lt;/a&gt;拓扑结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180202202509942?watermar
      
    
    </summary>
    
    
      <category term="-ospf" scheme="https://augus-liuzhi.github.io/tags/ospf/"/>
    
  </entry>
  
  <entry>
    <title>Java算法题</title>
    <link href="https://augus-liuzhi.github.io/2019/09/21/Java%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://augus-liuzhi.github.io/2019/09/21/Java算法题/</id>
    <published>2019-09-21T11:45:32.546Z</published>
    <updated>2019-09-22T05:04:57.475Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/java-%E7%AE%97%E6%B3%95-green" alt="java"></p><h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数列：  2/1 3/2 5/3 8/5 13/8 21/13…………</span></span><br><span class="line"><span class="comment"> * 思路：  斐波那契数列（黄金分割数列），从第三项开始，前两项之和等于下一项</span></span><br><span class="line"><span class="comment"> * 本题：分母+分子=下一项分子 分子=下一项分母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci_number</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> numerator = <span class="number">2</span>; <span class="comment">// 定义初始分子;</span></span><br><span class="line"><span class="keyword">int</span> denominator = <span class="number">1</span>; <span class="comment">// 定义初始分母；</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, sum; <span class="comment">// 定义n控制 n项 sum为当前第n项值</span></span><br><span class="line"><span class="keyword">float</span> sums = <span class="number">0f</span>; <span class="comment">// sums为前n项和</span></span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">20</span>) &#123;</span><br><span class="line">sum = (numerator / denominator);</span><br><span class="line">numerator = (denominator + numerator);</span><br><span class="line">denominator = numerator;</span><br><span class="line">sums += sum;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"前20项数列之和为："</span> + sums);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 完数（又名完美数）一个数等于除它本身之外的因子之和，就是完数</span></span><br><span class="line"><span class="comment"> * 题目：求1000以内的完数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Perfect_number</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;<span class="comment">// 遍历1000以内的数</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">// 定义因子之和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;<span class="comment">// j是因子，j&lt;i则j不包含本身i</span></span><br><span class="line"><span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">sum = sum + j;<span class="comment">// 因子累加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum == i)<span class="comment">// 判断完数</span></span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：将一个正整数分解质因数 如90=2*3*3*5</span></span><br><span class="line"><span class="comment"> * 程序分析（1）对n进行分解质数，找一个最小质数k，如果n==k,则结束</span></span><br><span class="line"><span class="comment"> *     （2）当n&gt;k时，如果n能被k整除，则k是一个质因数，输出，并将这个n/k这个正整数进行质因数分解，</span></span><br><span class="line"><span class="comment"> *    把n/k赋值给n，继续执行第一步</span></span><br><span class="line"><span class="comment"> *     （3） 如果不能被整除，继续进行k+1判断能否被整除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prime</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入要分解的正整数："</span>);</span><br><span class="line"><span class="keyword">int</span> n = read.nextInt();<span class="comment">//获取输入的数字n</span></span><br><span class="line">System.out.print(n + <span class="string">"="</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= n; k++) &#123;</span><br><span class="line"><span class="keyword">while</span> (n != k) &#123;<span class="comment">//判断n是否等于k</span></span><br><span class="line"><span class="keyword">if</span> (n % k == <span class="number">0</span>) &#123;<span class="comment">//能整除就是因数，输出</span></span><br><span class="line">System.out.print(k + <span class="string">"*"</span>);<span class="comment">//输出，*控制格式</span></span><br><span class="line">n = n / k;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//不能被整除就跳出while</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：用条件运算符嵌套完成此题：学习成绩&gt;90 用A表示</span></span><br><span class="line"><span class="comment"> *      60-89之间用B表示 小于60用C表示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfElse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入-成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> a = read.nextInt();</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"成绩：A"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">60</span> &amp;&amp; a &lt; <span class="number">90</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"成绩：B"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">60</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"成绩：C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*求最小公倍数算法：两个整数相乘除以最大公约数</span></span><br><span class="line"><span class="comment">  *     求最大公约数：辗转相除法：a%b=c 只要c不为0 a=b</span></span><br><span class="line"><span class="comment"> *  b=c继续除，知道c=0,输出此时的被除数，就是最大公约数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gcd</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入第一个数："</span>);</span><br><span class="line"><span class="keyword">int</span> a=read.nextInt();<span class="comment">//定义接收第一个数</span></span><br><span class="line"><span class="keyword">int</span> d=a;<span class="comment">//d用于求小公倍数</span></span><br><span class="line">System.out.println(<span class="string">"请输入第二个数："</span>);</span><br><span class="line"><span class="keyword">int</span> b=read.nextInt();<span class="comment">//定义接收第二个数</span></span><br><span class="line"><span class="keyword">int</span> e=b;<span class="comment">//e用于求小公倍数</span></span><br><span class="line"><span class="keyword">int</span> c=a%b;<span class="comment">//求余判断最大公约数</span></span><br><span class="line"><span class="keyword">int</span> f=b;<span class="comment">//如果第一次就被整除，则直接接收b</span></span><br><span class="line"><span class="keyword">while</span>(c!=<span class="number">0</span>) &#123;<span class="comment">//辗转相除</span></span><br><span class="line">a=b;</span><br><span class="line">b=c;</span><br><span class="line">c=a%b;</span><br><span class="line">f=b;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大公约数是："</span>+f);</span><br><span class="line">System.out.println(<span class="string">"最小公倍数是："</span>+((d*e)/f));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*题目：</span></span><br><span class="line"><span class="comment"> * 数字1-4能组成多少个不重复且互不相同的数字</span></span><br><span class="line"><span class="comment"> * 思路：定义三个1-4的数组，然后用三个循环嵌套，进行遍历</span></span><br><span class="line"><span class="comment"> * 输出，如果出现相同的或者重复的进行判断筛选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SanWeiShu</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[]= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a) &#123;<span class="comment">//三层循环可以控制出现不重复的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j:b) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t:c) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j||j==t||i==t) &#123;<span class="comment">//判断不要相同的</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">System.out.print(i+<span class="string">" "</span>+j+<span class="string">" "</span>+t);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"不重复的数字有"</span>+count+<span class="string">"个"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：输入一个数，求它是几位数，并且逆序输出</span></span><br><span class="line"><span class="comment">  *   思路：</span></span><br><span class="line"><span class="comment">  *   先将int转为String</span></span><br><span class="line"><span class="comment">  *   然后根据String的长度建立一个空int[]</span></span><br><span class="line"><span class="comment">  *   再用一个循环，分别赋String中对应位char转为int的值给每一个int[]中元素  </span></span><br><span class="line"><span class="comment"> * 然后循环遍历逆序输出数组  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入一个不多于五位数的整数："</span>);</span><br><span class="line"><span class="keyword">int</span> a = read.nextInt();<span class="comment">//键盘接收一个数字</span></span><br><span class="line">String str = String.valueOf(a);<span class="comment">//将int变成string</span></span><br><span class="line">System.out.println(<span class="string">"你输入的是："</span> + str);</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</span><br><span class="line">System.out.println(<span class="string">"数字的位数是："</span> + str.length() + <span class="string">"位"</span>);<span class="comment">//string的长度就是数字的位数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">arr[i] = Integer.parseInt(str.charAt(i) + <span class="string">""</span>);<span class="comment">//将字符串转换成一个整数，赋值给数组</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"数字的逆序输出是："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//逆序输出</span></span><br><span class="line">System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：判断一个五位数是不是回文</span></span><br><span class="line"><span class="comment"> * 思路：数字转字符串，字符串转字符，字符转数组</span></span><br><span class="line"><span class="comment"> * 判断第一位和最后一位是否相等，判断第二位和倒数第二位是否相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Palindrome</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入一个五位数的整数："</span>);</span><br><span class="line"><span class="keyword">int</span> a = read.nextInt();<span class="comment">//键盘接收一个数字</span></span><br><span class="line">String str = String.valueOf(a);<span class="comment">//将int变成string</span></span><br><span class="line">System.out.print(<span class="string">"你输入的是："</span> + str+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">arr[i] = Integer.parseInt(str.charAt(i) + <span class="string">""</span>);<span class="comment">//将字符串转换成一个整数，赋值给数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((arr[<span class="number">0</span>]==arr[<span class="number">4</span>])&amp;&amp;(arr[<span class="number">1</span>]==arr[<span class="number">3</span>])) &#123;<span class="comment">//判断</span></span><br><span class="line">System.out.print(<span class="string">"是回文"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(<span class="string">"不是回文"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目9"><a href="#题目9" class="headerlink" title="题目9"></a>题目9</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：求一个3*3矩阵对角元素之和</span></span><br><span class="line"><span class="comment"> * 思路：二维数组来写3*3矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[][]= &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==j||(j==a.length-i-<span class="number">1</span>)) &#123;<span class="comment">//判断对角元素</span></span><br><span class="line">sum+=a[i][j];<span class="comment">//对角元素的累加</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"对角线之和："</span>+sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目10-一"><a href="#题目10-一" class="headerlink" title="题目10(一)"></a>题目10(一)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目： N个人人围成一圈，从1-3报数，凡是报到3的就会剔除，问最后剩下的是几号？</span></span><br><span class="line"><span class="comment"> * 思路：将N个人改成布尔类型，然后通过for循环，给每个人赋值给true，再用一个计数器</span></span><br><span class="line"><span class="comment"> * t，凡是累加到3（相当于报数到3）然后就将此时的a[i]赋值给false,知道最后剩下只有一个数的时候</span></span><br><span class="line"><span class="comment"> * 那么这个数的下标值加1就是所求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josephus</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner read=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入人数："</span>);</span><br><span class="line"><span class="keyword">int</span> n = read.nextInt();<span class="comment">//键盘接收人数的个数</span></span><br><span class="line"><span class="keyword">boolean</span> a[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];<span class="comment">//将人数赋值给布尔类型</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">a[i] = <span class="keyword">true</span>;<span class="comment">//将每个人赋值给true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = a.length;</span><br><span class="line"><span class="keyword">while</span> (len &gt;<span class="number">1</span>) &#123;<span class="comment">//当只剩下一个true时就跳出循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line">t++;<span class="comment">//累加器，判断报数到3</span></span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">3</span>) &#123;<span class="comment">//报数到3时就赋值给false</span></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">a[i] = <span class="keyword">false</span>;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line">System.out.println(i+<span class="number">1</span>);<span class="comment">//再次循环遍历，输出剩下的一个true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目10-二"><a href="#题目10-二" class="headerlink" title="题目10(二)"></a>题目10(二)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">yuese</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(cycle(<span class="number">10</span>,<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cycle</span><span class="params">(<span class="keyword">int</span> people, <span class="keyword">int</span> num)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i, r = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= people; i++) r = (r + num) % i;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目11"><a href="#题目11" class="headerlink" title="题目11"></a>题目11</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：求1-50之间的素数</span></span><br><span class="line"><span class="comment"> * 思路：两个函数</span></span><br><span class="line"><span class="comment"> * 主函数控制数字范围</span></span><br><span class="line"><span class="comment"> * prime函数判断素数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">isprime</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">50</span>;i++) &#123;<span class="comment">//控制数字范围</span></span><br><span class="line"><span class="keyword">if</span>(prime(i)) &#123;<span class="comment">//调用prime</span></span><br><span class="line">System.out.println(i+<span class="string">"是素数"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=Math.sqrt(x);i++) &#123;<span class="comment">//（1）在一般领域，对正整数n，如果用2到  之间的所有整数去除，均无法整除，则n为质数。</span></span><br><span class="line"><span class="keyword">if</span>(x%i==<span class="number">0</span>) &#123;<span class="comment">//能被其他数整除，就不是素数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;             <span class="comment">//（2）质数大于等于2 不能被它本身和1以外的数整除</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目12"><a href="#题目12" class="headerlink" title="题目12"></a>题目12</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 题目：小球反弹。每次弹起高度是下降的1/2</span></span><br><span class="line"><span class="comment"> * 用循环给h赋值，求出循环第十次的高度</span></span><br><span class="line"><span class="comment"> * 用sum做高度累加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Free</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> h=<span class="number">100</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</span><br><span class="line">sum+=h;<span class="comment">//累加经过路程</span></span><br><span class="line">h=h/<span class="number">2</span>;<span class="comment">//将上一次高度赋值给新高度</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"经过"</span>+sum+<span class="string">"米"</span>+<span class="string">" "</span>+<span class="string">"第十次反弹"</span>+h);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/java-%E7%AE%97%E6%B3%95-green&quot; alt=&quot;java&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="-java算法" scheme="https://augus-liuzhi.github.io/tags/java%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>java自动生成四则运算+源码</title>
    <link href="https://augus-liuzhi.github.io/2019/09/20/Java%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    <id>https://augus-liuzhi.github.io/2019/09/20/Java自动生成四则运算/</id>
    <published>2019-09-20T15:01:42.882Z</published>
    <updated>2019-09-22T05:10:17.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需求分析："><a href="#1-需求分析：" class="headerlink" title="1.需求分析："></a>1.需求分析：</h3><hr><p>为了对学生的算数进行锻炼，家长每天给孩子出题成为一个难题，需要做出一个程序，每天生成一定数量且不重复的题目，分解家长们的压力。</p><h3 id="2-功能设计"><a href="#2-功能设计" class="headerlink" title="2. 功能设计:"></a>2. 功能设计:</h3><hr><h5 id="2-1-基本功能："><a href="#2-1-基本功能：" class="headerlink" title="2.1 基本功能："></a>2.1 基本功能：</h5><ul><li>自动生成10道100以内的2个操作数的四则运算算式== （+ - *  /）==，要求运算结果也在100以内——&gt;实现</li></ul><ul><li>剔除重复算式。  2 + 3 =    和  2 + 3 =     是重复算式      2 + 3 =   和   3 + 2 =  不属于重复算式——&gt;实现</li></ul><ul><li>题目数量可定制——&gt;实现</li></ul><ul><li>相关参数可控——&gt;实现<ol><li>是否包含乘法和除法</li><li>操作数数值范围可控（如操作数 在100以内   还是1000以内）</li><li>操作数是否含负数　　 </li></ol></li></ul><ul><li>生成的运算题存储到外部文件<code>result.txt</code>中——-&gt;实现</li></ul><h5 id="2-2-拓展功能："><a href="#2-2-拓展功能：" class="headerlink" title="2.2 拓展功能："></a>2.2 拓展功能：</h5><p>　　　　　　　　1. 自动生成答案</p><p>　　　　　　　　2. 添加学号，并为每个学号生成不同的试题　　　　　　　　</p><h3 id="3-设计实现："><a href="#3-设计实现：" class="headerlink" title="3. 设计实现："></a>3. 设计实现：</h3><hr><ul><li>使用构造函数<code>PrintStream Scanner</code>  ，<code>PrintStream ps = new PrintStream(&quot;d:/result.txt&quot;);</code></li></ul><ul><li><code>System.setOut(ps);</code>调用此函数，可以将所有<code>System.out.println();</code>输出语句，打印到i我们创建的文件夹中</li></ul><ul><li><code>Scanner t=new Scanner(System.in);</code> 控制我们从键盘输入</li></ul><ul><li><code>Math.random();</code>产生随机不重复函数，我做了以下测试</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> <span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt; 2  * 验证random会不会产生相同的随机数</span></span><br><span class="line"><span class="comment">&gt; 3  * 做个10万次循环看看，发现结果为0</span></span><br><span class="line"><span class="comment">&gt; 4  *java不像c,c会大概率产生相同的随机数，甚至会下次运行可能会和上次</span></span><br><span class="line"><span class="comment">&gt; 5  * 产生的随机数是一样的，因此用C写得初始化一个时间种子，才能尽可能的保证随机数不相同</span></span><br><span class="line"><span class="comment">&gt; 6  *java的random函数10万次运行都很难出现一次相同的随机数，所有random不产生重复函数</span></span><br><span class="line"><span class="comment">&gt; 7  */</span></span><br><span class="line">&gt; <span class="number">8</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text_002</span></span>&#123;</span><br><span class="line">&gt; <span class="number">9</span> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">&gt; <span class="number">10</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="number">11</span> <span class="keyword">double</span> first = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="number">12</span> <span class="keyword">double</span> second = <span class="number">0</span>; </span><br><span class="line">&gt; <span class="number">13</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">99999</span>; i++)&#123;</span><br><span class="line">&gt; <span class="number">14</span> first = Math.random();</span><br><span class="line">&gt; <span class="number">15</span> second = Math.random();</span><br><span class="line">&gt; <span class="number">16</span> <span class="keyword">if</span> (first == second)</span><br><span class="line">&gt; <span class="number">17</span> count ++;</span><br><span class="line">&gt; <span class="number">18</span> &#125;</span><br><span class="line">&gt; <span class="number">19</span> System.out.print(count);</span><br><span class="line">&gt; <span class="number">20</span> &#125;</span><br><span class="line">&gt; <span class="number">21</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-测试运行："><a href="#4-测试运行：" class="headerlink" title="4. 测试运行："></a>4. 测试运行：</h3><hr><p><img src="https://img-blog.csdnimg.cn/20190913202609169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="测试01"></p><p><img src="https://img-blog.csdnimg.cn/20190913202744331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="测试02"></p><h3 id="5-代码解释"><a href="#5-代码解释" class="headerlink" title="5. 代码解释"></a>5. 代码解释</h3><p>第一个操作数的选择<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个操作数的选择</span></span><br><span class="line"> <span class="number">2</span>             <span class="keyword">int</span> a=(<span class="keyword">int</span>)(Math.random()*tf+<span class="number">1</span>);</span><br><span class="line"> <span class="number">3</span>             </span><br><span class="line"> <span class="number">4</span>             <span class="keyword">if</span>(zf==<span class="number">1</span>) &#123;<span class="comment">//有负数</span></span><br><span class="line"> <span class="number">5</span>             <span class="keyword">int</span> p=(<span class="keyword">int</span>) (Math.random()*<span class="number">2</span>);</span><br><span class="line"> <span class="number">6</span>                 <span class="keyword">switch</span>(p) &#123;</span><br><span class="line"> <span class="number">7</span>                 <span class="keyword">case</span> <span class="number">0</span>:a=a*(-<span class="number">1</span>);<span class="comment">//取负数</span></span><br><span class="line"> <span class="number">8</span>                        System.out.print(a);<span class="keyword">break</span>;</span><br><span class="line"> <span class="number">9</span>                 <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="number">10</span>                           System.out.print(a);<span class="keyword">break</span>;</span><br><span class="line"><span class="number">11</span>                 &#125;</span><br><span class="line"><span class="number">12</span>             &#125;</span><br><span class="line"><span class="number">13</span>             <span class="keyword">if</span>(zf==<span class="number">0</span>) &#123;<span class="comment">//没有负数</span></span><br><span class="line"><span class="number">14</span>                     System.out.print(a);</span><br><span class="line"><span class="number">15</span>                     &#125;</span><br></pre></td></tr></table></figure></p><p>运算符号的选择<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="number">1</span> System.out.println(<span class="string">"请选择是否包含*或者/：2:否 4:是 "</span>);</span><br><span class="line"> <span class="number">2</span>         <span class="keyword">int</span> fu=t.nextInt();</span><br><span class="line"> <span class="number">3</span> <span class="keyword">if</span>(fu==<span class="number">2</span>) &#123;<span class="comment">//选择两个字符‘+’‘-’</span></span><br><span class="line"> <span class="number">4</span>                 <span class="keyword">int</span> k=(<span class="keyword">int</span>)(Math.random()*<span class="number">2</span>);</span><br><span class="line"> <span class="number">5</span>                 <span class="keyword">switch</span>(k) &#123;<span class="comment">//随机选择运算符</span></span><br><span class="line"> <span class="number">6</span>                 <span class="keyword">case</span> <span class="number">0</span>:System.out.print(<span class="string">"+"</span>);</span><br><span class="line"> <span class="number">7</span>                        <span class="keyword">break</span>;</span><br><span class="line"> <span class="number">8</span>                 <span class="keyword">case</span> <span class="number">1</span>:System.out.print(<span class="string">"-"</span>);</span><br><span class="line"> <span class="number">9</span>                        <span class="keyword">break</span>; </span><br><span class="line"><span class="number">10</span>                                                &#125;</span><br><span class="line"><span class="number">11</span> <span class="keyword">if</span>(fu==<span class="number">4</span>) &#123;<span class="comment">//四个字符的‘+’‘-’‘*’‘/’</span></span><br><span class="line"><span class="number">12</span>             <span class="keyword">int</span> k=(<span class="keyword">int</span>)(Math.random()*<span class="number">4</span>+<span class="number">1</span>);</span><br><span class="line"><span class="number">13</span>             <span class="keyword">switch</span>(k) &#123;<span class="comment">//随机选择运算符</span></span><br><span class="line"><span class="number">14</span>             <span class="keyword">case</span> <span class="number">1</span>:System.out.print(<span class="string">"+"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="number">15</span>             <span class="keyword">case</span> <span class="number">2</span>:System.out.print(<span class="string">"-"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="number">16</span>             <span class="keyword">case</span> <span class="number">3</span>:System.out.print(<span class="string">"*"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="number">17</span>             <span class="keyword">case</span> <span class="number">4</span>:System.out.print(<span class="string">"/"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="number">18</span>             &#125;</span><br></pre></td></tr></table></figure></p><p>　　等号右侧结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="number">1</span> <span class="comment">//等号</span></span><br><span class="line"> <span class="number">2</span>             </span><br><span class="line"> <span class="number">3</span>             System.out.print(<span class="string">"="</span>);</span><br><span class="line"> <span class="number">4</span>             <span class="comment">//运算结果</span></span><br><span class="line"> <span class="number">5</span>             <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;</span><br><span class="line"> <span class="number">6</span>                 c=a+b;System.out.println(c);</span><br><span class="line"> <span class="number">7</span>             &#125;</span><br><span class="line"> <span class="number">8</span>             <span class="keyword">if</span>(k==<span class="number">2</span>) &#123;</span><br><span class="line"> <span class="number">9</span>                 c=a-b;System.out.println(c);</span><br><span class="line"><span class="number">10</span>             &#125;</span><br><span class="line"><span class="number">11</span>             <span class="keyword">if</span>(k==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="number">12</span>                 c=a*b;System.out.println(c);</span><br><span class="line"><span class="number">13</span>             &#125;</span><br><span class="line"><span class="number">14</span>             <span class="keyword">if</span>(k==<span class="number">4</span>) &#123;</span><br><span class="line"><span class="number">15</span>                 c=a/b;System.out.println(c);</span><br><span class="line"><span class="number">16</span>             &#125;</span><br></pre></td></tr></table></figure><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><hr><p><img src="https://img-blog.csdnimg.cn/20190913202956382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="总结"></p><h3 id="7-psp"><a href="#7-psp" class="headerlink" title="7. psp"></a>7. psp</h3><hr><p><img src="https://img-blog.csdnimg.cn/20190913203103805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1ZpY3RvcnlLaW5nTElV,size_16,color_FFFFFF,t_70" alt="psp"><br><strong>源码：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">text_005</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"d:/result.txt"</span>);</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">Scanner t=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入题目个数："</span>);</span><br><span class="line"><span class="keyword">int</span> tg=t.nextInt();</span><br><span class="line"><span class="comment">//控制题目个数</span></span><br><span class="line">System.out.print(<span class="string">"请输入操作数的范围（如 100，1000等）:"</span>);</span><br><span class="line"><span class="keyword">int</span> tf=t.nextInt();</span><br><span class="line"><span class="comment">//控制题目范围</span></span><br><span class="line">System.out.println(<span class="string">"请选择是否有负数：1:有  0:没有"</span>);</span><br><span class="line"><span class="keyword">int</span> zf=t.nextInt();</span><br><span class="line"><span class="comment">//控制正负数</span></span><br><span class="line">System.out.println(<span class="string">"请选择是否包含*或者/：2:否 4:是 "</span>);</span><br><span class="line"><span class="keyword">int</span> fu=t.nextInt();</span><br><span class="line"><span class="comment">//控制符号</span></span><br><span class="line">System.setOut(ps);</span><br><span class="line"><span class="comment">//添加打印学号</span></span><br><span class="line"><span class="comment">//for(int j=0;j&lt;2;j++) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(2019000+j);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tg;i++) &#123;<span class="comment">//循环控制题目个数</span></span><br><span class="line"><span class="comment">//第一个操作数的选择</span></span><br><span class="line"><span class="keyword">int</span> a=(<span class="keyword">int</span>)(Math.random()*tf+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">1</span>) &#123;<span class="comment">//有负数</span></span><br><span class="line"><span class="keyword">int</span> p=(<span class="keyword">int</span>) (Math.random()*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">switch</span>(p) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:a=a*(-<span class="number">1</span>);<span class="comment">//取负数</span></span><br><span class="line">   System.out.print(a);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      System.out.print(a);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">0</span>) &#123;<span class="comment">//没有负数</span></span><br><span class="line">System.out.print(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fu==<span class="number">2</span>) &#123;<span class="comment">//选择两个字符‘+’‘-’</span></span><br><span class="line"><span class="keyword">int</span> k=(<span class="keyword">int</span>)(Math.random()*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">switch</span>(k) &#123;<span class="comment">//随机选择运算符</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:System.out.print(<span class="string">"+"</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:System.out.print(<span class="string">"-"</span>);</span><br><span class="line">   <span class="keyword">break</span>; </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b=(<span class="keyword">int</span>)(Math.random()*tf+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">1</span>) &#123;<span class="comment">//有负数</span></span><br><span class="line"><span class="keyword">int</span> p=(<span class="keyword">int</span>) (Math.random()*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">switch</span>(p) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:b=b*(-<span class="number">1</span>);<span class="comment">//取负数</span></span><br><span class="line">   System.out.print(b);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      System.out.print(b);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">0</span>) &#123;<span class="comment">//没有负数</span></span><br><span class="line">System.out.print(b);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"="</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//运算结果</span></span><br><span class="line"><span class="comment">if(k==0) &#123;c=a+b;System.out.println(c);&#125;</span></span><br><span class="line"><span class="comment">if(k==1)&#123;c=a-b;System.out.println(c);&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fu==<span class="number">4</span>) &#123;<span class="comment">//四个字符的‘+’‘-’‘*’‘/’</span></span><br><span class="line"><span class="keyword">int</span> k=(<span class="keyword">int</span>)(Math.random()*<span class="number">4</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">switch</span>(k) &#123;<span class="comment">//随机选择运算符</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:System.out.print(<span class="string">"+"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:System.out.print(<span class="string">"-"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:System.out.print(<span class="string">"*"</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:System.out.print(<span class="string">"/"</span>);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二个操作数的选择</span></span><br><span class="line"><span class="keyword">int</span> b=(<span class="keyword">int</span>) (Math.random()*tf+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">1</span>) &#123;<span class="comment">//有负数</span></span><br><span class="line"><span class="keyword">int</span> p=(<span class="keyword">int</span>) (Math.random()*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">switch</span>(p) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:b=b*(-<span class="number">1</span>);<span class="comment">//取负数   </span></span><br><span class="line">   System.out.print(b);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      System.out.print(b);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(zf==<span class="number">0</span>) &#123;<span class="comment">//没有负数</span></span><br><span class="line">System.out.print(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等号</span></span><br><span class="line">System.out.println(<span class="string">"="</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//运算结果</span></span><br><span class="line"><span class="comment">if(k==1) &#123;</span></span><br><span class="line"><span class="comment">c=a+b;System.out.println(c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(k==2) &#123;</span></span><br><span class="line"><span class="comment">c=a-b;System.out.println(c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(k==3) &#123;</span></span><br><span class="line"><span class="comment">c=a*b;System.out.println(c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(k==4) &#123;</span></span><br><span class="line"><span class="comment">c=a/b;System.out.println(c);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学号那个循环的截止&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-需求分析：&quot;&gt;&lt;a href=&quot;#1-需求分析：&quot; class=&quot;headerlink&quot; title=&quot;1.需求分析：&quot;&gt;&lt;/a&gt;1.需求分析：&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;为了对学生的算数进行锻炼，家长每天给孩子出题成为一个难题，需要做出一个程序，每天生成一定数
      
    
    </summary>
    
    
      <category term="-java算法 -四则运算" scheme="https://augus-liuzhi.github.io/tags/java%E7%AE%97%E6%B3%95-%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>2019软件工程第一次作业</title>
    <link href="https://augus-liuzhi.github.io/2019/09/20/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>https://augus-liuzhi.github.io/2019/09/20/构建之法第一章/</id>
    <published>2019-09-20T15:01:42.683Z</published>
    <updated>2019-09-22T05:09:24.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-red" alt="构建之法"></p><h2 id="1-计算机专业术语及名词解释"><a href="#1-计算机专业术语及名词解释" class="headerlink" title="1.计算机专业术语及名词解释"></a>1.计算机专业术语及名词解释</h2><ul><li>软件=程序+软件工程</li><li>程序=数据结构+算法</li><li>程序：源程序，一行行代码</li><li><p>软件构建</p><p>  <code>1. cc和link命令</code><br>  <code>2. 软件架构：一系列抽象模式，指导大型软件各个方面的设计</code><br>  <code>3. 软件设计与实现</code><br>  <code>4. 各种文件和数据之间描述文件依赖，编译，链接</code></p></li></ul><ul><li><p>软件质量 </p><p>  <code>1. 源代码管理（配置管理）：配置运行的操作系统及程序版本等</code><br>  <code>2. 质量保证：保证高质量软件、流程进行开发</code><br>  <code>3. 软件测试：验证的过程</code></p></li><li><p>软件开发</p><p>  <code>1. 需求分析：对用户的需求【靠谱、可实现】</code><br>  <code>2. 设计：软件架构</code><br>  <code>3. 实现：写数据和算法</code><br>  <code>4. 测试：软件测试</code><br>  <code>5. 发布: 发布软件</code></p></li></ul><ul><li><p>软件生命周期</p><p>  <code>1. 程序理解：懂已有程序，了解程序设计</code><br>  <code>2. 软件维护（服务运营）：打补丁，维护服务，修复问题</code><br>  <code>3. 软件项目管理：生命周期负责人</code></p></li><li>用户体验：使用者的体验</li><li>国际化和本地化：处理不同语言，不同地区用户对界面和功能的需求</li><li>商业模式</li><li>职业道德规范</li><li>软件企业=软件+商业模式</li><li><p>程序开发的不同阶段</p><p>  <code>1. 写程序练习数据结构由与算法</code><br>  <code>2. 用JAVAScript ASP.NET Ruby写写网站</code><br>  <code>3. 钻研新技术，应用新技术在软件行业创新</code><br>  <code>4. 银行软件系统，互联网搜索行业，电子商务系，windows操作系统</code></p></li></ul><ul><li><p>软件开发特性（难题）</p><p>  <code>1. 复杂性</code><br>  <code>2. 不可见行性</code><br>  <code>3. 易变形</code><br>  <code>4. 服从性</code><br>  <code>5. 非连续性</code></p></li></ul><p>​    </p><ul><li><p>计算机科学偏理论领域</p><p>  <code>1. 计算理论</code><br>  <code>2. 信息和编码理论</code><br>  <code>3. 算法和数据结构</code><br>  <code>4. 形式化方法</code><br>  <code>5. 程序设计语言</code></p></li><li><p>计算机科学偏实践领域</p><p>  <code>1. 计算机体系结构</code><br>  <code>2. 并行计算和分布式系统</code><br>  <code>3. 实时系统和嵌入式系统</code><br>  <code>4. 操作系统</code><br>  <code>5. 计算机网路</code><br>  <code>6. 科学计算机</code><br>  <code>7. 安全和密码学</code><br>  <code>8. 人工智能</code><br>  <code>9. 计算机图形学</code><br>  <code>10. 数据库和大规模数据处理</code><br>  <code>11. 万维网</code><br>  <code>12. 自然语言处理和语音</code><br>  <code>13. 人机交互</code><br>  <code>14. 软件工程</code></p></li></ul><ul><li>生命周期（软件需求、软件设计、软件构建、软件测试、软件维护）</li><li>专门领域 （软件配置管理、软件工程管理、软件工程过程、软件工程模型和方法、软件质量）</li><li>理论基础（计算基础、数学基础、工程基础）</li><li>软件缺陷 bug</li><li><p>足够好的软件</p><p>  <code>1. 用户满意度</code><br>  <code>2. 可靠性</code><br>  <code>3. 软件流程的质量</code><br>  <code>4. 可维护性</code></p></li></ul><h2 id="2-构建之法五个问题"><a href="#2-构建之法五个问题" class="headerlink" title="2.构建之法五个问题"></a>2.构建之法五个问题</h2><ul><li><code>1 p15</code> ，足够好的软件中，如果一个项目在规定时间之内，无法完成或者bug很多，应该怎么解决，谁来承担后果，会有怎样的后果？</li><li><code>2 P42</code>， 对于个人能力的衡量和发展，企业如何衡量一个人的能力，个人发展又怎样的晋升制度？<br>*<code>3 P130</code> 关于成员授权和信任问题。如果有能力干活的人中途离开了或者在开发过程中这个人遇到技术难题，长时间未解决，其他成员对这个人产生能力质疑时，如何解决这个问题？由谁来主导这个问题的解决？</li><li><code>4 P136</code>， 对于投资质量这一节中，如何保证企业所投资的这个软件是一个好软件【盈利的软件】，从用户需求者角度想，另外还有其他的哪些方面？</li><li><p><code>5 P184</code> ，关于竞争对手的产品，如何使我们制作的软件产品，比竞争对手的产品更好的发展？如何让更多的用户选择我们的产品？如何让我们的产品更有竞争力</p><h2 id="3-软件分类及特点"><a href="#3-软件分类及特点" class="headerlink" title="3.软件分类及特点"></a>3.软件分类及特点</h2></li><li><p><code>Games</code>： 王者荣耀、和平精英</p></li><li><code>Shopping</code>：淘宝、京东、拼多多、1688、咸鱼</li><li><code>Pay</code>:支付宝、云闪付、微信、京东金融</li><li><code>Learning</code>：慕课网、墨墨背单词、可可英语、网易公开课、中国大学mooc</li><li><code>短视频</code>：抖音、西瓜视频、今日头条、飞猪</li><li><code>点餐</code>：美团、美团外卖、饿了么、口碑、KFC</li></ul><p>特点：</p><p><code>1. 像饿了么，美团新用户立减15或者20，可以几分钱吃一顿饭所以下载了，都是盈利软件，对商家进行抽成，不仅赚取用户现金，和其他企业进行广告推广盈利等。</code><br><code>2. 通过应用商店进行下载，当时大一，使用起来感觉非常符合我们</code><br><code>3. 去年因为服务器bug,饿了么对于当时那个时段无法登陆的用户进行了10元无门槛对用户补偿，强制更新，没有取消键，进入页面，只有更新页面。</code><br><code>4. 竞争通过对用户的新注册账号的福利，普通用户还有会员进行推广。</code></p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-red&quot; alt=&quot;构建之法&quot;&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="-构建之法" scheme="https://augus-liuzhi.github.io/tags/%E6%9E%84%E5%BB%BA%E4%B9%8B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何用Markdown写flow流程图</title>
    <link href="https://augus-liuzhi.github.io/2019/09/20/Flow%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>https://augus-liuzhi.github.io/2019/09/20/Flow流程图/</id>
    <published>2019-09-20T15:01:42.597Z</published>
    <updated>2019-09-22T05:13:14.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.shields.io/badge/markdown-%E6%B5%81%E7%A8%8B%E5%9B%BE-orange" alt="markdown"></p><h2 id="Flow流程图"><a href="#Flow流程图" class="headerlink" title="Flow流程图"></a>Flow流程图</h2><p><strong>工具：Typora</strong></p><h4 id="1-流程图各个框框代表的含义"><a href="#1-流程图各个框框代表的含义" class="headerlink" title="1. 流程图各个框框代表的含义"></a>1. 流程图各个框框代表的含义</h4><h6 id="1-1-开始和结束"><a href="#1-1-开始和结束" class="headerlink" title="1.1 开始和结束"></a>1.1 开始和结束</h6><div id="flowchart-0" class="flow-chart"></div><h6 id="1-2-输入输出"><a href="#1-2-输入输出" class="headerlink" title="1.2 输入输出"></a>1.2 输入输出</h6><div id="flowchart-1" class="flow-chart"></div><h6 id="1-3-判断和处理"><a href="#1-3-判断和处理" class="headerlink" title="1.3 判断和处理"></a>1.3 判断和处理</h6><div id="flowchart-2" class="flow-chart"></div><h4 id="2-模块关键字"><a href="#2-模块关键字" class="headerlink" title="2. 模块关键字"></a>2. 模块关键字</h4><hr><ul><li><p><code>start</code>     程序开始</p></li><li><p><code>end</code>    程序结束</p></li><li><p><code>opreation</code>      程序处理块</p></li><li><p><code>subroutine</code>     子程序块</p></li><li><p><code>condition</code>     条件判断</p></li><li><p><code>inputoutput</code>    表示程序的输入输出</p></li><li><p><code>right 、left</code>     表示箭头在当前模块的起点（默认向下,多默认和右）</p></li><li><p><code>yes 、no</code>      表示condition判断分支</p></li></ul><h4 id="3-模块用法"><a href="#3-模块用法" class="headerlink" title="3. 模块用法"></a>3. 模块用法</h4><hr><blockquote><p>模块标识=&gt;模块关键字：内容</p></blockquote><p>模块标识任意起名，最好知名解意，起一个标识的作用</p><p>内容就是框框里的文字</p><p>注意：模块关键字和内容之间有一个冒号，并且要在冒号后，必须要有一个空格</p><h4 id="4-模块连接方法"><a href="#4-模块连接方法" class="headerlink" title="4. 模块连接方法"></a>4. 模块连接方法</h4><hr><blockquote><p>用-&gt;来连接,符号两侧不用空格</p></blockquote><h4 id="5-应用实例"><a href="#5-应用实例" class="headerlink" title="5. 应用实例"></a>5. 应用实例</h4><hr><h6 id="5-1-开始和结束模块"><a href="#5-1-开始和结束模块" class="headerlink" title="5.1 开始和结束模块"></a>5.1 开始和结束模块</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">flowchat</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">st-&gt;e</span><br></pre></td></tr></table></figure><div id="flowchart-3" class="flow-chart"></div><h6 id="5-2-开始和程序处理块（下）"><a href="#5-2-开始和程序处理块（下）" class="headerlink" title="5.2 开始和程序处理块（下）"></a>5.2 开始和程序处理块（下）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">start=&gt;start: 开始</span><br><span class="line">operation=&gt;operation: int i=1</span><br><span class="line">start-&gt;operation</span><br></pre></td></tr></table></figure><div id="flowchart-4" class="flow-chart"></div><h6 id="5-3-开始和程序处理块（右）"><a href="#5-3-开始和程序处理块（右）" class="headerlink" title="5.3 开始和程序处理块（右）"></a>5.3 开始和程序处理块（右）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">start=&gt;start: 开始</span><br><span class="line">operation=&gt;operation: int i=1</span><br><span class="line">start(right)-&gt;operation</span><br></pre></td></tr></table></figure><div id="flowchart-5" class="flow-chart"></div><h6 id="5-4-操作和判断"><a href="#5-4-操作和判断" class="headerlink" title="5.4 操作和判断"></a>5.4 操作和判断</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">con=&gt;condition: for(int i=1;i&lt;n;i++)</span><br><span class="line">op1=&gt;operation: int n=10;</span><br><span class="line">op2=&gt;operation: a++;</span><br><span class="line">op3=&gt;operation: a--;</span><br><span class="line">op1-&gt;con</span><br><span class="line">con(yes)-&gt;op2</span><br><span class="line">con(no)-&gt;op3</span><br></pre></td></tr></table></figure><div id="flowchart-6" class="flow-chart"></div><h6 id="5-5-完整流程1"><a href="#5-5-完整流程1" class="headerlink" title="5.5 完整流程1"></a>5.5 完整流程1</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 操作</span><br><span class="line">sub=&gt;subroutine: 子程序</span><br><span class="line">cond=&gt;condition: 判断</span><br><span class="line">io=&gt;inputoutput: 输出</span><br><span class="line">st(right)-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(right)-&gt;e</span><br><span class="line">cond(no)-&gt;sub(right)-&gt;op</span><br></pre></td></tr></table></figure><div id="flowchart-7" class="flow-chart"></div><h6 id="5-6-完整流程2"><a href="#5-6-完整流程2" class="headerlink" title="5.6 完整流程2"></a>5.6 完整流程2</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;end: 操作</span><br><span class="line">cond=&gt;condition: 判断</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><div id="flowchart-8" class="flow-chart"></div><blockquote><p>注意：如果使用Typora,选中代码，然后再选择语言哪里，直接输入flow即可，如果用其他编辑器，应当输入相应的语法<code></code>flow` ,如csdn。博客园的markdown<strong>不支持、不支持、不支持</strong>流程图。<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束st->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">in01=>inputoutput: 输入out01=>inputoutput: 输出in01(right)->out01</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">con02=>condition: 判断op02=>operation: 操作op02->con02</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script><textarea id="flowchart-3-code" style="display: none">st=>start: 开始e=>end: 结束st->e</textarea><textarea id="flowchart-3-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-3", options);</script><textarea id="flowchart-4-code" style="display: none">start=>start: 开始operation=>operation: int i=1start->operation</textarea><textarea id="flowchart-4-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-4-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-4-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-4", options);</script><textarea id="flowchart-5-code" style="display: none">start=>start: 开始operation=>operation: int i=1start(right)->operation</textarea><textarea id="flowchart-5-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-5-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-5-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-5", options);</script><textarea id="flowchart-6-code" style="display: none">con=>condition: for(int i=1;i<n;i++) op1>operation: int n=10;op2=>operation: a++;op3=>operation: a--;op1->concon(yes)->op2con(no)->op3</n;i++)></textarea><textarea id="flowchart-6-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-6-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-6-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-6", options);</script><textarea id="flowchart-7-code" style="display: none">st=>start: 开始e=>end: 结束op=>operation: 操作sub=>subroutine: 子程序cond=>condition: 判断io=>inputoutput: 输出st(right)->op->condcond(yes)->io(right)->econd(no)->sub(right)->op</textarea><textarea id="flowchart-7-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-7-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-7-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-7", options);</script><textarea id="flowchart-8-code" style="display: none">st=>start: 开始e=>end: 结束op=>end: 操作cond=>condition: 判断st->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-8-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-8-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-8-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-8", options);</script></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img.shields.io/badge/markdown-%E6%B5%81%E7%A8%8B%E5%9B%BE-orange&quot; alt=&quot;markdown&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Flow流程图&quot;&gt;&lt;a href=&quot;#Flow流程
      
    
    </summary>
    
    
      <category term="-markdown -流程图" scheme="https://augus-liuzhi.github.io/tags/markdown-%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    
  </entry>
  
</feed>
