<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuZhi&#39;Blog</title>
  
  <subtitle>人生苦短</subtitle>
  <link href="/Augus-LIUZHI.github.io/atom.xml" rel="self"/>
  
  <link href="https://augus-liuzhi.github.io/"/>
  <updated>2020-10-06T14:21:43.956Z</updated>
  <id>https://augus-liuzhi.github.io/</id>
  
  <author>
    <name>兔崽子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://augus-liuzhi.github.io/2020/10/06/SpringMVC/"/>
    <id>https://augus-liuzhi.github.io/2020/10/06/SpringMVC/</id>
    <published>2020-10-06T14:05:43.088Z</published>
    <updated>2020-10-06T14:21:43.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h1><h4 id="1-1-SpringMVC概述"><a href="#1-1-SpringMVC概述" class="headerlink" title="1.1 SpringMVC概述"></a>1.1 SpringMVC概述</h4><ol><li>Spring 为展现层提供的基于MVC设计理念的优秀的web框架，是目前最主流的MVC框架。</li><li>Spring 3.0以后超越strusts2,称为最优秀的MVC框架。</li><li>SpringMVC通过一套MVC注解，让pojo成为处理请求的控制器，而无需实现任何接口。</li><li>支持REST风格的URL请求。Restful</li><li>采用了松散耦合可插拔组件，比MVC架构更有扩展性和灵活性</li></ol><h4 id="1-2-SpringMVC是什么"><a href="#1-2-SpringMVC是什么" class="headerlink" title="1.2 SpringMVC是什么"></a>1.2 SpringMVC是什么</h4><p>轻量级，基于MVC的web层的应用框架，偏前端而不是业务逻辑层，Spring框架的后续产品</p><h4 id="1-3-SpringMVC能干什么"><a href="#1-3-SpringMVC能干什么" class="headerlink" title="1.3 SpringMVC能干什么"></a>1.3 SpringMVC能干什么</h4><p>支持与Spring框架集成，如：（Ioc,aop）</p><p>支持REST风格</p><p>支持灵活的URL到页面控制器的映射</p><h4 id="1-4-SpringMVC组件"><a href="#1-4-SpringMVC组件" class="headerlink" title="1.4 SpringMVC组件"></a>1.4 SpringMVC组件</h4><p>DispatcherServlet：前端控制器</p><p>Controller : 处理器/页面控制器</p><p>HandlerMapping : 请求映射处理器</p><p>View Resolver : 视图解析器</p><p>LocalResolver : 本地化，国际化</p><p>MultipartResolver : 本地上传解析器</p><p>HandlerExceptionResolver : 异常处理器</p><h4 id="1-5-SpringMVC搭建"><a href="#1-5-SpringMVC搭建" class="headerlink" title="1.5 SpringMVC搭建"></a>1.5 SpringMVC搭建</h4><blockquote><p>1 导入jar包</p><p>2 配置web.xml前端控制器 作用：加载springmvc配置文件，此时的配置文件有默认的位置和名称，默认位置在WEB—INF下，默认名称是<servlet-name>-servlet.xml  例如：springMVC-servlet.xml</p><p>当加载了配置文件，SpringMVC就会根据扫描组件，找到控制层</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3 创建一个pojo,在此类上加上@contriller注解，SpringMVC就会将此类作为控制层加载，让其请求响应</p><p>4 在控制层中，需要在方法上设置@RequestMapping(value=”hello”),springmvc就是通过此注解将请求路径与控制层的方法进行匹配，此时请求路径为localhost:8080/projectName/xxx</p><p>5 处理请求的方法会返回一个字符串（视图名称），通过配置文件中的视图解析器进行页面跳转</p><p>方式：prefix+视图名称+suffix,此为页面跳转路径</p></blockquote><h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h1><h4 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h4><blockquote><p> requestmapping 请求映射处理器，主要功能就是把接收到的url请求，根据相应的映射，转发到另一个url</p></blockquote><h4 id="2-2-标注位置"><a href="#2-2-标注位置" class="headerlink" title="2.2 标注位置"></a>2.2 标注位置</h4><p>@RequestMapping 注解可以在控制器类的级别和/或其中的方法的级别上使用。</p><p><strong>限定类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问时必须访问localhost:8080/projectName/home/test</p><p><strong>限定方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问时必须访问localhost:8080/projectName/test</p><h4 id="2-3-映射请求方式"><a href="#2-3-映射请求方式" class="headerlink" title="2.3 映射请求方式"></a>2.3 映射请求方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>,method=RequestMethod.PUT)  修改操作</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>,method=RequestMethod.GET)  查询操作  </span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>,method=RequestMethod.POST) 添加操作</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>,method=RequestMethod.DELETE) 删除操作</span><br></pre></td></tr></table></figure><h4 id="2-4-映射请求参数"><a href="#2-4-映射请求参数" class="headerlink" title="2.4 映射请求参数"></a>2.4 映射请求参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, params= &#123;<span class="string">"username"</span>,<span class="string">"age!=12"</span>&#125;)</span><br><span class="line">指定有两个参数，一个username，一个age并且age不能等于<span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="2-5-映射请求头"><a href="#2-5-映射请求头" class="headerlink" title="2.5 映射请求头"></a>2.5 映射请求头</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test"</span>, headers= &#123;<span class="string">"Accept-Language=zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-6-支持Ant路径"><a href="#2-6-支持Ant路径" class="headerlink" title="2.6 支持Ant路径"></a>2.6 支持Ant路径</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/*/test"</span>)任意字符匹配</span><br><span class="line">访问路径：http:<span class="comment">//localhost:8080/SpringMVCdemo02/sdsd/test</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/abc?/test"</span>)任意单个字符匹配</span><br><span class="line">访问路径：http:<span class="comment">//localhost:8080/SpringMVCdemo02/abcd/test</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/**/test"</span>)任意多层路径匹配</span><br><span class="line">访问路径：http:<span class="comment">//localhost:8080/SpringMVCdemo02/abcd/sdsd/test</span></span><br></pre></td></tr></table></figure><h4 id="2-7-映射请求占位符"><a href="#2-7-映射请求占位符" class="headerlink" title="2.7 映射请求占位符"></a>2.7 映射请求占位符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/test/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span><span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">System.out.println(id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>{ }的形式进行占位符</p><p>使用@PathVariable(“参数名”)来接收参数</p><p>访问路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;http://localhost:8080/SpringMVCdemo02/test/10010</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h1><h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h4><p>表现层状态转化，是目前最流行的一种互联网软件架构</p><p>简单来说就是put,post,delete,get进行资源的创建，删除，查找，修改</p><h4 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h4><p>首先在web.xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再写四种请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"testREST/1001"</span>&gt;</span>rest<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller响应四种请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testREST/&#123;id&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GET,id="</span>+id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testREST"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"post"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testREST"</span>,method=RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"put"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/testREST"</span>,method=RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"delete"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>流程：首先必须得是post请求，然后设置一个_method此 _method的value为put或者delete,触发请求后，首先web.xml中过滤器首先进行过滤，当看到有 _method时，并且里面有put或者delete，会把post请求转换成相应的put或者post请求，如果不符合条件直接是post请求，如果满足直接就是相对应的方法请求</p></blockquote><h1 id="处理请求数据"><a href="#处理请求数据" class="headerlink" title="处理请求数据"></a>处理请求数据</h1><h4 id="4-1-从客户端获取数据"><a href="#4-1-从客户端获取数据" class="headerlink" title="4.1 从客户端获取数据"></a>4.1 从客户端获取数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String username,String password,String age)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"username="</span>+username);</span><br><span class="line">System.out.println(<span class="string">"password="</span>+password);</span><br><span class="line">System.out.println(<span class="string">"age="</span>+age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在处理请求方法的时候，只需要在方法中加入形参，并且和要传入的参数名保持一致就可以直接接收数据</p></blockquote><h4 id="4-2-参数名称和形参名称不一致"><a href="#4-2-参数名称和形参名称不一致" class="headerlink" title="4.2 参数名称和形参名称不一致"></a>4.2 参数名称和形参名称不一致</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestParam(value=<span class="string">"name"</span>,required=<span class="keyword">false</span>,defaultValue=<span class="string">"111"</span>)</span>String username,String password,String age) </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"username="</span>+username);</span><br><span class="line">System.out.println(<span class="string">"password="</span>+password);</span><br><span class="line">System.out.println(<span class="string">"age="</span>+age);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在处理名称不一致的时候，需要设置@RequestParam(value=”name”）String username进行参数的绑定，就是从前端收到name的值，注解将其绑定在username上，required=true时，此时传递的参数必须得有name这个属性，required=false当为false时，传递的参数的属性值中可以没有name的属性值，defaultVlaue指的是，当这个值null时，会根据defaultvalue的值作为默认值</p></blockquote><h4 id="4-3-处理请求头数据"><a href="#4-3-处理请求头数据" class="headerlink" title="4.3 处理请求头数据"></a>4.3 处理请求头数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@RequestHeader(<span class="string">"Accept-language"</span>)</span>String AcceptLanguage) </span>&#123;</span><br><span class="line">System.out.println(AcceptLanguage);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@RequestHeader(“Accept-language”)是用来获取请求头中的数据</p></blockquote><h4 id="4-4-获取cookies"><a href="#4-4-获取cookies" class="headerlink" title="4.4 获取cookies"></a>4.4 获取cookies</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span>String JSESSIONID) </span>&#123;</span><br><span class="line">System.out.println(JSESSIONID);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过注解@CookieValue(“JSESSIONIS”)来获取cookies</p></blockquote><h4 id="4-5-使用pojo作为参数"><a href="#4-5-使用pojo作为参数" class="headerlink" title="4.5 使用pojo作为参数"></a>4.5 使用pojo作为参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用pojo获取客户端数据，实体类的属性名和表单中的属性值一致，而且支持级联关系</p></blockquote><h4 id="4-6-使用原生servlet获取数据"><a href="#4-6-使用原生servlet获取数据" class="headerlink" title="4.6 使用原生servlet获取数据"></a>4.6 使用原生servlet获取数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">System.out.println(request.getParameter(<span class="string">"username"</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-作用域中放值"><a href="#4-7-作用域中放值" class="headerlink" title="4.7 作用域中放值"></a>4.7 作用域中放值</h4><p>方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">ModelAndView mav=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">mav.addObject(<span class="string">"username"</span>, <span class="string">"root"</span>);</span><br><span class="line">mav.setViewName(<span class="string">"success"</span>);</span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Map&lt;String,Object&gt; map)</span> </span>&#123;</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);<span class="comment">//像作用域中放值</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/param"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"username"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SpringMVC处理数据，保存数据，可以用以上三种方式，不管适应哪种方式，最终都会调用的Model和View封装成一个ModelAndView对象。</p></blockquote><h1 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h1><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><p>不论控制器返回一个String,ModelAndView,View最终都会返回一个modelandview对象，由视图解析器解析试图，进行页面跳转</p><h4 id="5-2-视图类型"><a href="#5-2-视图类型" class="headerlink" title="5.2 视图类型"></a>5.2 视图类型</h4><p>view作用：处理模型数据，重定向/转发视图</p><p>internalResourceView:转发视图</p><p>JstlView:转发视图</p><p>RedirectView:重定向视图</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>6.1 加入jar包</p><p>commons-io-1.4.jar</p><p>6.2 配置springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 文件上传 ,将客户端上传的文件处理为multipartfile文件 ，此bean的id必须是multipartResolver--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 设置文件解析器编码，注意：一定要和页面编码保持一致 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 设置最大上传的文件大小 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"1111111111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.3 前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"hello"</span> <span class="attr">method</span>=<span class="string">"post"</span>  <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  上传文件: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadfile"</span>&gt;</span></span><br><span class="line">  上传描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"description"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">注意：enctype="multipart/form-data</span><br></pre></td></tr></table></figure><p>6.4 控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String description,MultipartFile uploadfile,HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//获得上传的文件的文件名</span></span><br><span class="line">String filename=uploadfile.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获得文件上传的路径</span></span><br><span class="line">String path=request.getSession().getServletContext().getRealPath(<span class="string">"/photo"</span>)+File.separator+filename;</span><br><span class="line">File file=<span class="keyword">new</span> File(path);</span><br><span class="line">uploadfile.transferTo(file);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>SpringMVC的拦截器类似于Servlet的filter过滤器，主要作用是拦截用户的请求做出相应处理。</p><h4 id="2-拦截器类的实现"><a href="#2-拦截器类的实现" class="headerlink" title="2. 拦截器类的实现"></a>2. 拦截器类的实现</h4><ul><li>继承HandlerInterceptorAdapter类</li><li>实现HandlerInterceptor接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorHanddler</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拦截器类中有3个方法</p><p>boolean preHandle()        控制方法执行前，它就开始执行，当返回值为true时，表示放行，当返回值为flase时，表示拦截（即中断后面所有操作）</p><p>void postHandle()        控制方法调用之后执行，视图解析之前执行，就是return 返回ModelAndView后执行，主要作用就是对模型或者视图进行进一步的修改</p><p>void afterCompletion()        该方法在视图解析后执行，类似于finall语句块执行语句，主要进行资源的释放。</p></blockquote><h4 id="3-单个拦截器的配置"><a href="#3-单个拦截器的配置" class="headerlink" title="3. 单个拦截器的配置"></a>3. 单个拦截器的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置拦截器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定拦截器类就可以了--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baidu.Handdler.InterceptorHanddler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-单个拦截器执行流程"><a href="#4-单个拦截器执行流程" class="headerlink" title="4. 单个拦截器执行流程"></a>4. 单个拦截器执行流程</h4><p>用户–&gt;Controller方法执行前，进行preHandle()，返回值为true–&gt;Controller方法–&gt;Controller执行完毕，进行postHandle()执行–&gt;DispatcherServlet向客户端响应–&gt;afterCompletion()</p><h4 id="5-多个拦截器的配置"><a href="#5-多个拦截器的配置" class="headerlink" title="5. 多个拦截器的配置"></a>5. 多个拦截器的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置不包含哪个路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baidu.Handdler.FirstInterceptorHanddler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baidu.Handdler.SecondInterceptorHanddler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-多个拦截器的执行流程"><a href="#6-多个拦截器的执行流程" class="headerlink" title="6. 多个拦截器的执行流程"></a>6. 多个拦截器的执行流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">First: preHandle</span><br><span class="line">Second: preHandle</span><br><span class="line">interceptor已经启用</span><br><span class="line">Second: postHandle</span><br><span class="line">First: postHandle</span><br><span class="line">Second: afterCompletion</span><br><span class="line">First: afterCompletion</span><br></pre></td></tr></table></figure><p>多个拦截器配置时，会按照拦截器的配置顺序进行执行，首先会进行第一个拦截器的preHandle(),当返回值为true时，进行第二个拦截器的preHandle()当返回值为true时，进行第二个拦截器的postHandle，然后进行第一个拦截器的postHandle(),然后进行第二个拦截器的afterCompletion(),最后进行第一个拦截器的afterCompletion</p><h4 id="7-拦截器路径问题"><a href="#7-拦截器路径问题" class="headerlink" title="7. 拦截器路径问题"></a>7. 拦截器路径问题</h4><p><strong>/</strong>  <strong> </strong>的意思是所有文件夹及里面的子文件夹**</p><p>/*是所有文件夹，不含子文件夹</p><p>/是web项目的根目录</p><p><strong>/test 拦截以test结尾的路径</strong></p><p>/*<em>/</em>.html 拦截以.html结尾的</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置异常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 异常默认页面  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 异常指定页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"java.lang.NullPointerException"</span>&gt;</span>nullpoint<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h1><p>用户发送请求到前端控制器，前端控制器请求映射处理器，映射处理器调用相应的Handle处理器，返回给前端控制器一个执行链（包含处理器对象和拦截器），前端控制器会调用适配器处理器，适配器处理器调用相应的处理器返回给前端控制器一个ModelAndView对象，前端控制器调用视图解析器，返回一个具体的View，前端控制器再渲染这个view响应给客户。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringMVC概述&quot;&gt;&lt;a href=&quot;#SpringMVC概述&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC概述&quot;&gt;&lt;/a&gt;SpringMVC概述&lt;/h1&gt;&lt;h4 id=&quot;1-1-SpringMVC概述&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="https://augus-liuzhi.github.io/2020/10/06/SpringBoot/"/>
    <id>https://augus-liuzhi.github.io/2020/10/06/SpringBoot/</id>
    <published>2020-10-06T14:05:43.086Z</published>
    <updated>2020-10-06T14:21:22.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-Spring-Boot入门"><a href="#一-Spring-Boot入门" class="headerlink" title="一 Spring Boot入门"></a>一 Spring Boot入门</h1><h4 id="1-springboot简介"><a href="#1-springboot简介" class="headerlink" title="1 springboot简介"></a>1 springboot简介</h4><p>springboot是为了简化spring开发的一个框架</p><h4 id="2-微服务"><a href="#2-微服务" class="headerlink" title="2 微服务"></a>2 微服务</h4><p>一个应用应该是一组小型服务，可以通过http方式进行沟通</p><p>每一个功能元素最终都是可独立替换和独立升级的软件单元</p><h4 id="3-SpringBoot环境搭建"><a href="#3-SpringBoot环境搭建" class="headerlink" title="3 SpringBoot环境搭建"></a>3 SpringBoot环境搭建</h4><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建springboot启动引导类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot都有一个启动引导类，在启动引导类添加注解<span class="doctag">@SpringBootApplication</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建控制器类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *<span class="doctag">@RestController</span>等价于<span class="doctag">@Controller</span>+<span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,SpringBoot"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><p>浏览器：localhost:8080/hello</p><ol start="5"><li>简化部署</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该插件可以打包应用，直接使用java -jar jar包名就可以执行这个jar包了</p><h4 id="4-Hello-World探究"><a href="#4-Hello-World探究" class="headerlink" title="4 Hello World探究"></a>4 Hello World探究</h4><ol><li>父依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">它的父项目是</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">它是真正的管理SpringBoot应用里面的所有依赖的版本</span><br></pre></td></tr></table></figure><blockquote><p>SpringBoot版本仲裁中心：</p><p>​    以后我们导入的依赖默认不需要写版本（没有在的dependencies里面管理的依赖，需要写版本号）</p></blockquote><ol start="2"><li>启动器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring-boot-starter：SpringBoot场景启动器</p><p>Spring-boot-starter-web：帮我们导入web模块</p></blockquote><ol start="3"><li>主程序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot都有一个启动引导类，在启动引导类添加注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@SpringBootApplication :该注解表明该类是SpringBoot主配置类</p><p>通过运行该类的main()来启动SpringBoot应用</p></blockquote><h4 id="5-Quickstart-Guide"><a href="#5-Quickstart-Guide" class="headerlink" title="5 Quickstart Guide"></a>5 Quickstart Guide</h4><blockquote><p>使用initializr创建SpringBootProject,会自动创建一个springboot项目，只需要关注逻辑</p></blockquote><p>Resources文件夹目录结构</p><ul><li><p>static：保存所有静态资源（js css image）</p></li><li><p>templates：保存所有的模板页面（SpringBoot默认jar包嵌入tomcat,默认不支持jsp页面），可以使用模板引擎（freemaker,thymeleaf）</p></li><li><p>application.properties：SpringBoot应用的配置文件，可以修改一些配置</p></li></ul><h1 id="二-配置文件"><a href="#二-配置文件" class="headerlink" title="二 配置文件"></a>二 配置文件</h1><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的</p><ul><li>application.properties</li><li>application.yml/application.yaml</li></ul><p>==配置文件作用==：修改SpringBoot自动配置的默认值</p><p>YAML(YAML Ain’t a Markup Language)以数据为中心</p><ol><li>YAML 不是一种标记语言</li><li>YAML 仍是一种标记语言</li></ol><p>YAML配置实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>XML:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h4><ol><li>基本语法</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>==冒号后面有空格==</p><ol start="2"><li>值的写法</li></ol><blockquote><p><strong>字面量</strong>：</p><p>​            Key: Value</p><p>​            字符串默认不用加上单引号或双引号</p><p>​            双引号：不会转义里面的特殊字符</p><p>​            name: “zhangsan \n lisi” 输出: zhangsan </p><p>​                                                            lisi</p><p>​            单引号：会转义特殊字符</p><p>​            name: ‘zhangsan \n lisi’ 输出:zhangsan \n lisi</p><p><strong>对象(Map)</strong>：</p><p>​        Key: Value</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;friends:</span></span><br><span class="line"><span class="string">&gt;lastname: zhangsan</span></span><br><span class="line"><span class="string">&gt;age: 20</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;friends:</span> <span class="string">&#123;lastname:</span> <span class="string">zhangsan,age:</span> <span class="number">20</span><span class="string">&#125;</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>数组（List,Set）</strong></p><p>用-（空格）值来表示一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;pets:</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;- cat</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;- dog</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;- pig</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;pets:</span> <span class="string">[cat,dog,pig]</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="配置文件值注入"><a href="#配置文件值注入" class="headerlink" title="配置文件值注入"></a>配置文件值注入</h4><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建要被注入的类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    Boolean boss;</span><br><span class="line">    Map&lt;String,Object&gt; map;</span><br><span class="line">    List&lt;Object&gt; list;</span><br><span class="line">    Dog dog;</span><br><span class="line">……………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Component</code>标注该类成为组件</p><p><code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>标注引入前缀为person的属性值</p><ol start="3"><li>测试类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value属性注入"><a href="#Value属性注入" class="headerlink" title="@Value属性注入"></a>@Value属性注入</h4><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建启动器引导类</li><li>创建java配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//加载外部文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:db.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.driver&#125;"</span>)</span><br><span class="line">    String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.url&#125;"</span>)</span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.username&#125;"</span>)</span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;db.password&#125;"</span>)</span><br><span class="line">    String password;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(driver);</span><br><span class="line">        druidDataSource.setUrl(url);</span><br><span class="line">        druidDataSource.setUsername(username);</span><br><span class="line">        druidDataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span>  druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建处理器类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"DataSource ="</span>+dataSource);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,SpringBoot"</span>+dataSource.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value和-ConfigurationProperties区别"><a href="#Value和-ConfigurationProperties区别" class="headerlink" title="@Value和@ConfigurationProperties区别"></a>@Value和@ConfigurationProperties区别</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个一个绑定</td></tr><tr><td>松散绑定</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂数据类型</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="PropertySource读取指定的配置文件"><a href="#PropertySource读取指定的配置文件" class="headerlink" title="@PropertySource读取指定的配置文件"></a>@PropertySource读取指定的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line">    Boolean boss;</span><br><span class="line">    Map&lt;String,Object&gt; map;</span><br><span class="line">    List&lt;Object&gt; list;</span><br><span class="line">    Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@PropertySource（value=路径）注解用来指定读取指定的配置文件，SpringBoot默认读取的配置文件是固定的（application.properties或者application.yml）通过该注解可以可以来读取其他的名称的配置文件，但是仍然需要和@ConfigurationProperties（prefix=”前缀”）注解来配合使用</p></blockquote><h4 id="ImportResource导入spring配置文件"><a href="#ImportResource导入spring配置文件" class="headerlink" title="@ImportResource导入spring配置文件"></a>@ImportResource导入spring配置文件</h4><blockquote><p>SpringBoot不识别spring的配置文件，当我们写spring的配置文件时候，需要在SpringBoot的主配置类上使用@ImportResource(location=”路径”)来导入我们所需要的spring配置文件，这样我们才可以在springboot中使用spring配置文件</p></blockquote><h4 id="Bean给容器添加组件"><a href="#Bean给容器添加组件" class="headerlink" title="@Bean给容器添加组件"></a>@Bean给容器添加组件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * <span class="meta">@Configuration</span>指明当前类为配置类</span><br><span class="line"> * 在配置文件中庸&lt;bean&gt;&lt;bean/&gt;添加组件</span><br><span class="line"> * 在配置类中用<span class="meta">@Bean</span>添加组件</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"configbean"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringBean <span class="title">getSpringBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h4><ol><li>随机数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.name=root$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.list=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>$&#123;random.uuid&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>占位符</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person.name=root$&#123;random.<span class="keyword">int</span>&#125;</span><br><span class="line">person.map.k1=v1$&#123;person.name&#125;</span><br></pre></td></tr></table></figure><h4 id="Profile多环境支持"><a href="#Profile多环境支持" class="headerlink" title="Profile多环境支持"></a>Profile多环境支持</h4><ol><li>多profile配置文件</li></ol><blockquote><p>配置文件名可以是application-(profile).properties/yml,需要在住配置文件中激活才可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;#激活dev的配置，默认使用application.propreties配置文件内容，激活后使用激活的配置文件的配置</span><br><span class="line">&gt;spring.profiles.active=dev</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol start="2"><li>yml多文档块</li></ol><blockquote><p>yml支持多文档块，用—来区分文档块</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;server:</span></span><br><span class="line"><span class="string">&gt;   port: 8080</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;#激活使用指定的配置pro的配置文件</span></span><br><span class="line"><span class="string">&gt;spring:</span></span><br><span class="line"><span class="string">&gt;   profiles:</span></span><br><span class="line"><span class="string">&gt;      active: pro</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;---</span></span><br><span class="line"><span class="string">&gt;server:</span></span><br><span class="line"><span class="string">&gt;   port: 8081</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;spring:</span></span><br><span class="line"><span class="string">&gt;   profiles: dev</span></span><br><span class="line"><span class="string">&gt;---</span></span><br><span class="line"><span class="string">&gt;server:</span></span><br><span class="line"><span class="string">&gt;   port: 8083</span></span><br><span class="line"><span class="string">&gt;spring:</span></span><br><span class="line"><span class="string">&gt;   profiles: pro</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="配置文件加载位置优先级"><a href="#配置文件加载位置优先级" class="headerlink" title="配置文件加载位置优先级"></a>配置文件加载位置优先级</h4><p>优先级由高到低，高优先级会覆盖低优先级的配置，配置内容不同，SpringBoot会互补配置</p><p>conf文件，根目录，类路径conf文件，类路径根目录</p><h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><ol><li><p>springboot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line">利用selector给容器导入一些组件</span><br><span class="line">组件：将类路径下的META-INF/spring.factories里面的配置所有的EnableAutoConfiguration的值加入到了容器</span><br><span class="line">每一个xxxAutoConfiguration都是容器的一个组件，都加入到容器中，用他们来自动配置，每一个自动配置类进行相应的自动配置功能</span><br></pre></td></tr></table></figure></li></ol><p>精髓：</p><ol><li>SpringBoot启动会加载大量的自动配置类</li><li>我们看我们需要的功能有没有springboot默认写好配置类</li><li>再看自动配置类中到底配置哪些组件（只有有我们要用组件有，我们就不需要配置了）</li><li>给容器自动配置类添加组件的时候，会从properties类中获取属性，我们可以在配置文件中指定这些属性的值</li></ol><p>细节：</p><ol><li>@Conditional 作用：指定条件成立，才给容器添加组件，配置类里面的内容才生效</li><li>扩展注解</li></ol><blockquote><p>1.class条件注解</p><p><strong>@ConditionalOnClass</strong>：某个class位于类路径上，才会实例化一个Bean。</p><p><strong>@ConditionalOnMissingClass</strong>：某个class类路径上不存在的时候，才会实例化一个Bean。</p><p>2.Bean条件注解</p><p><strong>@ConditionalOnBean</strong>：当容器中有指定Bean的条件下进行实例化。</p><p><strong>@ConditionalOnMissingBean</strong>：当容器里没有指定Bean的条件下进行实例化。</p><p>3.属性条件注解</p><p><strong>@ConditionalOnProperty</strong>：当指定的属性有指定的值时进行实例化。</p><p>4.Resource条件注解</p><p><strong>@ConditionalOnResource</strong>：当类路径下有指定的资源时触发实例化。</p><p>5.web条件注解</p><p><strong>@ConditionalOnNotWebApplication</strong>：不是web应用，才会实例化一个Bean。</p><p><strong>@ConditionalOnWebApplication</strong>：当项目是一个Web项目时进行实例化。<br>     6.表达式条件注解</p><p><strong>@ConditionalOnExpression</strong>：基于SpEL表达式的条件判断，当表达式为true的时候，才会实例化一个Bean。</p><p><strong>@ConditionalOnJava</strong>：当JVM版本为指定的版本范围时触发实例化。<br>      <strong>@ConditionalOnJndi</strong>：在JNDI存在的条件下触发实例化。<br>      <strong>@ConditionalOnSingleCandidate</strong>：当指定的Bean在容器中只有一个，或者有多个但是指定了首选的Bean时触发实例化。</p></blockquote><ol start="3"><li>自动配置报告</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>在主配置文件中开启springboot的debug,使用该代码启用，生效后运行springboot应用会在控制台打印自动配置报告</p><h1 id="三-日志"><a href="#三-日志" class="headerlink" title="三 日志"></a>三 日志</h1><h4 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h4><p>==SpringBoot选用：SLF4j+logback==</p><h4 id="SlF4j使用"><a href="#SlF4j使用" class="headerlink" title="SlF4j使用"></a>SlF4j使用</h4><h4 id="SpringBoot属性注入"><a href="#SpringBoot属性注入" class="headerlink" title="SpringBoot属性注入"></a>SpringBoot属性注入</h4><p><strong>类上使用@ConfigurationProperties</strong></p><p>实现SpringBoot配置文件读取和应用</p><p>步骤：</p><ol><li>创建配置项类jdbcProperties,在该类上使用注解@ConfigurationProperties</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConfigurationProperties从application配置文件中读取配置项</span></span><br><span class="line"><span class="comment"> * prefix表示前缀</span></span><br><span class="line"><span class="comment"> * 配置类的变量名必须要与前缀之后的配置项名保持相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"db"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcProperties</span> </span>&#123;</span><br><span class="line">    String diverClassName;</span><br><span class="line">    String url;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDiverClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> diverClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDiverClassName</span><span class="params">(String diverClassName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.diverClassName = diverClassName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将db.properties修改为application.properties</li><li>将jdbcProperties对象注入到jdbcConfig中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(jdbcProperties.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">(jdbcProperties db)</span></span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(db.getDiver());</span><br><span class="line">        druidDataSource.setUrl(db.getUrl());</span><br><span class="line">        druidDataSource.setUsername(db.getUsername());</span><br><span class="line">        druidDataSource.setPassword(db.getPassword());</span><br><span class="line">        <span class="keyword">return</span>  druidDataSource;&#125;</span><br></pre></td></tr></table></figure><p><strong>方法上使用@ConfigurationProperties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdbcConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"db"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此方法采用自动注入，需要将后缀和配置类变量名保持一致</p></blockquote><h4 id="多个yml文件配置"><a href="#多个yml文件配置" class="headerlink" title="多个yml文件配置"></a>多个yml文件配置</h4><p>配置文件可以使用application.properties以外，还可以使用application.yml或者application.yaml</p><p>yaml与properties配置文件除了展示形式不相同以外，其他功能和作用都是一样的，在项目中原路读取方式不需要改变</p><p>yml配置文件特征</p><ol><li>树状层级结构展示配置项</li><li>配置项之间如果有关系的话需要分行空两格</li><li>配置项如果有值，需要在：之后空一格再写配置值</li></ol><p>将application.properties修改为为application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">db:</span></span><br><span class="line"><span class="attr">  driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">  url:</span> <span class="attr">jdbc:mysql://localhost:3306/lyb?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>2）多个yml配置文件，在SpringBoot中是被允许的，这些配置文件的名称必须为application-***.yml,并且这些配置文件必须在总的application.yml配置文件激活才可以使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#激活配置文件，需要指定其他配置文件的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">另一个配置文件的-后面的名字</span></span><br></pre></td></tr></table></figure><p>3）如果properties和yml配置文件同时存在springboot项目中，那么这两类配置文件都有效。在两个配置文件中存在同名的配置项会以properties为主</p><h4 id="自动配置原理-1"><a href="#自动配置原理-1" class="headerlink" title="自动配置原理"></a>自动配置原理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-Spring-Boot入门&quot;&gt;&lt;a href=&quot;#一-Spring-Boot入门&quot; class=&quot;headerlink&quot; title=&quot;一 Spring Boot入门&quot;&gt;&lt;/a&gt;一 Spring Boot入门&lt;/h1&gt;&lt;h4 id=&quot;1-springboot简
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring</title>
    <link href="https://augus-liuzhi.github.io/2020/10/06/Spring/"/>
    <id>https://augus-liuzhi.github.io/2020/10/06/Spring/</id>
    <published>2020-10-06T14:05:43.071Z</published>
    <updated>2020-10-06T14:20:52.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1 Spring概述"></a>1 Spring概述</h1><h4 id="1-1-Spring是什么？"><a href="#1-1-Spring是什么？" class="headerlink" title="1.1 Spring是什么？"></a>1.1 Spring是什么？</h4><p>Spring框架是针对bean的生命周期进行管理的轻量级容器（lightweight container）以ioc（控制反转）和aop（面向切片编程）为内核。</p><h4 id="1-2-Spring的优势"><a href="#1-2-Spring的优势" class="headerlink" title="1.2 Spring的优势"></a>1.2 Spring的优势</h4><p>方便解耦，简化开发</p><p>AOP编程</p><p>声明事务支持</p><p>方便程序的测试</p><p>方便集成各种优秀框架</p><p>降低JavaEE  API的使用难度</p><p>java源代码经典学习示范</p><h4 id="1-3-Spring体系结构"><a href="#1-3-Spring体系结构" class="headerlink" title="1.3 Spring体系结构"></a>1.3 Spring体系结构</h4><p>Spring框架主要由七部分组成，分别是 Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、Spring Context、 Spring Web和 Spring Web MVC。</p><p><img src="http://c.biancheng.net/uploads/allimg/190606/5-1Z606104H1294.gif" alt=""></p><h1 id="2-spring的第一个核心功能"><a href="#2-spring的第一个核心功能" class="headerlink" title="2 spring的第一个核心功能"></a>2 spring的第一个核心功能</h1><p><strong>控制反转（IoC）</strong>：把对象的创建，赋值，管理工作都交给的容器处理，也就是对象的创建由Ioc容器完成。</p><p><strong>控制</strong>：创建对象，对象属性的赋值，对象之间的关系管理。</p><p><strong>反转</strong>：把原来的开发人员创建对象的控制权，转交给Ioc容器来控制</p><p><strong>正转</strong>：有开发人员通过new 构造方法创建对象，并由开发人员主动控制对象。</p><p><strong>Ioc目的(作用)</strong>：减少对代码的改动，也能实现不同的功能，<strong>实现解耦合</strong>。</p><p><strong>Ioc的技术实现</strong></p><blockquote><p>​    DI是Ioc的技术实现</p><p>​    DI：依赖注入，只需要提供对象的名称就可以了，至于对象的创建，查找，赋值都是由容器内部实现的</p></blockquote><p><strong>Spring Ioc实现</strong></p><blockquote><p>   Spring使用DI实现了Ioc的功能，spring底层的创建对象，采用了反射机制。</p></blockquote><h1 id="3-一般属性注入"><a href="#3-一般属性注入" class="headerlink" title="3 一般属性注入"></a>3 一般属性注入</h1><h4 id="Setter-based-依赖注入"><a href="#Setter-based-依赖注入" class="headerlink" title="Setter-based 依赖注入"></a>Setter-based 依赖注入</h4><ol><li>实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>id  : bean的唯一标识，通过getBean（）获取对像的时候，通过bean的id来指定具体要获取哪个bean的对象</p><p>class ：指定你要创建哪个类bean</p><property name="属性名" value="属性值"></property><p>注意：该方法主要是通过实体类的setXXX方法实现的，因此实体类必须得有set方法，还要注意属性的命名规范，以免造成找不到该set方法</p></blockquote><h4 id="Constructor-based-依赖注入"><a href="#Constructor-based-依赖注入" class="headerlink" title="Constructor-based 依赖注入"></a>Constructor-based 依赖注入</h4><ol><li>实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建bean</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>构造方法重载</p><p>3.1 相同个数参数</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"123456"</span> <span class="attr">type</span>=<span class="string">"String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"22"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">或者</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"123456"</span> <span class="attr">type</span>=<span class="string">"String"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"root"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2"</span>  <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"int"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过type来指定该位置的参数类型</p><p>index主要来指定参数的顺序</p></blockquote><p>3.2 不同参数个数</p><p>不同参数个数构造方法，会自动匹配</p><h1 id="4-特殊属性注入"><a href="#4-特殊属性注入" class="headerlink" title="4 特殊属性注入"></a>4 特殊属性注入</h1><h4 id="4-1-对象注入"><a href="#4-1-对象注入" class="headerlink" title="4.1 对象注入"></a>4.1 对象注入</h4><p>4.1.1 内部bean方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tusername"</span> <span class="attr">value</span>=<span class="string">"laoshi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.1.2 ref引用bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tusername"</span> <span class="attr">value</span>=<span class="string">"laoshi"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：内部bean只能通过先访问外部bean然后才能再次访问内部bean，外部bean可以单独使用</span><br></pre></td></tr></table></figure><h4 id="4-2-数组注入"><a href="#4-2-数组注入" class="headerlink" title="4.2 数组注入"></a>4.2 数组注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobby"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>play<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>games<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-List注入"><a href="#4-3-List注入" class="headerlink" title="4.3 List注入"></a>4.3 List注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-4-Map注入"><a href="#4-4-Map注入" class="headerlink" title="4.4 Map注入"></a>4.4 Map注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key1"</span> <span class="attr">value</span>=<span class="string">"result1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key2"</span> <span class="attr">value</span>=<span class="string">"result2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-5-Set注入"><a href="#4-5-Set注入" class="headerlink" title="4.5 Set注入"></a>4.5 Set注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>set1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>set2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-6-Properties注入"><a href="#4-6-Properties注入" class="headerlink" title="4.6 Properties注入"></a>4.6 Properties注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pkey1"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pkey2"</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-7-实体类"><a href="#4-7-实体类" class="headerlink" title="4.7 实体类"></a>4.7 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String[] hobby;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.set = set;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getHobby() &#123;</span><br><span class="line"><span class="keyword">return</span> hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, String password, <span class="keyword">int</span> age, Teacher teacher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", age="</span> + age + <span class="string">", teacher="</span> + teacher</span><br><span class="line">+ <span class="string">", hobby="</span> + Arrays.toString(hobby) + <span class="string">", list="</span> + list + <span class="string">", map="</span> + map + <span class="string">", set="</span> + set</span><br><span class="line">+ <span class="string">", properties="</span> + properties + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-FactoryBean注入"><a href="#5-FactoryBean注入" class="headerlink" title="5 FactoryBean注入"></a>5 FactoryBean注入</h1><h4 id="5-1-applicationContext-xml"><a href="#5-1-applicationContext-xml" class="headerlink" title="5.1 applicationContext.xml"></a>5.1 applicationContext.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Myfactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-实体类"><a href="#5-2-实体类" class="headerlink" title="5.2 实体类"></a>5.2 实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String bround;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBround</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bround;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBround</span><span class="params">(String bround)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bround = bround;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Car [bround="</span> + bround + <span class="string">", price="</span> + price + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-Factory类"><a href="#5-3-Factory类" class="headerlink" title="5.3 Factory类"></a>5.3 Factory类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myfactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Car car=<span class="keyword">new</span> Car();</span><br><span class="line">car.setBround(<span class="string">"OOOO"</span>);</span><br><span class="line">car.setPrice(<span class="number">50.0</span>);</span><br><span class="line"><span class="keyword">return</span> car;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> Car.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-测试类"><a href="#5-4-测试类" class="headerlink" title="5.4 测试类"></a>5.4 测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1 初始化容器</span></span><br><span class="line">ApplicationContext applicationContext=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//2 通过getBean获取对象</span></span><br><span class="line">Object object = applicationContext.getBean(<span class="string">"factory"</span>);</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-5-测试结果"><a href="#5-5-测试结果" class="headerlink" title="5.5 测试结果"></a>5.5 测试结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Car [bround=OOOO, price=<span class="number">50.0</span>]</span><br></pre></td></tr></table></figure><h1 id="6-Bean的作用域"><a href="#6-Bean的作用域" class="headerlink" title="6 Bean的作用域"></a>6 Bean的作用域</h1><h4 id="6-1-singleton（单例模式）"><a href="#6-1-singleton（单例模式）" class="headerlink" title="6.1 singleton（单例模式）"></a>6.1 singleton（单例模式）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>scope来指定作用域</p><p>singleton作为单例模式</p><p>单例模式下，只会创建一次对象，且在容器初始化的时候就已经执行了</p></blockquote><h4 id="6-2-prototype（原型模式）"><a href="#6-2-prototype（原型模式）" class="headerlink" title="6.2 prototype（原型模式）"></a>6.2 prototype（原型模式）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>prototype作为原型模式</p><p>原型模式下，每次创建对象都是不同的</p></blockquote><h4 id="6-3-request"><a href="#6-3-request" class="headerlink" title="6.3 request"></a>6.3 request</h4><p>在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该bean仅在当前Http Request内有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>针对每一次Http请求，Spring容器根据该bean的定义创建一个全新的实例，且该实例仅在当前Http请求内有效，而其它请求无法看到当前请求中状态的变化，当当前Http请求结束，该bean实例也将会被销毁。</p><h4 id="6-4-session"><a href="#6-4-session" class="headerlink" title="6.4 session"></a>6.4 session</h4><p>在一次Http Session中，容器会返回该Bean的同一实例。而对不同的Session请求则会创建新的实例，该bean实例仅在当前Session内有效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span>  <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Person"</span> <span class="attr">scope</span>=<span class="string">"session"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>同Http请求相同，每一次session请求创建新的实例，而不同的实例之间不共享属性，且实例仅在自己的session请求内有效，请求结束，则实例将被销毁。</p><h1 id="7-Bean的生命周期"><a href="#7-Bean的生命周期" class="headerlink" title="7 Bean的生命周期"></a>7 Bean的生命周期</h1><h4 id="7-1-bean的生命周期"><a href="#7-1-bean的生命周期" class="headerlink" title="7.1 bean的生命周期"></a>7.1 bean的生命周期</h4><ol><li>实例化Bean对象</li><li>依赖注入</li><li>初始化</li><li>使用</li><li>容器关闭时，销毁</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"life"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.life"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>init-method 用来指定初始化方法</p><p>destroy-method用来指定销毁方法</p><p>注意：只有当容器关闭是，才会调用销毁方法</p></blockquote><h4 id="7-2-bean的后置处理器"><a href="#7-2-bean的后置处理器" class="headerlink" title="7.2 bean的后置处理器"></a>7.2 bean的后置处理器</h4><p>后置处理器加在初始化前后进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterHanddler</span>  <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object arg0, String arg1)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="comment">//初始化之后的操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object arg0, String arg1)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化之前的操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.AfterHanddler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">在xml文件中能够直接引用就行了</span><br></pre></td></tr></table></figure><h1 id="8-自动装配"><a href="#8-自动装配" class="headerlink" title="8 自动装配"></a>8 自动装配</h1><p>手动装配：以valu或者ref的方式明确指定属性值都是手动装配手段</p><p>自动装配：根据指定的装配规则，不需要明确指定，spring自动匹配的属性值注入bean中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">手动装配：</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Emp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span>  <span class="attr">ref</span>=<span class="string">"car"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dept"</span> <span class="attr">ref</span>=<span class="string">"dept"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">value</span>=<span class="string">"666"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">value</span>=<span class="string">"cccc"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Dept"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"did"</span> <span class="attr">value</span>=<span class="string">"11111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">value</span>=<span class="string">"dpart"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">自动装配：</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">value</span>=<span class="string">"666"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">value</span>=<span class="string">"cccc"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Dept"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"did"</span> <span class="attr">value</span>=<span class="string">"11111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">value</span>=<span class="string">"dpart"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">保持bean id和属性名一致，采用byName就可以了</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Car"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">value</span>=<span class="string">"666"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cname"</span> <span class="attr">value</span>=<span class="string">"cccc"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dept1"</span> <span class="attr">class</span>=<span class="string">"com.baidu.Dao.Dept"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"did"</span> <span class="attr">value</span>=<span class="string">"11111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">value</span>=<span class="string">"dpart"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">当属性名和id不一致时，采用byType就行了</span><br></pre></td></tr></table></figure><blockquote><p>autowire 根据某种策略自动装配</p></blockquote><h1 id="9-注解"><a href="#9-注解" class="headerlink" title="9 注解"></a>9 注解</h1><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><strong>@Configuration</strong></td><td>指定该类为Spring配置类</td></tr><tr><td><strong>@ComponentScan</strong></td><td>启用组件扫描，同xml中配置<a href="context:component-scan">context:component-scan</a></td></tr><tr><td><strong>@Controller</strong></td><td>控制层Bean</td></tr><tr><td><strong>@Service</strong></td><td>业务层Bean</td></tr><tr><td><strong>@ Repository</strong></td><td>Dao层Bean</td></tr><tr><td><strong>@Component</strong></td><td>实例化Bean</td></tr><tr><td><strong>@Bean</strong></td><td>返回一个对象</td></tr><tr><td><strong>@Autowired</strong></td><td>自动装配Bean</td></tr><tr><td><strong>@Qualifier(“id”)</strong></td><td>根据Id装配</td></tr><tr><td><strong>@Resource</strong></td><td>相当于<strong>@Autowired</strong>+<strong>@Qualifier(“id”)</strong>根据id装配</td></tr><tr><td><strong>@Import</strong></td><td>导入其他配置类</td></tr><tr><td><strong>@Conditional</strong></td><td>放在类上，当满足条件时，这个类中配置的所有bean注册才能生效，放在方法上，当满足条件时，才向容器中注册当前bean</td></tr><tr><td><strong>@Profile</strong></td><td>前环境，动态的激活和切换一系列组件的功能；指定组件在哪个环境的情况下才能被注册到容器中，不指定，任何环境下都能注册这个组件，加了环境标识的bean，只有这个环境被激活的时候才能注册到容器中</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"root"</span>)</span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"123456"</span>)</span><br><span class="line">    String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"20"</span>)</span><br><span class="line">    Integer age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Teacher teacher;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", teacher="</span> + teacher +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line">    String Username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"老师"</span>)</span><br><span class="line">    String Job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"Username="</span> + Username +</span><br><span class="line">                <span class="string">", Job='"</span> + Job + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        Person person = (Person) ac.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-AOP"><a href="#10-AOP" class="headerlink" title="10 AOP"></a>10 AOP</h1><p>什么是AOP</p><p>AOP为Aspect Oriented Progranmming的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术  </p><p>aop的作用及优势</p><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p><p>优势：减少重复的代码，提高开发效率，并且便于维护</p><p>aop底层实现</p><p>动态代理技术</p><p>aop的动态代理技术</p><p>JDK动态代理：基于接口的动态的代理技术</p><p>cglib动态代理：基于父类的动态代理技术</p><h4 id="基于XML的AOP开发"><a href="#基于XML的AOP开发" class="headerlink" title="基于XML的AOP开发"></a>基于XML的AOP开发</h4><p>开发步骤：</p><ol><li>导入坐标（spring-context,aspectjweaver）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建目标类以及目标接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Save Running……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建切面类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"抛出异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前增强"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"还绕后增加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>切面类和目标类交给Spring容器</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">class</span>=<span class="string">"com.ccut.aop.Target"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--切面类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect"</span> <span class="attr">class</span>=<span class="string">"com.ccut.aop.MyAspect"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>配置织入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--声明切面=切点+通知--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect"</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--切点表达式，指定被增强的方法--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"mypointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(public  void com.ccut.aop.Target.save())"</span>/&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--前置增强--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span> /&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--最终增强--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--后置增强--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--抛出异常--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--环绕增强--&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"mypointcut"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置织入需要先导入aop命名空间</strong></p><h4 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a><strong>基于注解的AOP开发</strong></h4><ol><li>导入坐标</li><li>配置自动代理和扫描包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ccut.aop"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建切面类和目标类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"target"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Save Running……"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"抛出异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前增强"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"还绕后增加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终增强"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*定义切点*/</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public  void com.ccut.aop.Target.save())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-Spring-jdbcTemplate"><a href="#11-Spring-jdbcTemplate" class="headerlink" title="11 Spring jdbcTemplate"></a>11 Spring jdbcTemplate</h1><p>JdbcTemplate开发步骤</p><ol><li>导入spring-jdbc和Spring-tx</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建数据库表和实体</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建数据库和实体类相对应</span><br></pre></td></tr></table></figure><ol start="3"><li>创建JdbcTemplate对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"druid"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druid"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.username&#125;"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.password&#125;"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.url&#125;"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;db.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>执行数据库操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row=jdbcTemplate.update(<span class="string">"INSERT INTO testmybatis(NAME,age,address,cid) VALUE(?,?,?,?)"</span>,<span class="string">"liuzhi"</span>,<span class="number">22</span>,<span class="string">"shandong"</span>,<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"UPDATE testmybatis SET age=? WHERE id=?"</span>,<span class="number">20</span>,<span class="number">17</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"DELETE FROM testmybatis WHERE id=?"</span>,<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list=jdbcTemplate.query(<span class="string">"select * from testmybatis"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = jdbcTemplate.queryForObject(<span class="string">"select * from testmybatis where id=?"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), <span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = jdbcTemplate.queryForObject(<span class="string">"SELECT COUNT(*) FROM testmybatis"</span>,<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-Spring事务"><a href="#12-Spring事务" class="headerlink" title="12 Spring事务"></a>12 Spring事务</h1><h4 id="Spring支持的事务类型"><a href="#Spring支持的事务类型" class="headerlink" title="Spring支持的事务类型"></a>Spring支持的事务类型</h4><ul><li>编程式事务</li><li>声明式事务</li></ul><h4 id="Spring实现事务的方式和原理"><a href="#Spring实现事务的方式和原理" class="headerlink" title="Spring实现事务的方式和原理"></a>Spring实现事务的方式和原理</h4><p>spring实现事务实质是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务，真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的</p><h4 id="Spring事务隔离级别"><a href="#Spring事务隔离级别" class="headerlink" title="Spring事务隔离级别"></a>Spring事务隔离级别</h4><ul><li>默认</li><li>未提交读</li><li>提交读</li><li>可重复读</li><li>序列化</li></ul><p>事务问题</p><p>脏读：读取另一个未提交的事务</p><p>不可重复读：同一个事务，多次读取同一个数据</p><p>幻读：同一个事务多次查询返回的结果集不一样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Spring概述&quot;&gt;&lt;a href=&quot;#1-Spring概述&quot; class=&quot;headerlink&quot; title=&quot;1 Spring概述&quot;&gt;&lt;/a&gt;1 Spring概述&lt;/h1&gt;&lt;h4 id=&quot;1-1-Spring是什么？&quot;&gt;&lt;a href=&quot;#1-1-Spr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="https://augus-liuzhi.github.io/2020/10/06/mybatis/"/>
    <id>https://augus-liuzhi.github.io/2020/10/06/mybatis/</id>
    <published>2020-10-06T14:05:43.062Z</published>
    <updated>2020-10-06T14:20:15.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h4 id="Mybatis概念"><a href="#Mybatis概念" class="headerlink" title="Mybatis概念"></a>Mybatis概念</h4><p>MyBatis 是一款优秀的持久层框架，一个半 ORM（对象关系映射）框架，它支持定制化 SQL、存储过程以及高级映射。</p><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>ORM：对象关系映射，它是一种思想，主要是指数据库中每行数据用对象表示</p><h4 id="Mybatis是半自动ORM映射工具，与全自动的区别"><a href="#Mybatis是半自动ORM映射工具，与全自动的区别" class="headerlink" title="Mybatis是半自动ORM映射工具，与全自动的区别"></a>Mybatis是半自动ORM映射工具，与全自动的区别</h4><p>Hibernate属于全自动ORM映射工具，进行级联查询时，根据对象模型可以直接获取。</p><p>Mybatis属于半自动ORM映射工具，进行级联查询，要手动写sql来完成。</p><h4 id="JDBC存在的问题"><a href="#JDBC存在的问题" class="headerlink" title="JDBC存在的问题"></a>JDBC存在的问题</h4><p><strong>问题：大量代码冗余</strong></p><ol><li><p>数据库连接</p><p>​    数据库链接创建，释放频繁造成资源浪费</p><p>​    解决：mybatis-config.xml文件配置数据库连接池，使用数连接池管理数据库连接。</p></li><li><p>Sql语句</p><p>​    sql语句和java代码高耦合</p><pre><code>解决：mybatis把sql语句配置在Mapper文件中与java代码分离</code></pre></li><li><p>结果集</p><p>​    传统jdbc需要遍历，手动封装对象</p><p>​    解决：mybatis自动映射成对象</p></li></ol><h4 id="Mybatis优缺点"><a href="#Mybatis优缺点" class="headerlink" title="Mybatis优缺点"></a>Mybatis优缺点</h4><p>优点：</p><ol><li><p>简化代码，提高效率</p><ol start="2"><li>sql放在配置文件，提高可维护性</li><li>自带连接池功能</li><li>自带缓存（提高查询效率）</li></ol></li></ol><p>缺点：</p><pre><code>1. 当字段多时，查询多表时，sql语句编写量过大 2. sql语句依赖数据库，可移植性差</code></pre><h4 id="Hibernate和mybatis区别"><a href="#Hibernate和mybatis区别" class="headerlink" title="Hibernate和mybatis区别"></a>Hibernate和mybatis区别</h4><ul><li><p>Sql优化和移植性</p><ol><li><p>Mybatis需要手动编写sql语句，移植性较差，可优化行好</p></li><li><p>hibernate封装了sql语句，移植性比较好，但是可优化性差</p></li></ol></li><li><p>映射关系</p><ol><li>mybatis半自动orm框架，配置对象和结果集关系映射</li><li>Hibernate全自动orm框架，配置对象和数据表的对应关系</li></ol></li></ul><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ol><li><h6 id="导入jar-lib-mybatis-3-5-2-jar"><a href="#导入jar-lib-mybatis-3-5-2-jar" class="headerlink" title="导入jar(lib+mybatis-3.5.2.jar)"></a>导入jar(lib+mybatis-3.5.2.jar)</h6></li></ol><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\1590703211981.png" alt="1590703211981"></p><ol start="2"><li><h6 id="引入配置文件"><a href="#引入配置文件" class="headerlink" title="引入配置文件"></a>引入配置文件</h6></li></ol><p>mybatis-config.xml</p><ol><li>​    driverClassNme</li><li>​    url</li><li>​    username</li><li>​    password</li><li>​    连接池（pooled）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选取要使用哪个环境配置 ，选取enviroment id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给环境配置一个名称，名称随意 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事物控制，类型是采用jdbc方式手动控制事物 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动名，url,用户名，密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"数据库驱动器名（com.mysql.cj.jdbc.Driver）"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/（数据库名）?serverTimezone=UTC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"数据库用户名"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"数据库密码"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"实现类的xml文件的路径"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xxxMapper.xml(相当于dao的实现类)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.baidu.demo.PersonDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"抽象类中insert方法"</span> <span class="attr">parameterType</span>=<span class="string">"有参方法的参数类型"</span>&gt;</span></span><br><span class="line">insert into messages value(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;sex&#125;,#&#123;address&#125;,#&#123;hobby&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"抽象类中select方法"</span> <span class="attr">parameterType</span>=<span class="string">"有参方法的参数类型"</span>  <span class="attr">resultType</span>=<span class="string">"返回值参数类型"</span> &gt;</span></span><br><span class="line">select * from messages where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"抽象类中delete方法"</span> <span class="attr">parameterType</span>=<span class="string">"有参方法的参数类型"</span>&gt;</span></span><br><span class="line">delete from messages where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"抽象类中update方法"</span> <span class="attr">parameterType</span>=<span class="string">"有参方法的参数类型"</span>&gt;</span></span><br><span class="line">写update的sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mybatis常用API"><a href="#Mybatis常用API" class="headerlink" title="Mybatis常用API"></a>Mybatis常用API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">目的：使用Dao</span><br><span class="line">获得Dao对象</span><br><span class="line">使用Dao方法</span><br><span class="line">常用的类：</span><br><span class="line">SqlSession </span><br><span class="line"><span class="number">1</span>. 获得Dao对象</span><br><span class="line">XXXDao  dao=SqlSession.getMapper(接口.class)</span><br><span class="line">    <span class="number">2</span>. 相当于Connection 对象，提交事务，事物回滚，关闭资源</span><br><span class="line">SqlSeesionFactory</span><br><span class="line"><span class="number">1</span>. 获得sqlSession</span><br><span class="line">SqlSession sqlsession=sqlSessionFactory.opensession()</span><br><span class="line"><span class="number">2</span>. 保存封装mybatis-config.xml</span><br><span class="line">SqlSeesionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSeesionFactoryBulider().build(is)</span><br><span class="line">SqlSeesionFactoryBulider():读取配置文件</span><br><span class="line">Resources:获得读取配置文件的输入流</span><br><span class="line">InputStream is=Resources.</span><br></pre></td></tr></table></figure><h4 id="Mybatis编程步骤"><a href="#Mybatis编程步骤" class="headerlink" title="Mybatis编程步骤"></a>Mybatis编程步骤</h4><ol><li>获得mybatis-config.xml的输入流</li><li>读取mybatis-config.xml配置文件，构造SqlSessionFactory对象</li><li>通过构造SqlSessionFactory对象，调用opensession(),获得Sqlsession</li><li>通过SqlSession对象获得Dao接口对象</li><li>调用方法匹配</li><li>提交事务</li><li>释放资源</li></ol><h4 id="Mybatis编程示例"><a href="#Mybatis编程示例" class="headerlink" title="Mybatis编程示例"></a>Mybatis编程示例</h4><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Person person)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">select</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Person person)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">String username;</span><br><span class="line">String password;</span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line">String address;</span><br><span class="line">String hobby;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id, String username, String password, <span class="keyword">int</span> sex, String address, String hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String username, String password, <span class="keyword">int</span> sex, String address, String hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line"><span class="keyword">this</span>.address = address;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", sex="</span> + sex + <span class="string">", address="</span></span><br><span class="line">+ address + <span class="string">", hobby="</span> + hobby + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is=Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">PersonDao personDao=sqlSession.getMapper(PersonDao.class);</span><br><span class="line">Person person=<span class="keyword">new</span> Person(<span class="string">"zhong"</span>, <span class="string">"250"</span>, <span class="number">1</span>, <span class="string">"jinan"</span>, <span class="string">"play"</span>);</span><br><span class="line">personDao.insert(person);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is=Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">PersonDao personDao=sqlSession.getMapper(PersonDao.class);</span><br><span class="line">Person person=personDao.select(<span class="number">2</span>);</span><br><span class="line">System.out.println(person.toString());</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is=Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">PersonDao personDao=sqlSession.getMapper(PersonDao.class);</span><br><span class="line">personDao.delete(<span class="number">1</span>);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is=Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">PersonDao personDao=sqlSession.getMapper(PersonDao.class);</span><br><span class="line">Person person=<span class="keyword">new</span> Person(<span class="number">2</span>, <span class="string">"小二"</span>, <span class="string">"123456"</span>, <span class="number">1</span>, <span class="string">"jinan"</span>, <span class="string">"play"</span>);</span><br><span class="line">personDao.update(person);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Myabtis的执行器有哪些，以及他们的区别"><a href="#Myabtis的执行器有哪些，以及他们的区别" class="headerlink" title="Myabtis的执行器有哪些，以及他们的区别"></a>Myabtis的执行器有哪些，以及他们的区别</h4><ol><li>simpleExcutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。就是<strong>单次使用statement对象</strong>.</li><li>reuserExcutor : 执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，<strong>就是重复使用Statement对象。</strong></li><li>bathExcutor : 执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了<strong>多个Statement对象</strong>，<strong>每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理</strong>。与JDBC批处理相同。</li><li>执行器的设置方式有两种A:在配置文件中通过setting设置B:在构建sqlsession对象时，通过opensession(执行器)指定执行器类型</li></ol><h4 id="Mybatis是否支持延迟加载？"><a href="#Mybatis是否支持延迟加载？" class="headerlink" title="Mybatis是否支持延迟加载？"></a>Mybatis是否支持延迟加载？</h4><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>作用：映射查询结果的列封装成实体的属性</p><p>要求：查询结果的列明必须和实体属性名一致</p></blockquote><h4 id="表名和实体属性名不一致"><a href="#表名和实体属性名不一致" class="headerlink" title="表名和实体属性名不一致"></a>表名和实体属性名不一致</h4><blockquote><p>通过sql别名的关键字，把sql语句和属性名保持一致</p></blockquote><h4 id="查询多个"><a href="#查询多个" class="headerlink" title="查询多个"></a>查询多个</h4><p>只需要知道每一行数据的封装的类型，mybatis会自动把多个数据封装成一个list</p><p>1.书写Dao接口</p><p>2.书写Mapper文件</p><p>3.注册Mapper文件</p><p>参数绑定</p><p>单个参数</p><p>在mapper文件中直接指定parameterType就可以了</p><p>多个参数</p><p>方法一：注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">select</span><span class="params">(@Param(<span class="string">"username"</span>)</span>String username,@<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span>String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span>   <span class="attr">resultType</span>=<span class="string">"com.baidu.demo.User"</span> &gt;</span></span><br><span class="line">SELECT * FROM messages WHERE username=#&#123;username&#125; AND PASSWORD=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：参数序号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">select</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span>   <span class="attr">resultType</span>=<span class="string">"com.baidu.demo1.User"</span> &gt;</span></span><br><span class="line">SELECT * FROM messages WHERE username=#&#123;param1&#125; AND PASSWORD=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">queryPage</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> pagesize)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryPage"</span>  <span class="attr">resultType</span>=<span class="string">"com.baidu.demo.Person"</span> &gt;</span></span><br><span class="line">select * from messages limit #&#123;para1&#125;,#&#123;para2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">page</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is=Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">PersonDao personDao=sqlSession.getMapper(PersonDao.class);</span><br><span class="line"><span class="keyword">int</span> start=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> pagesize=<span class="number">2</span>;</span><br><span class="line">List&lt;Person&gt; list=personDao.queryPage(pagesize*(start-<span class="number">1</span>), pagesize);</span><br><span class="line">System.out.println(list);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页插件PageHelper"><a href="#分页插件PageHelper" class="headerlink" title="分页插件PageHelper"></a>分页插件PageHelper</h4><p>pom.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config,xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectall</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= MybatisUtil.getSqlSession();</span><br><span class="line">        UserDao userDao=sqlSession.getMapper(UserDao.class);</span><br><span class="line">        PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        List&lt;User&gt; list=userDao.SelectAll();</span><br><span class="line">        <span class="keyword">for</span>(User user:list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        PageInfo pageInfo=<span class="keyword">new</span> PageInfo(list);</span><br><span class="line">        System.out.println(<span class="string">"共"</span>+pageInfo.getTotal()+<span class="string">"条数据"</span>);</span><br><span class="line">        System.out.println(<span class="string">"当前页"</span>+pageInfo.getPageNum());</span><br><span class="line">        System.out.println(<span class="string">"上一页"</span>+pageInfo.getPrePage());</span><br><span class="line">        System.out.println(<span class="string">"下一页"</span>+pageInfo.getNextPage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="MybatisUtil的封装"><a href="#MybatisUtil的封装" class="headerlink" title="MybatisUtil的封装"></a>MybatisUtil的封装</h4><p>mybatis的核心api</p><p>SqlSession</p><ul><li>相当于Connection</li><li>commit()</li><li>rollback()</li><li>close()</li></ul><p>轻量级对象，每次操作创建一个新的。</p><p>SqlSeesionFactory</p><p>​    作用：封装Mybatis-config配置信息</p><p>​    重量级对象，整个web应用只创建一个，对象的创建比较消耗资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baidu.util;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> javax.management.RuntimeErrorException;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> com.baidu.demo.PersonDao;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtil2</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义重量级对象SqlSessionFactory，减轻消耗资源。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">//从线程中获取sqlSession对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; tdl=<span class="keyword">new</span> ThreadLocal&lt;SqlSession&gt;(); </span><br><span class="line"><span class="comment">//载入配置文件，构建SqlSessionFactory</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取配置文件失败"</span>,e);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(is!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得SqlSession对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession  <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession=<span class="keyword">null</span>;</span><br><span class="line">sqlSession=tdl.get();</span><br><span class="line"><span class="keyword">if</span>(sqlSession==<span class="keyword">null</span>) &#123;</span><br><span class="line">sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">tdl.set(sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得XXXDAO实体对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; clssa)</span></span>&#123;</span><br><span class="line">SqlSession sqlSession=getSqlSession();</span><br><span class="line">T t=sqlSession.getMapper(clssa);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession=getSqlSession();</span><br><span class="line">sqlSession.commit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回滚事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession=getSqlSession();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession=getSqlSession();</span><br><span class="line"><span class="keyword">if</span>(sqlSession!=<span class="keyword">null</span>) &#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">tdl.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p><strong>log4j.properties</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在pom.xml中配置</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实体类名简化"><a href="#实体类名简化" class="headerlink" title="实体类名简化"></a>实体类名简化</h4><ol><li><p>给实体类的权限定名取别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"com.baidu.demo.Person"   ====&gt; 别名 "Person"</span><br></pre></td></tr></table></figure></li><li><p>Mapper文件中</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parameterType="com.baidu.demo.Person"  ==&gt;</span><br><span class="line">parameterType="Person"</span><br><span class="line"></span><br><span class="line">resultType="com.baidu.demo.Person"  ==&gt;</span><br><span class="line">resultType="Person"</span><br></pre></td></tr></table></figure><ol start="3"><li>使用方法</li></ol><p>在mybatis-config.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.baidu.demo.Person"</span> <span class="attr">alias</span>=<span class="string">"Person"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mapper文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"com.baidu.demo.Person"</span> &gt;</span></span><br><span class="line">    ======&gt;&gt;&gt;直接采用别名就可以了</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"Person"</span> &gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis底层绑定参数的底层原理</p><ul><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1  默认mapper文件绑定参数  #&#123;参数&#125;</span><br><span class="line"></span><br><span class="line">底层使用的是PreparedStatment对象</span><br><span class="line">使用  sql ? 预编译的方式执行</span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line">预编译，防止sql注入，效率高</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line">只能绑定数据值，sql关键字 列 非数据无法绑定</span><br><span class="line"></span><br><span class="line">2 使用sql字符串拼接可以绑定任何参数</span><br><span class="line"></span><br><span class="line">优点：可以绑定任何内容（关键词，列）</span><br><span class="line">缺点：sql注入</span><br></pre></td></tr></table></figure></li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一级缓存：它指的是Mybatis对象中的SqlSession对象的缓存，当我们执行查询后，查询结果会存入到SqlSession为我们提供的一块区域中，该区域的结构是一个Map，当我们再次查询相同的数据，mybatis会先去SqlSession中去找，如果有拿来直接使用，当SqlSession对象执行commit()或者close()以及增删改操作，缓存会被默认清空，默认打开一级缓存</span><br><span class="line">二级缓存：它指的是Mybatis中SqlSessionFactory对象缓存，同一个SqlSessionFactory创建SqlSession对象共享SqlSessionFactory对象的缓存(二级缓存存储的是数据，不是对象)</span><br></pre></td></tr></table></figure><p><strong>使用</strong>：</p><p>1 mybatis框架支持二级缓存（mybatis-config.xml配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cachedEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 让当前的映射文件支持二级缓存（Mapper文件中配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3 让当前的操作支持二级缓存（在Select标签中配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"SelectByPage"</span>  <span class="attr">resultType</span>=<span class="string">"com.ccut.mybtais.User"</span>  <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM testmybatis"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">SelectAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">@Insert</span>(<span class="string">"INSERT INTO testmybatis(NAME,age,address,cid) VALUE(#&#123;name&#125;,#&#123;age&#125;,#&#123;address&#125;,#&#123;cid&#125;)"</span>)</span><br><span class="line"><span class="meta">@SelectKey</span>(statement =<span class="string">"SELECT LAST_INSERT_ID()"</span>,  keyProperty = <span class="string">"id"</span>,before = <span class="keyword">false</span>, resultType = <span class="keyword">int</span>.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">InsertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM testmybatis WHERE NAME LIKE '%$&#123;value&#125;%'"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">SelectByName</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h4><p>一对一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"MyResultMap"</span> <span class="attr">type</span>=<span class="string">"com.ccut.mybtais.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"userClass"</span> <span class="attr">javaType</span>=<span class="string">"com.ccut.mybtais.UserClass"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"part"</span> <span class="attr">property</span>=<span class="string">"part"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"SelectAll"</span> <span class="attr">resultMap</span>=<span class="string">"MyResultMap"</span>&gt;</span></span><br><span class="line">       SELECT * FROM testmybatis t ,class c WHERE t.`cid`=c.`cid`</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一对多</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"userClass"</span> <span class="attr">ofType</span>=<span class="string">"com.ccut.mybtais.UserClass"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cid"</span> <span class="attr">property</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"part"</span> <span class="attr">property</span>=<span class="string">"part"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h4 id=&quot;Mybatis概念&quot;&gt;&lt;a href=&quot;#Mybatis概念&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>集合类</title>
    <link href="https://augus-liuzhi.github.io/2019/11/26/%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://augus-liuzhi.github.io/2019/11/26/集合类/</id>
    <published>2019-11-26T05:27:56.487Z</published>
    <updated>2019-11-26T07:27:09.422Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-集合类概述"><a href="#1-集合类概述" class="headerlink" title="1. 集合类概述"></a>1. 集合类概述</h4><p>集合类又称为容器</p><p>集合类和数组的区别：</p><ol><li>集合类长度可变，存放对象的引用。</li><li>数组长度是固定的，存放数据的基本类型。</li></ol><p>常用集合类：</p><ol><li><p><code>List集合（继承Collection类）</code></p><ol start="2"><li><code>Set集合（继承Collection类）</code></li><li><code>Map集合</code></li></ol></li></ol><h4 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2. Collection接口"></a>2. Collection接口</h4><p>Collection接口是层次结构中的根接口，构成Collection的单位称为元素。</p><p><strong>常用方法：</strong></p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>add(E e)</td><td>将对象添加到集合</td></tr><tr><td>remove(Object o)</td><td>将对象从集合中删除</td></tr><tr><td>isEmpty()</td><td>返回boolean值，判空操作</td></tr><tr><td>iterator()</td><td>遍历集合对象</td></tr><tr><td>size()</td><td>获取集合中元素的个数，返回值int</td></tr></tbody></table><p>​     </p><p><strong>遍历的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建集合类对象</span></span><br><span class="line">list.add(<span class="string">"a"</span>);<span class="comment">//往集合中添加对象</span></span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">Iterator&lt;String&gt; it=list.iterator();<span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//判断是否有下一元素，返回值为布尔类型</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//next()方法返回Object</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-List集合"><a href="#3-List集合" class="headerlink" title="3. List集合"></a>3. List集合</h4><p>List集合包括List接口以及List接口所实现的类。</p><p>List集合中元素允许重复，各元素顺序就是对象的插入的顺序。</p><p>用户可以通过索引（元素在集合中的位置）来访问集合中的元素</p><h6 id="3-1-List接口"><a href="#3-1-List接口" class="headerlink" title="3.1 List接口"></a>3.1 List接口</h6><p>重要方法：</p><p><code>get(int index)</code>: 获取指定索引位置的元素</p><p><code>set(int index,object)</code>:将集合中指定索引位置，修改为指定对象（<strong>修改操作</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建集合类对象</span></span><br><span class="line">list.add(<span class="string">"a"</span>);<span class="comment">//往集合中添加对象</span></span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));<span class="comment">//得到索引值为0的对象</span></span><br><span class="line">System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">"c"</span>);<span class="comment">//把索引值0处对象修改成c,修改不是交换，对象a消失</span></span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-List接口的实现类"><a href="#3-2-List接口的实现类" class="headerlink" title="3.2 List接口的实现类"></a>3.2 List接口的实现类</h6><p>实现类一：ArrayList类</p><p>优点：实现可变数组，允许保存所有元素，包括Null，并可以根据索引位置对集合进行随机访问</p><p>缺点：向指定的索引位置插入对象或删除对象的速度缓慢。</p><p>实现类二：LinkedList类</p><p>优点：采用链表保存对象，便于向集合中插入和删除对象，插入删除效率高。</p><p>缺点：随机访问效率低</p><p>实例化用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;E&gt; arraylist=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;E&gt; linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">E为合法的Java数据类型</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//创建集合类对象</span></span><br><span class="line">list.add(<span class="string">"a"</span>);<span class="comment">//往集合中添加对象</span></span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">int</span> i=(<span class="keyword">int</span>) (Math.random()*list.size()-<span class="number">1</span>);<span class="comment">//随机获取0-2</span></span><br><span class="line">list.remove(<span class="number">2</span>);<span class="comment">//删除索引为2的元素。</span></span><br><span class="line">Iterator&lt;String&gt; it=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//遍历输出</span></span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：与数组相同，集合的索引也是从0开始的。</p><h4 id="4-Set集合"><a href="#4-Set集合" class="headerlink" title="4. Set集合"></a>4. Set集合</h4><p>set集合对象不按特定方式排序，只是简单的把对象加入集合，set集合不能包含重复的元素。</p><p>set集合由set接口和set接口实现类组成。</p><p>Set接口的实现类</p><p>实现类一：HashSet类实现Set接口，由哈希表支持，不保证迭代顺序，允许使用Null元素</p><p>实现类二：TreeSet类不仅实现Set接口，还实现了java.util.SortedSet接口。TreeSet类实现的Set集合在便利中按照自然顺序递增排序，也可以按照指定比较器递增排序。</p><p><strong>TreeSet类增加方法</strong></p><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>first()</td><td>返回第一个（最低）元素</td></tr><tr><td>last()</td><td>返回最后一个（最高）元素</td></tr><tr><td>comparator()</td><td>返回排序比较器，如果自然排序，返回NUll</td></tr><tr><td>headSet(E toElement)</td><td>返回一个新集合，包含从头到toElement所有的元素</td></tr><tr><td>subSet(E fromElemnet,E toElement【不包含】)</td><td>返回一个新集合，包含从fromElement到toElement所有的元素</td></tr><tr><td>tailSet(E fromElement)</td><td>返回一个新集合，包含fromElement到之后的所有的对象</td></tr></tbody></table><p><strong>实例用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TreeSet &lt;String&gt; set=<span class="keyword">new</span> TreeSet&lt;&gt;();<span class="comment">//创建一个Set集合对象</span></span><br><span class="line">set.add(<span class="string">"a"</span>);<span class="comment">//添加对象</span></span><br><span class="line">set.add(<span class="string">"b"</span>);</span><br><span class="line">set.add(<span class="string">"c"</span>);</span><br><span class="line">System.out.println(set.size());<span class="comment">//输出个数</span></span><br><span class="line">System.out.println(set.first());<span class="comment">//输出集合第一个</span></span><br><span class="line">System.out.println(set.last());<span class="comment">//输出集合最后一个</span></span><br><span class="line">System.out.println(set.comparator());<span class="comment">//返回排序比较器</span></span><br><span class="line">System.out.println(set.headSet(<span class="string">"c"</span>));<span class="comment">//从头到C，不包含C</span></span><br><span class="line">System.out.println(set.subSet(<span class="string">"a"</span>, <span class="string">"c"</span>));C<span class="comment">//从a到c,不包含c</span></span><br><span class="line">System.out.println(set.tailSet(<span class="string">"b"</span>));<span class="comment">//从b往后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HashSet类方法</strong></p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>HashSet()</td><td>构造一个默认的散列集合</td></tr><tr><td>HashSet(Collection c)</td><td>创建一个散列集合，并用类c中的元素初始化</td></tr><tr><td>HashSet(int capacity)</td><td>创建一个容量为capacity的散列集合</td></tr><tr><td>Hash(int capacity,float fillTadio)</td><td>创建一个容量为capacity的散列集合，填充比为fillTadio</td></tr></tbody></table><p><strong>用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HashSet&lt;Object&gt; hs=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">hs.add(<span class="string">"A"</span>);</span><br><span class="line">hs.add(<span class="string">"B"</span>);</span><br><span class="line">hs.add(<span class="string">"C"</span>);</span><br><span class="line">hs.add(<span class="string">"D"</span>);</span><br><span class="line">System.out.println(hs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>散列集合的元素是无序的</p><h4 id="5-Map集合"><a href="#5-Map集合" class="headerlink" title="5. Map集合"></a>5. Map集合</h4><p>Map集合中没有继承Collection接口，它提供的是Key到Value的映射。Map中不能包含相同的Key,每个Key只能映射一个Value.</p><p>Map集合包含：Map接口以及Map接口所实现类。</p><h6 id="5-1-Map接口"><a href="#5-1-Map接口" class="headerlink" title="5.1 Map接口"></a>5.1 Map接口</h6><p>Map接口的常用方法：</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>put(K key,V value)</td><td>向集合中添加Key和Value的映射关系</td></tr><tr><td>containsKey(object key)</td><td>包含指定Key的映射关系，返回true</td></tr><tr><td>containsKey(object value)</td><td>映射一个或多个Key映射到指定值，返回true</td></tr><tr><td>get(object key)</td><td>存在指定key对象，返回该对象的值，否则返回null</td></tr><tr><td>keySet()</td><td>返回该集合中所有Key对象形成的Set集合</td></tr><tr><td>values()</td><td>返回该对象所有值对象形成的Collection集合</td></tr></tbody></table><p><strong>用法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String,String&gt;map=<span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//创建Map实例</span></span><br><span class="line">map.put(<span class="string">"0"</span>, <span class="string">"我"</span>);<span class="comment">//添加key和value映射关系</span></span><br><span class="line">map.put(<span class="string">"1"</span>, <span class="string">"是"</span>);</span><br><span class="line">map.put(<span class="string">"2"</span>, <span class="string">"学"</span>);</span><br><span class="line">map.put(<span class="string">"3"</span>, <span class="string">"生"</span>);</span><br><span class="line">Set&lt;String&gt; set=map.keySet();<span class="comment">//构建map里面的所有key集合</span></span><br><span class="line">Iterator &lt;String&gt; it=set.iterator();<span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//判断是否还有下一个元素</span></span><br><span class="line">System.out.println(it.next());<span class="comment">//遍历集合</span></span><br><span class="line">&#125;</span><br><span class="line">Collection&lt;String&gt; coll=map.values();<span class="comment">//构建map里面的所有Value集合</span></span><br><span class="line">it=coll.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>map集合允许对象添加对象为Null值，而且没有个数限制。（这里的值对象value,不是key）</p><h6 id="5-2-Map接口的实现类"><a href="#5-2-Map接口的实现类" class="headerlink" title="5.2 Map接口的实现类"></a>5.2 Map接口的实现类</h6><p>实现类一：HashMap类，允许使用null值null健，添加和删除映射关系效率更高，不保证映射的顺序。</p><p>实现类二：TreeMap类，映射关系具有一定的顺序，删除，添加，定位映射效率低，不允许null值。</p><p><strong>用法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"面向对象程序设计"</span>, <span class="string">"100"</span>);</span><br><span class="line">map.put(<span class="string">"软件工程导论"</span>, <span class="string">"80"</span>);</span><br><span class="line">map.put(<span class="string">"高数"</span>, <span class="string">"60"</span>);</span><br><span class="line">Iterator&lt;String&gt;it=map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">String key=it.next();</span><br><span class="line">String value=map.get(key);</span><br><span class="line">System.out.println(key+<span class="string">"  "</span>+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">面向对象程序设计  <span class="number">100</span></span><br><span class="line">软件工程导论  <span class="number">80</span></span><br><span class="line">高数  <span class="number">60</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-集合类概述&quot;&gt;&lt;a href=&quot;#1-集合类概述&quot; class=&quot;headerlink&quot; title=&quot;1. 集合类概述&quot;&gt;&lt;/a&gt;1. 集合类概述&lt;/h4&gt;&lt;p&gt;集合类又称为容器&lt;/p&gt;
&lt;p&gt;集合类和数组的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合类长度可变，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://augus-liuzhi.github.io/2019/11/18/String/"/>
    <id>https://augus-liuzhi.github.io/2019/11/18/String/</id>
    <published>2019-11-18T03:32:46.357Z</published>
    <updated>2019-11-20T12:24:51.406Z</updated>
    
    <content type="html"><![CDATA[<p>String类</p><ol><li>声明字符串</li></ol><blockquote><p>java中有一对” “号包围的都是字符串</p></blockquote><p>声明字符串语法：<code>String s</code></p><p>注意：声明字符串必须经过初始化才能使用</p><ol start="2"><li>创建字符串</li></ol><p>方法一 <code>String (char a[])</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">String s=<span class="keyword">new</span> String(a);</span><br><span class="line">等价于</span><br><span class="line">String s=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>方法二<code>String(char a[],int offset,int length)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[]=&#123;<span class="string">'s'</span>,<span class="string">'t'</span>,<span class="string">'u'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>,<span class="string">'t'</span>&#125;;</span><br><span class="line">String s=<span class="keyword">new</span> String(a,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">等价于</span><br><span class="line">String s=<span class="keyword">new</span> String(<span class="string">"uden"</span>)</span><br></pre></td></tr></table></figure><p>方法三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1,str2;</span><br><span class="line">str1=<span class="string">"we are student"</span>;</span><br><span class="line">str2=<span class="string">"we are student"</span>;</span><br><span class="line">str1与str2引用相同的的字符串常量，具有相同的实体。</span><br></pre></td></tr></table></figure><ol start="3"><li>连接多个字符串</li></ol><p>使用<code>+</code>运算符可以将多个字符串连接在一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str1=<span class="string">"hello"</span>;</span><br><span class="line">String str2=<span class="string">"world"</span>;</span><br><span class="line">String s=str1+<span class="string">" "</span>+str2;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>连接其他数据类型</li></ol><p>字符串也可以和其他数据类连接，会自动将其他的数据类型转换成字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str1=<span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> b=<span class="string">'a'</span>;</span><br><span class="line">System.out.println(a+str1+b);</span><br><span class="line">&#125;</span><br><span class="line">结果：<span class="number">1010</span>a</span><br></pre></td></tr></table></figure><p>其他数据类型和字符串相连接的时候，会自动调用toString()方法，将其转换成字符串。</p><ol start="5"><li>获取字符串长度</li></ol><p>使用String类的length()方法获取声明字符串对象的长度</p><p>语法：<code>str.length()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">"we are student"</span>;</span><br><span class="line"><span class="keyword">int</span> size=s.length();</span><br></pre></td></tr></table></figure><p>空格也算字符串的一位。</p><ol start="6"><li><p>字符串查找</p><p><code>indexOf(String s)</code>查找s在字符串第一次出现的位置</p><p><code>lastIndexOf(String s)</code>查找s在字符串中最后一次出现的位置</p><p>查找成功，返回当前字符所在字符串的位置，查找失败，返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s=<span class="string">"we are student"</span>;</span><br><span class="line">System.out.println(s.indexOf(<span class="string">"e"</span>));</span><br><span class="line">System.out.println(s.lastIndexOf(<span class="string">"e"</span>));</span><br><span class="line">System.out.println(s.indexOf(<span class="string">"l"</span>));</span><br><span class="line">System.out.println(s.indexOf(<span class="string">'w'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>获取索引位置的字符</li></ol><p>使用charAt()方法可以将指定索引处的字符返回</p><p>语法：<code>s.charAt(int index)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">"we are student"</span>;</span><br><span class="line">System.out.println(<span class="string">"返回第5个位置"</span>+s.charAt(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><ol start="8"><li>获取子字符串</li></ol><p>方法一 ：<code>substring(int beginIndex)</code>从当前位置到结束</p><p>方法二 ：<code>substring(int beginIndex,int endIndex)</code>从当前开始，到指定结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s=<span class="string">"we are student"</span>;</span><br><span class="line">System.out.println(s.substring(<span class="number">3</span>));</span><br><span class="line">System.out.println(s.substring(<span class="number">2</span>,<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li></ol><ol start="8"><li>去除空格</li></ol><p>忽略前导空格和尾部空格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s=<span class="string">"    String 123    "</span>;</span><br><span class="line">System.out.println(<span class="string">"字符串长度为："</span>+s.length());</span><br><span class="line">System.out.println(<span class="string">"去除空格后的长度为："</span>+s.trim().length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>字符串替换</li></ol><p>将指定字符或者字符串转换成新的字符或者字符串</p><p>语法：<code>s.replace(old,new)</code> <code>s.replaceAll(regex,replacment)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s=<span class="string">"abcdefg"</span>;</span><br><span class="line">System.out.println(s.replace(<span class="string">'a'</span>, <span class="string">'A'</span>));</span><br><span class="line">System.out.println(s.replaceAll(<span class="string">"ab"</span>, <span class="string">"ccccccc"</span>));</span><br><span class="line">System.out.println(s.replaceAll(s, <span class="string">"ccccccc"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>判断字符串的开始与结尾</li></ol><p>startWith()方法与endWith()方法分别用于判断字符串是否以指定内容开始或者结束，返回值为boolean类型</p><p>语法：<code>s.startWith(String prefix)</code></p><p>语法：<code>s.endWith(String suffix)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String num=<span class="string">"220123456789330"</span>;</span><br><span class="line"><span class="keyword">boolean</span> a=num.startsWith(<span class="string">"220"</span>);</span><br><span class="line"><span class="keyword">boolean</span> b=num.endsWith(<span class="string">"330"</span>);</span><br><span class="line">System.out.println(<span class="string">"字符串是220开头么？"</span>+a);</span><br><span class="line">System.out.println(<span class="string">"字符串是330结尾么？"</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>判断字符串是否相等</li></ol><p>运算符<code>==</code>用于判断两个字符串的内存地址是否相同</p><p>如果两个字符串具有相同的字符和长度可以使用equals()进行比较</p><p>语法：<code>s1.equals(s2)</code></p><p>语法：<code>s1.equalsIgnoreCase()</code>忽略大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String a=<span class="string">"123"</span>;<span class="comment">//将123字符串指向a</span></span><br><span class="line">String b=<span class="string">"123"</span>;<span class="comment">//将123字符串指向b</span></span><br><span class="line">String c=<span class="keyword">new</span> String(<span class="string">"123"</span>);<span class="comment">//新开辟一个内存空间，存储123字符串</span></span><br><span class="line"><span class="keyword">if</span>(a==b) &#123;</span><br><span class="line">System.out.println(<span class="string">"两个字符串内存地址一样"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==c) &#123;</span><br><span class="line">System.out.println(<span class="string">"两个字符串内存地址一样"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"两个内存地址不一样"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a.equals(b)) &#123;</span><br><span class="line">System.out.println(<span class="string">"两个字符串相同"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"两个字符串不相同"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">两个字符串内存地址一样</span><br><span class="line">两个内存地址不一样</span><br><span class="line">两个字符串相同</span><br></pre></td></tr></table></figure><ol start="12"><li>按字典比较两个字符串</li></ol><p><code>compareTo()</code>方法按字典顺序比较两个字符串</p><p>s1&lt;s2返回小于0的值</p><p>s1=s2返回0</p><p>s1&gt;s2返回大于0的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">String s2=<span class="string">"efg"</span>;</span><br><span class="line">String s3=<span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s1.compareTo(s3));</span><br><span class="line">System.out.println(s1.compareTo(s2));</span><br><span class="line">System.out.println(s2.compareTo(s3));</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><ol start="13"><li>字母大小写转换</li></ol><p><code>toLowerCase()</code>:将所有字符转换成小写</p><p><code>toUpperCase()</code> 将所有字符转换成大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">String s2=<span class="string">"ABC"</span>;</span><br><span class="line">System.out.println(s1.toUpperCase());</span><br><span class="line">System.out.println(s2.toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">ABC</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><ol start="14"><li>字符串分割</li></ol><p><code>split()</code>方法可以使字符串按照指定的分割字符或字符串对内容进行分割，指定多个分隔符<code>,|=</code></p><p><code>split(String sign,int limit)</code>指定分割次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s=<span class="string">"123,456,789=789=123123123"</span>;</span><br><span class="line">String[] news1=s.split(<span class="string">",|="</span>);</span><br><span class="line"><span class="keyword">for</span>(String i:news1) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">String[] news2=s.split(<span class="string">",|="</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(String i:news2) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">789</span></span><br><span class="line"><span class="number">789</span></span><br><span class="line"><span class="number">123123123</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">789</span>=<span class="number">789</span>=<span class="number">123123123</span></span><br></pre></td></tr></table></figure><ol start="15"><li>日期和时间的字符串格式化</li></ol><p>日期格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line">String year=String.format(<span class="string">"%tY"</span>, date);</span><br><span class="line">String month=String.format(<span class="string">"%tm"</span>, date);</span><br><span class="line">String day=String.format(<span class="string">"%td"</span>, date);</span><br><span class="line">System.out.println(year+<span class="string">"年"</span>+month+<span class="string">"月"</span>+day+<span class="string">"日"</span>);</span><br></pre></td></tr></table></figure><p>时间格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line">String hour=String.format(<span class="string">"%tH"</span>, date);</span><br><span class="line">String minute=String.format(<span class="string">"%tM"</span>, date);</span><br><span class="line">String sec=String.format(<span class="string">"%tS"</span>, date);</span><br><span class="line">System.out.println(hour+<span class="string">"点"</span>+minute+<span class="string">"分钟"</span>+sec+<span class="string">"秒"</span>);</span><br></pre></td></tr></table></figure><p>简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"%tF"</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">System.out.println(String.format(<span class="string">"%tT"</span>, <span class="keyword">new</span> Date()));</span><br></pre></td></tr></table></figure><ol start="16"><li>正则表达式</li></ol><table><thead><tr><th>元字符</th><th>意义</th></tr></thead><tbody><tr><td>.</td><td>代表任意一个字符</td></tr><tr><td>\d</td><td>0-9任意一个</td></tr><tr><td>\D</td><td>非数字字符</td></tr><tr><td>\s</td><td>空白字符</td></tr><tr><td>\S</td><td>非空白字符</td></tr><tr><td>\w</td><td>可用作标识符的字符不包括$</td></tr><tr><td>\W</td><td>代表不可用于标识符的字符</td></tr><tr><td>通配符</td><td></td></tr><tr><td>？</td><td>0次或1次</td></tr><tr><td>*</td><td>0次或多次</td></tr><tr><td>+</td><td>一次或多次</td></tr><tr><td>{n}</td><td>X=n</td></tr><tr><td>{n,}</td><td>n&lt;=X</td></tr><tr><td>{n,m}</td><td>n&lt;=X&lt;=m</td></tr><tr><td>[abc]</td><td>abc中的一个</td></tr><tr><td>[^abc]</td><td>abc之外的任意字符</td></tr><tr><td>[a-zA-Z]</td><td>任何一个英文字母</td></tr><tr><td>[a-e[g-z]]</td><td>并运算</td></tr><tr><td>[a-z&amp;&amp;[def]]</td><td>交运算</td></tr></tbody></table><ol start="16"><li>字符串生成器</li></ol><p>StringBuffer类提高频繁添加字符串的效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer buffer=<span class="keyword">new</span> StringBuffer(<span class="string">"abcd"</span>);</span><br><span class="line">System.out.println(buffer);</span><br><span class="line">buffer.append(<span class="number">10</span>);</span><br><span class="line">System.out.println(buffer);</span><br><span class="line">buffer.insert(<span class="number">6</span>, <span class="string">"hello"</span>);</span><br><span class="line">System.out.println(buffer);</span><br><span class="line">buffer.delete(<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">System.out.println(buffer);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;String类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;声明字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;java中有一对” “号包围的都是字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;声明字符串语法：&lt;code&gt;String s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：声
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java面向对象基础</title>
    <link href="https://augus-liuzhi.github.io/2019/10/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://augus-liuzhi.github.io/2019/10/28/面向对象/</id>
    <published>2019-10-28T01:02:24.648Z</published>
    <updated>2020-10-06T14:28:45.474Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-面向对象基础"><a href="#1-面向对象基础" class="headerlink" title="1 面向对象基础"></a>1 面向对象基础</h4><p>1.1 对象</p><blockquote><p>概念：世间万物皆为对象，具有一定的属性和行为</p></blockquote><p>1.2 类</p><blockquote><p>概念：类是具有相同属性和行为的对象的抽象</p></blockquote><p>1.3 属性</p><blockquote><p>概念：描述对象的状态，在java中就是变量</p></blockquote><p>1.4 行为</p><blockquote><p>概念：描述对象的行为，在java中就是函数</p></blockquote><p>1.5 面向对象编程的三大特点</p><p>1.5.1 封装</p><blockquote><p>封装：将对象的属性和行为封装起来，对外的载体就是类【核心思想】</p></blockquote><blockquote><p>隐藏对象的属性和实现细节，仅对外提供公共访问方式</p></blockquote><p>好处：</p><ul><li><p>将转化提高</p></li><li><p>便于使用</p></li><li><p>提高重用性</p></li><li><p>提高安全性</p></li></ul><p><strong>封装原则</strong></p><blockquote><p>将不需要的对外提供的内容隐藏起来，把属性都隐藏，提供公共方法对其访问。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cardemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">car c=<span class="keyword">new</span> car();</span><br><span class="line">c.setAge(<span class="number">0</span>);</span><br><span class="line">System.out.println(c.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">0</span>&amp;&amp;age&lt;<span class="number">100</span>)</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"age 错误！！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.5.2 继承</p><blockquote><p>继承：子类有父类的属性和行为，子类也可以定义自己独有的属性和行为</p></blockquote><p>1.5.3 多态</p><p>多态：</p><h4 id="2-类"><a href="#2-类" class="headerlink" title="2 类"></a>2 类</h4><p>2.1 成员变量和局部变量</p><blockquote><ol><li>成员变量定义在类中，整个类中都有访问。局部变量定义在函数、语句、局部代码块中，只有在所属区域有效</li><li>成员变量存在于堆内存的对象中，局部变量存在于栈内存的对象中</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失。局部变量随着所属区域的执行而存在，随着所属区域结束而释放</li><li>成员变量都有默认初始值，局部变量必须初始化。</li><li>局部变量和成员变量同名，局部变量优先原则</li></ol></blockquote><p><strong>注意</strong>：类类型的参数一定指向对象，否则为NULL</p><p><strong>匿名对象</strong></p><blockquote><p>​    没有名字的对象new car(); 定义对象的简写格式</p><ol><li><p>当对象对方法进行一次调用，可以使用匿名对象</p><p>new car().num=5;</p><p>new car().color=”red”;</p><p>new car().run();</p></li><li><p>匿名对象可以作为实际参数传递</p><p>show(new car());</p></li></ol></blockquote><p><strong>构造函数</strong></p><blockquote><p>函数名和类名相同</p><p>没有返回值</p><p>作用: 给对象初始化</p><p>创建对象都必须通过构造函数初始化</p><p>一个类中如果没有定义过构造函数，那么该类中就会有一个默认无参的构造函数</p><p>如果类中指定了构造函数，那么类中默认的构造函数就没有了</p><p>构造函数和一般函数的区别</p><p>调用时间：</p><p>构造函数对象创建时调用，对对象初始化，一般函数，对象创建后，才可以调用</p><p>调用次数：</p><p>构造函数只调用一次且是自动调用，一般函数可以调用多次且手动调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cardemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">person p = <span class="keyword">new</span> person();</span><br><span class="line">p.speak();</span><br><span class="line">person p1 = <span class="keyword">new</span> person(<span class="string">"旺旺"</span>);</span><br><span class="line">p1.speak();</span><br><span class="line">person p2 = <span class="keyword">new</span> person(<span class="string">"强强"</span>,<span class="number">10</span>);</span><br><span class="line">p2.speak();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">person() &#123;</span><br><span class="line">name = <span class="string">"baby"</span>;</span><br><span class="line">age = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"person run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">person(String n) &#123;</span><br><span class="line">name = n;</span><br><span class="line">&#125;</span><br><span class="line">person(String n, <span class="keyword">int</span> a) &#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">" "</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多个构造函数出现，必须按照重载方式【参数类型，参数个数，参数顺序】对不同的对象进行初始化</strong></p><p>2.2 成员方法</p><blockquote><p>权限修饰符 返回值类型 方法名（参数1，参数2，……参数N）{</p><p>​                //方法体（可以为空）</p><p>​                //返回值</p><p>}</p><p>构造方法</p><p>特点：1 无返回值</p><p>​            2 方法名和类名相同</p><p>权限修饰符 方法名（）{</p><p>//构造方法体</p><p>}</p><p>如果没有构造方法，系统会自动创建一个，如果有自己写的，系统将不会创建构造无参构造方法</p></blockquote><p>2.3 权限修饰符</p><table><thead><tr><th></th><th>private</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>本类</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>同包其他类或者子类</td><td>不可见</td><td>可见</td><td>可见</td></tr><tr><td>其他包的类或者子类</td><td>不可见</td><td>不可见</td><td>可见</td></tr></tbody></table><p><strong>如果没有设置权限修饰符，默认为本包可见，类的权限决定变量和方法的权限</strong></p><p>2.4 this关键字</p><blockquote><ol><li><p>调用成员的变量和成员的方法</p></li><li><p>当成员变量和局部变量同名时 用this区分</p></li><li><p>this表示当前对象的引用</p></li><li>this可以在构造函数中调用其它构造函数，但是必须放在当前调用构造函数的第一行，即this函数放置在第一行</li></ol></blockquote><p>2.5 静态变量、常量和方法</p><blockquote><p>用static修饰的成员被所有对象共享</p><p>static优于对象存在，因为static的成员随着类的加载就已经存在了</p><p>用关键字static修饰的变量，常量，方法称为静态变量，常量，方法</p><p>static修饰的成员多了一种调用方式，使用语法：类名.静态类成员</p><p>static修饰的数据是共享数据（静态/类变量，静态方法），对象中存储的数据是特有数据（叫成员/实例变量，成员方法）</p><p>静态放法中不可以使用this关键字</p><p>在静态方法中不可以直接调用非静态方法</p><p>局部变量不可以声明static</p></blockquote><p><strong>成员变量和静态变量的区别</strong></p><blockquote><p>1 两个变量的生命周期的时间不一样，成员变量随着对象的创建而存在，随着对象的释放被回收，静态变量随着类的加载而实现，随着类的消失而消失</p><p>2 调用方式不同</p><p>成员变量只能被对象调用，然而静态变量可以用类名和对象调用【尽量使用类名调用】</p><p>3 别名不同</p><p>成员变量也叫实例变量</p><p>静态变量也叫类变量</p><p>4 存储位置不同</p><p>成员变量的数据存储在堆内存的对象中，所以也叫对象的特有数据</p><p>静态变量存储在方法区的静态区【共享数据区】，所以也叫对象的共享数据</p></blockquote><p><strong>静态的注意事项</strong>：</p><blockquote><ol><li>静态方法只能访问静态成员。【访问局限性】</li><li>非静态即可以访问静态，又可以访问静态</li><li>静态方法中不可以使用this和super关键字</li><li>主函数是静态的</li></ol></blockquote><p><strong>主函数</strong>：</p><blockquote><ol><li>格式是固定的</li><li><p>被JVM识别和调用</p><p>public：权限是最大的</p><p>static : 虚拟机调用主函数，不需要对象，直接用类名调用</p><p>void : 无返回值</p><p>main : 函数名，JVM识别的一个名字</p><p>String[] args: 参数列表，是一个数组类型的参数，元素都是字符串【==&gt;new String[0]】</p></li></ol></blockquote><h4 id="3-对象"><a href="#3-对象" class="headerlink" title="3 对象"></a>3 对象</h4><p>3.1 对象的创建</p><blockquote><p>语法：</p><p>Test test=new Test();</p><p>Test test=new Test(a);</p></blockquote><p><strong>注意</strong>：每创建一个对象，就会调用一次构造方法</p><p>3.2 访问对象的属性和行为</p><blockquote><p>类名.行为</p><p>类名.属性</p></blockquote><h4 id="4-super关键字"><a href="#4-super关键字" class="headerlink" title="4. super关键字"></a>4. super关键字</h4><ul><li>调用构造方法</li><li>调用隐藏变量</li><li>调用重写方法</li></ul><blockquote><p>注意：super调用的都是父类</p></blockquote><blockquote><p>super使用代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">A() &#123;</span><br><span class="line">System.out.println(<span class="string">"父类无参构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"父类有参构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">B() &#123;</span><br><span class="line"><span class="keyword">super</span>();<span class="comment">// 调用父类无参构造方法</span></span><br><span class="line">System.out.println(<span class="string">"隐藏变量已经调用:"</span>+<span class="keyword">super</span>.num);<span class="comment">// 调用隐藏变量</span></span><br><span class="line">System.out.println(<span class="string">"B子类的构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.show();<span class="comment">// 调用父类被重写的方法</span></span><br><span class="line">System.out.println(<span class="string">"子类show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">C() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">4</span>);<span class="comment">// 调用父类中的有参构造方法</span></span><br><span class="line">System.out.println(<span class="string">"C子类的构造方法执行了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-final关键字"><a href="#5-final关键字" class="headerlink" title="5. final关键字"></a>5. final关键字</h4><p>继承的弊端：打破封装性</p><p>final关键字可以修饰类、方法、变量</p><h6 id="5-1-final修饰类"><a href="#5-1-final修饰类" class="headerlink" title="5.1 final修饰类"></a>5.1 final修饰类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final修饰的类不能被继承，即不能有子类</p><h6 id="2-2-final修饰方法"><a href="#2-2-final修饰方法" class="headerlink" title="2.2 final修饰方法"></a>2.2 final修饰方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final修饰的方法不允许被子类重写</p><h6 id="2-3-final变量"><a href="#2-3-final变量" class="headerlink" title="2.3 final变量"></a>2.3 final变量</h6><p>final修饰的变量为常量，常量一般同时使用时final和static修饰，只能被赋值一次（常量大写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3. 抽象类"></a>3. 抽象类</h4><h6 id="6-1-抽象定义"><a href="#6-1-抽象定义" class="headerlink" title="6.1 抽象定义"></a>6.1 抽象定义</h6><blockquote><p>抽象：模糊，不具体，看不懂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;<span class="comment">// 定义抽象动物类</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">// 定义抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;<span class="comment">//定义实例方法</span></span><br><span class="line">System.out.println(<span class="string">"can sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用筷子拿着吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用嘴叼着吃"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-2-抽象特点"><a href="#6-2-抽象特点" class="headerlink" title="6.2 抽象特点"></a>6.2 抽象特点</h6><p>方法只有声明没有实现时，该方法就是抽象方法，被abstract修饰，抽象方法必须定义在抽象类中。</p><p>抽象类不可以被实例化【调用抽象方法没有意义】</p><p>抽象类的子类，必须重写抽象类的所有抽象方法才可以实例化，否则，子类还是抽象类</p><h6 id="6-3-抽象细节"><a href="#6-3-抽象细节" class="headerlink" title="6.3 抽象细节"></a>6.3 抽象细节</h6><ol><li>抽象类有构造函数，给子类对象进行初始化</li><li>抽象类可以不定义抽象方法【一般这种类主要是不让创建对象】</li><li>抽象关键字不可以和哪些关键字共存【private不行，static不行，final不行】</li><li>抽象类和一般类的异同</li></ol><blockquote><p>​            相同：描述事物，都在内部定了成员</p><p>​            不同点：</p><p>​                        1 一般类中有足够的信息用来描述事物，抽象类描述不足</p><p>​                        2 一般类中，不可以定义抽象方法，但是抽象类中可以定义，也可以定义非抽象</p><p>​                        3 一般类类可以被实例化，抽象类不可以被实例化</p></blockquote><ol start="5"><li>抽象类一定是父类【子类覆盖其方法后才可以对子类实例化】</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-面向对象基础&quot;&gt;&lt;a href=&quot;#1-面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;1 面向对象基础&quot;&gt;&lt;/a&gt;1 面向对象基础&lt;/h4&gt;&lt;p&gt;1.1 对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;概念：世间万物皆为对象，具有一定的属性
      
    
    </summary>
    
    
      <category term="--satic关键字 --this关键字" scheme="https://augus-liuzhi.github.io/tags/satic%E5%85%B3%E9%94%AE%E5%AD%97-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>java接口</title>
    <link href="https://augus-liuzhi.github.io/2019/10/17/%E6%8E%A5%E5%8F%A3/"/>
    <id>https://augus-liuzhi.github.io/2019/10/17/接口/</id>
    <published>2019-10-17T10:46:14.267Z</published>
    <updated>2019-10-28T01:06:14.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-接口定义"><a href="#1-接口定义" class="headerlink" title="1. 接口定义"></a>1. 接口定义</h4><blockquote><p>当一个抽象类的所有方法是抽象方法的时候，这时可以将该抽象类用另一种形式和定义来表示，那就是接口 interface【接口和抽象类似，必须全部覆盖接口类的所有抽象方法】</p></blockquote><p><strong>定义接口关键字：</strong><code>interface</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于接口中常见的成员，这些成员都有固定修饰符</p></blockquote><ol><li>全局常量：public static final</li><li>抽象方法：public abstract void show();</li></ol><p><strong>结论：接口的成员都是公共权限</strong></p><h4 id="2-接口的实现"><a href="#2-接口的实现" class="headerlink" title="2. 接口的实现"></a>2. 接口的实现</h4><blockquote><p>类与接口之间的关系是实现，类与类之间是继承关系</p><p>接口不能实例化，只能由实现类覆盖接口类的所有方法，实现类才可以实例化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementtext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">demoimpl d = <span class="keyword">new</span> demoimpl();</span><br><span class="line">System.out.println(d.num);</span><br><span class="line">System.out.println(demo.num);<span class="comment">//静态类名调用</span></span><br><span class="line">System.out.println(demoimpl.num);<span class="comment">//静态类名调用</span></span><br><span class="line">d.show();</span><br><span class="line">d.show1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;<span class="comment">//按照格式写</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demoimpl</span> <span class="keyword">implements</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java不支持多继承，会出现不确定调用，进行多继承改良，采用多实现</p><p>多实现：一个类可以实现多个接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show方法执行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a + b + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个类继承另一类的时候还可以实现多个接口</p><p>接口的出现避免单继承的局限性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">gg</span> </span>&#123;<span class="comment">//接口gg</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">mm</span> </span>&#123;<span class="comment">//接口mm</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">see</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">gg</span>, <span class="title">mm</span> </span>&#123;<span class="comment">// 接口和接口之间是继承关系，而且还是多继承</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;<span class="comment">//类Q有3个方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">see</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口和抽象类的区别</strong></p><blockquote><p>相同点：都是向上抽取来的</p><p>不同点：</p><p>​                抽象类需要被继承，而且单继承，接口需要被实现，可以多实现</p><p>​                抽象类中可以定义抽象方法和非抽象方法，子类继承后可以直接使用非抽象方法，但是接口中只能                           定义抽象方法必须有子类去实现</p><p>​                抽象类的继承是 is a 关系，定义体系内共性内容，接口的实现是like a关系，定义的体系额外功能</p></blockquote><p>用一个例子来说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">dog</span> </span>&#123;<span class="comment">//定义犬类</span></span><br><span class="line">String name;<span class="comment">//有名字</span></span><br><span class="line"><span class="keyword">int</span> age;<span class="comment">//有年龄</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;<span class="comment">//能吃</span></span><br><span class="line">System.out.println(<span class="string">"can eat"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;<span class="comment">//能睡，不同狗睡的地方不一样</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fun_seek</span> </span>&#123;<span class="comment">//定义额外功能接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">seekroad</span><span class="params">()</span></span>;<span class="comment">//认路</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">fun_look</span> //定义额外功能接口</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">void</span> <span class="title">lookfor</span>()</span>;<span class="comment">//查毒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">eyedog</span> <span class="keyword">extends</span> <span class="title">dog</span> <span class="keyword">implements</span> <span class="title">fun_seek</span> </span>&#123;<span class="comment">//定义导盲犬继承犬类的共性，并添加认路的功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;<span class="comment">//重写抽象类睡觉的方式</span></span><br><span class="line">System.out.println(<span class="string">"在主人家睡觉"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seekroad</span><span class="params">()</span> </span>&#123;<span class="comment">//重写添加的认路功能</span></span><br><span class="line">System.out.println(<span class="string">"俺认识路"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lookdog</span> <span class="keyword">extends</span> <span class="title">dog</span> <span class="keyword">implements</span> <span class="title">fun_look</span> </span>&#123;<span class="comment">//定义缉毒犬继承犬类共性，并添加找毒的功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="comment">//重写抽象类睡觉的方式</span></span></span><br><span class="line"><span class="function">System.out.<span class="title">println</span><span class="params">(<span class="string">"在警察局睡觉"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookfor</span><span class="params">()</span> </span>&#123;<span class="comment">//重写添加找毒的功能</span></span><br><span class="line">System.out.println(<span class="string">"俺可以查毒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-接口定义&quot;&gt;&lt;a href=&quot;#1-接口定义&quot; class=&quot;headerlink&quot; title=&quot;1. 接口定义&quot;&gt;&lt;/a&gt;1. 接口定义&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;当一个抽象类的所有方法是抽象方法的时候，这时可以将该抽象类用另一种形式和定义来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java面向对象——继承</title>
    <link href="https://augus-liuzhi.github.io/2019/10/15/%E7%BB%A7%E6%89%BF/"/>
    <id>https://augus-liuzhi.github.io/2019/10/15/继承/</id>
    <published>2019-10-15T12:08:31.215Z</published>
    <updated>2019-10-15T12:32:55.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-继承的概述"><a href="#1-继承的概述" class="headerlink" title="1. 继承的概述"></a>1. 继承的概述</h4><blockquote><p>继承就是子类继承父类的变量和方法，下面用代码解释一下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;<span class="comment">// 定义学生类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"studay good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span>&#123;<span class="comment">// 定义工人类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"work good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上述例子中可以看到，学生类和工人类都有共同的特征，为了实现代码复用性，进行抽取，java中抽取用类表示将共有的的行为或特征进行抽取，然后原来的来类也要可以用，我们就需要用原来类继承我们抽取的类，用extends关键字进行调用，如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义学生类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"studay good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义工人类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(name + <span class="string">"work good"</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;<span class="comment">// 定义我们抽取的类</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常称Person（被继承的类）类为父类（也叫操类，基类），称Work和Student（继承类）称为子类。</p><h4 id="2-继承的优点"><a href="#2-继承的优点" class="headerlink" title="2. 继承的优点"></a>2. 继承的优点</h4><ul><li>提高代码复用性</li><li>让类与类产生关系，给多态提供了前提</li><li>java支持单继承，不支持多继承，对C++多继承进行改良</li></ul><blockquote><p>单继承：一个子类只能有一个直接父类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多继承：一个子类能有多个直接父类(为什么不能多继承)【不直接支持，会产生调用的不确定性】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当我们new c();调用show方法，调用的是A的还是B的？为了区分java对此进行了改良，不用多继承，用接口</p></blockquote><ul><li>java支持多层（多重继承）=&gt;传递性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-类的继承原则"><a href="#3-类的继承原则" class="headerlink" title="3. 类的继承原则"></a>3. 类的继承原则</h4><ul><li>单继承</li><li>继承具有传递性</li><li>继承不能循环</li><li>除Object类，所有类都有父类</li></ul><h4 id="4-继承的使用"><a href="#4-继承的使用" class="headerlink" title="4. 继承的使用"></a>4. 继承的使用</h4><p>当要使用一个继承体系时，如何使用 ?</p><blockquote><ol><li>查看该体系中顶层类，了解该体系的基本功能。</li><li>创建该体系中最子类的对象，完成功能的使用。</li></ol></blockquote><p>什么时候写继承？</p><blockquote><p>当类存在所属关系，就定义继承，A属于B,则A继承B</p></blockquote><h4 id="5-继承中的成员变量"><a href="#5-继承中的成员变量" class="headerlink" title="5. 继承中的成员变量"></a>5. 继承中的成员变量</h4><p>当本类局部和成员变量名相同时用this区分</p><p>当子父类中成员变量相同时用super区分</p><p>this和super的用法很相似</p><blockquote><p>this：代表一个本类对象的引用</p></blockquote><blockquote><p>super：代表一个父类空间</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.num + <span class="string">"……"</span> + <span class="keyword">super</span>.num);<span class="comment">//调用子类和父类的成员变量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>注意：子类不能直接访问父类的私有成员</u></p><h4 id="6-继承中的成员方法"><a href="#6-继承中的成员方法" class="headerlink" title="6. 继承中的成员方法"></a>6. 继承中的成员方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.show1();</span><br><span class="line">b.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当子父类中函数一样，将会运行子类的函数，称为<strong>覆盖操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line">b.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-1-函数的两个特性"><a href="#6-1-函数的两个特性" class="headerlink" title="6.1 函数的两个特性"></a>6.1 函数的两个特性</h6><ol><li>重载：同一个类</li><li>覆盖：子类中，覆盖也叫重写</li></ol><h6 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h6><ol><li>子类的方法覆盖父类方法时，子类的权限必须大于父类的权限</li><li>静态只能覆盖静态，或被静态覆盖</li></ol><h6 id="6-3-什么时候使用覆盖操作"><a href="#6-3-什么时候使用覆盖操作" class="headerlink" title="6.3 什么时候使用覆盖操作"></a>6.3 什么时候使用覆盖操作</h6><p>当对一个类进行子类扩展时，子类需要保留父类的功能声明，但要定义子类中功能的特有内容时，就用覆盖操作完成。(修改方法，添加功能)如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;<span class="comment">// 定义一个手机类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;<span class="comment">// 通话功能</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能</span></span><br><span class="line">System.out.println(<span class="string">"number"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newphone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能重写</span></span><br><span class="line">System.out.println(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"jpg"</span>);</span><br><span class="line">System.out.println(<span class="string">"number"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newphone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;<span class="comment">// 展示功能重写</span></span><br><span class="line">System.out.println(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"jpg"</span>);</span><br><span class="line"><span class="keyword">super</span>.show();<span class="comment">//调用父类show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-继承中的构造函数"><a href="#7-继承中的构造函数" class="headerlink" title="7. 继承中的构造函数"></a>7. 继承中的构造函数</h4><p>在子类构造对象时，访问子类构造函数时，父类也运行，在子类的构造函数中，有一个默认的隐士语句，super();调用父类中空参数的构造函数，无覆盖，无继承</p><blockquote><p>无参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu() &#123;</span><br><span class="line">System.out.println(<span class="string">"fu run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line"><span class="keyword">super</span>();<span class="comment">//隐士自带的调用父类空参数构造函数</span></span><br><span class="line">System.out.println(<span class="string">"zi run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"fu run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="number">4</span>);<span class="comment">//隐士自带的调用父类空参数构造函数</span></span><br><span class="line">System.out.println(<span class="string">"zi run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><u>子类的实例化过程，子类中的每个构造函数都会访问父类中空参数的构造函数</u></p><blockquote><ol><li>结果：AC AD</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> zi();</span><br><span class="line"><span class="keyword">new</span> zi(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">zi(<span class="keyword">int</span> x)&#123;</span><br><span class="line">System.out.println(<span class="string">"D"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>结果：BD</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Extendstext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> zi(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">fu()&#123;</span><br><span class="line">System.out.println(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line">fu(<span class="keyword">int</span> x) &#123;</span><br><span class="line">System.out.println(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">zi</span> <span class="keyword">extends</span> <span class="title">fu</span> </span>&#123;</span><br><span class="line">zi() &#123;</span><br><span class="line">System.out.println(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line">zi(<span class="keyword">int</span> x)&#123;</span><br><span class="line"><span class="keyword">super</span>(x);<span class="comment">//覆盖隐式super();</span></span><br><span class="line">System.out.println(<span class="string">"D"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么自子类实例化的时候，会调用父类构造方法？</p><blockquote><p>子类继承父类，所以子类有父类的属性，在使用父类内容前，要先看父类如何对自己的内容进行初始化，所以子类构造函数初始化的时候，必须调用父类构造函数，所以在子类的构造函数默认加了super();</p><p>如果父类中没有定义无参构造函数或者说是父类中定义了有参，没有定义无参，那么必须用super();来指定调用父类的构造函数</p><p>如果子类的构造函数中使用了this();调用本类的构造函数，那么super();就没有了，因为super和this只能定义在第一行，所以只能有一个，但是可以保证的是，子类中肯定会有其他构造方法来访问父类的构造函数。</p></blockquote><p><strong>注意：super();语句必须要定义在子类构造函数的第一行，因为父类的初始化要先完成</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-继承的概述&quot;&gt;&lt;a href=&quot;#1-继承的概述&quot; class=&quot;headerlink&quot; title=&quot;1. 继承的概述&quot;&gt;&lt;/a&gt;1. 继承的概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;继承就是子类继承父类的变量和方法，下面用代码解释一下：&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
  </entry>
  
</feed>
