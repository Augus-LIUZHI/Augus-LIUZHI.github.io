<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哈哈，你不行</title>
  
  <subtitle>人生苦短</subtitle>
  <link href="/Augus-LIUZHI.github.io/atom.xml" rel="self"/>
  
  <link href="https://augus-liuzhi.github.io/"/>
  <updated>2021-04-30T09:13:27.964Z</updated>
  <id>https://augus-liuzhi.github.io/</id>
  
  <author>
    <name>哈哈，你不行</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://augus-liuzhi.github.io/2021/04/30/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://augus-liuzhi.github.io/2021/04/30/网络编程/</id>
    <published>2021-04-30T08:02:44.079Z</published>
    <updated>2021-04-30T09:13:27.964Z</updated>
    
    <content type="html"><![CDATA[<p><strong>http响应码301和302代表什么，有什么区别？</strong></p><p>301：永久重定向</p><p>302：暂时重定向</p><p>区别：301对搜索引擎优化更加有利，302有被提示网络拦截的风险</p><p><strong>forward和redirect的区别</strong></p><p>forward是转发发生在服务器内部，redirect是重定向</p><p><strong>区别</strong></p><ol><li>forward的地址栏url不会发生变化，redirect地址栏url会发生变化</li><li>数据共享：forward可以共享Request的数据，redirect不能共享</li><li>效率： forward比redirect效率高</li></ol><p>TCP和UDP<strong>的区别</strong></p><ol><li>TCP是面向连接传输数据，UDP是面向无连接发送数据</li><li>TCP提供可靠的服务，UDP无法保证</li><li>TCP面向字节流，UDP面向报文</li><li>TCP数据传输慢，UDP数据传输快</li></ol><p>OSI<strong>的七层模型</strong></p><p>物理层</p><p>数据链路层</p><p>网络层</p><p>传输层</p><p>会话层</p><p>表示层</p><p>应用层</p><p>Get和Post的请求的区别</p><ol><li>get请求会被浏览器缓存，post请求不会</li><li>get请求传递参数有大小限制，post请求没有</li><li>post传输参数更加安全，get请求传递参数是以明文形式传递会显示在url上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;http响应码301和302代表什么，有什么区别？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;301：永久重定向&lt;/p&gt;
&lt;p&gt;302：暂时重定向&lt;/p&gt;
&lt;p&gt;区别：301对搜索引擎优化更加有利，302有被提示网络拦截的风险&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;forwa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://augus-liuzhi.github.io/2021/04/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://augus-liuzhi.github.io/2021/04/30/设计模式/</id>
    <published>2021-04-30T02:02:17.671Z</published>
    <updated>2021-04-30T09:13:37.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式的核心是分工，通过分工将对象与职责进行更细的划分，从而提高系统设计的可扩展性，使其更容易维护。</p><p>开放封闭原则：对扩展开放，对修改封闭。要添加新的逻辑，可以创建一个新的类，而不是在旧类上进行修改。</p><p>依赖倒置原则： 通常A类中调用B类的方法，是通过调用B的实现类进行实现的，而是依赖B的接口实现。</p><p>迪米特法则：又叫最少知识原则，一个类尽量与其他类发生关系，或者产生依赖，以此来使扩展更加容易。</p><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><blockquote><p>三种工厂模式：简单工厂模式，工厂方法模式，抽象工厂模式</p></blockquote><h6 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h6><blockquote><p>实质：工厂类根据输入参数的类型，动态的决定生成相对应参数类型的对象</p><p>也叫静态工厂模式</p></blockquote><p> <img src="https://upload-images.jianshu.io/upload_images/5982616-c6198fc410af7f20.png?imageMogr2/auto-orient/strip|imageView2/2/w/579/format/webp" alt="img"> </p><h6 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产品类A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AProduct</span>  <span class="keyword">extends</span>  <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A产品开始生产了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品类B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BProduct</span>  <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B产品开始生产了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">FactProduct</span><span class="params">(<span class="keyword">char</span> type)</span></span>&#123;</span><br><span class="line">        Product product=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'A'</span>:  product=<span class="keyword">new</span> AProduct(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>:  product=<span class="keyword">new</span> BProduct(); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product product = Factory.FactProduct(<span class="string">'A'</span>);</span><br><span class="line">        product.Create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">A产品开始生产了</span><br></pre></td></tr></table></figure><h6 id="实际用途"><a href="#实际用途" class="headerlink" title="实际用途"></a>实际用途</h6><p><strong>Spring中BeanFactory</strong></p><h6 id="BeanFactory实现原理"><a href="#BeanFactory实现原理" class="headerlink" title="BeanFactory实现原理"></a>BeanFactory实现原理</h6><p>Bean<strong>容器启动阶段</strong></p><ol><li>读取XML配置文件，将Bean元素的分别转换成一个BeanDefinition对象</li><li>通过BeanDefinitionRegistry将这些Bean注册到beanFactory中，保存到一个co’ncurrentHashMap</li><li>BeanDefinition注册到beanFactory之后，spring为我们提供了一个扩展切口，允许我们通过实现接口BeanFactoryPostProceessor在此处插入自定义代码。</li></ol><p>Bean<strong>的实例化阶段</strong></p><p>实例化阶段主要是通过反射或者CGlib对bean进行实例化。</p><h6 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h6><blockquote><p>实现方式：FactoryBean接口</p><p>实现原理：实现了FactoryBean接口的bean是一类叫做factory的bean,特点是：spring会在使用getBean的时候获得该bean时，会调用该bean的getobject()方法，所以返回的不是factory这个bean,而是这个bean.getObject()方法的返回值。</p></blockquote><p><strong>例子：</strong></p><blockquote><p>spring和mybatis的整合</p></blockquote><p><strong>举例代码：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:/Mapper/*.xml"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.afterPropertiesSet();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionFactory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>实现了BeanFactory的接口，所以返回值不是SqlSessionFactoryBean的实例，而是SqlSessionFactoryBean的getObject()的返回值。</p><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>Spring的依赖注入默认是单例模式</p><h6 id="设计要素"><a href="#设计要素" class="headerlink" title="设计要素"></a>设计要素</h6><ol><li>一个私有构造函数（确保只能自己创建实例）</li><li>一个静态变量（确保只有一个实例）</li><li>一个公共静态函数，提供对外的访问方式。</li></ol><h6 id="手写单例"><a href="#手写单例" class="headerlink" title="手写单例"></a>手写单例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式，线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">优点：提前实例化好一个实例，避免了线程不安全问题出现。</span><br><span class="line">缺点：先实例化好了，如果系统很少使用，或者不使用造成系统资源浪费。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式，线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缺点：多线程环境下，如果多个线程同时进入<span class="keyword">if</span>(singleton==<span class="keyword">null</span>),那么就会有多个线程执行singleton=<span class="keyword">new</span> Singleton()，造成多个对象实例化。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式，线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双重检查锁实现，线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">优点： 懒汉式线程安全</span><br><span class="line">缺点： 使用<span class="keyword">volatile</span>对性能造成一定影响。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态内部类，线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Single</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton Instance=<span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Single.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">优点：延迟了实例化，节约资源，切线程安全，性能也提高了。</span><br></pre></td></tr></table></figure><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p><strong>实现方式：</strong> SpringMVC中的适配器HandlerAdatper</p><p><strong>实现原理：</strong> HandlerAdatper根据Handler规则执行不同Handler</p><p><strong>实现过程：</strong>  DispatcherServlet根据HandlerMapping返回的handler，向HandlerAdatper发起请求，处理Handler。  HandlerAdapter根据规则找到对应的Handler并让其执行，执行完毕后Handler会向HandlerAdapter返回一个ModelAndView，最后由HandlerAdapter向DispatchServelet返回一个ModelAndView。 </p><p>装饰器模式</p><p>代理模式</p><p>观察者模式</p><p>策略模式</p><p>模板方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;设计模式的核心是分工，通过分工将对象与职责进行更细的划分，从而提高系统设计的可扩展性，使其更容易维护。&lt;/p&gt;
&lt;p&gt;开放封
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringSecurity</title>
    <link href="https://augus-liuzhi.github.io/2021/04/14/SpringSecurity/"/>
    <id>https://augus-liuzhi.github.io/2021/04/14/SpringSecurity/</id>
    <published>2021-04-14T02:56:38.995Z</published>
    <updated>2021-04-15T11:52:23.680Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-整合Security"><a href="#1-整合Security" class="headerlink" title="1 整合Security"></a>1 整合Security</h4><h6 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1 导入依赖"></a>1.1 导入依赖</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="1-2-指定用户名密码"><a href="#1-2-指定用户名密码" class="headerlink" title="1.2 指定用户名密码"></a>1.2 指定用户名密码</h6><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">   user:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">用户名</span></span><br><span class="line"><span class="attr">     password:</span> <span class="string">密码</span></span><br></pre></td></tr></table></figure><h4 id="2-自定义登陆"><a href="#2-自定义登陆" class="headerlink" title="2 自定义登陆"></a>2 自定义登陆</h4><h6 id="UserDetailsService接口"><a href="#UserDetailsService接口" class="headerlink" title="UserDetailsService接口"></a>UserDetailsService接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String var1)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="UserDetails接口"><a href="#UserDetails接口" class="headerlink" title="UserDetails接口"></a>UserDetails接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有权限</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"><span class="comment">//获取密码</span></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取用户名</span></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//账户是否过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//账户是否被锁定</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//凭证是否过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否可用</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义认证逻辑需要实现UserDetailsService接口，该接口返回一个 UserDetails接口，则需要返回UserDetail接口的实现类User</p><h6 id="User类"><a href="#User类" class="headerlink" title="User类"></a>User类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.core.userdetails;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(username, password, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, authorities);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>username: 前端传来的username</p><p>password: 密码是从数据库中查询出来的密码,此处只关心数据库中的密码，前端的密码框架会自动获取并且完成比较。</p><p>springSecurity会根据前端传来的密码，和数据库中的密码进行比较，如果相同认证成功，不过失败，则认证失败。</p><p>authorities:用户权限，不允许为null</p></blockquote><h6 id="PasswordEncoder接口"><a href="#PasswordEncoder接口" class="headerlink" title="PasswordEncoder接口"></a>PasswordEncoder接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把参数按照特定的规则进行解析，加密</span></span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(CharSequence var1)</span></span>;</span><br><span class="line"><span class="comment">//验证从存储中获取到的密码与编码后的提交的原始密码是否一致，第一个参数为前段密码，第二个为存储密码</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence var1, String var2)</span></span>;</span><br><span class="line"><span class="comment">//解析的密码能够再次解析，达到更安全的结果则返回true,否则返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BCryptPasswordEncoder类"><a href="#BCryptPasswordEncoder类" class="headerlink" title="BCryptPasswordEncoder类"></a>BCryptPasswordEncoder类</h6><blockquote><p>passwordEncoder接口的实现类</p><p>BCryptPasswordgEncoder是基于Hash算法的实现的单向加密</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Password</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PasswordEncoder passwordEncoder=<span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        <span class="comment">//对123进行加密</span></span><br><span class="line">        String encode = passwordEncoder.encode(<span class="string">"123"</span>);</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        <span class="comment">//判断1234是否和123加密后的匹配</span></span><br><span class="line">        <span class="keyword">boolean</span> matches=passwordEncoder.matches(<span class="string">"1234"</span>,encode);</span><br><span class="line">        System.out.println(matches);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ValidateCodeFilter类"><a href="#ValidateCodeFilter类" class="headerlink" title="ValidateCodeFilter类"></a>ValidateCodeFilter类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginFailHandle loginFailHandle;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//不是登陆请求不过滤</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"/login"</span>.equals(request.getServletPath())) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doValidateCode(request);</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ValidateCodeException e)&#123;</span><br><span class="line">            loginFailHandle.onAuthenticationFailure(request,response,e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"校验验证码失败"</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            request.getSession().removeAttribute(<span class="string">"verify_code"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doValidateCode</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取表单中提交验证码的值</span></span><br><span class="line">        String FormVerifyCode=request.getParameter(<span class="string">"imageCode"</span>);</span><br><span class="line">        String captcha= (String) request.getSession().getAttribute(<span class="string">"verify_code"</span>);</span><br><span class="line">        <span class="keyword">if</span>(FormVerifyCode==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码输入为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!FormVerifyCode.toLowerCase().equals(captcha.toLowerCase()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码输入错误"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ValidateCodeException类"><a href="#ValidateCodeException类" class="headerlink" title="ValidateCodeException类"></a>ValidateCodeException类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeException</span>  <span class="keyword">extends</span> <span class="title">AuthenticationException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidateCodeException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-整合Security&quot;&gt;&lt;a href=&quot;#1-整合Security&quot; class=&quot;headerlink&quot; title=&quot;1 整合Security&quot;&gt;&lt;/a&gt;1 整合Security&lt;/h4&gt;&lt;h6 id=&quot;1-1-导入依赖&quot;&gt;&lt;a href=&quot;#1-1-导
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jvm</title>
    <link href="https://augus-liuzhi.github.io/2021/04/13/JVM/"/>
    <id>https://augus-liuzhi.github.io/2021/04/13/JVM/</id>
    <published>2021-04-13T10:06:09.169Z</published>
    <updated>2021-05-04T03:13:58.294Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h4><h6 id="1-类的加载"><a href="#1-类的加载" class="headerlink" title="1. 类的加载"></a>1. 类的加载</h6><blockquote><p>类的加载是指将类的字节码文件中的二进制数据读取到内存中，将其放在运行时数据区方法区内，然后在堆区创建一个<code>java.lang.Class</code>对象，用来封装在方法区内的数据结构。</p></blockquote><ol><li>1 <strong>什么时候启动类加载器</strong></li></ol><p>类的预加载，<code>jvm</code>允许类加载器预料某个类将要被使用时就预先加载他，如果预加载的类有错误，只有当该类被主程序调用时才会报错。如果一直没有被主程序调用，则不会报错。</p><p>1.2 <strong>从哪里去加载.class文件</strong></p><ul><li><p>本地磁盘</p></li><li><p>网上加载.class文件</p></li><li><p>数据库</p></li><li><p>压缩文件（ZAR,jar）</p></li><li><p>从其他文件生成JSP</p></li></ul><h6 id="2-类的生命周期"><a href="#2-类的生命周期" class="headerlink" title="2. 类的生命周期"></a>2. 类的生命周期</h6><p>加载-&gt;验证-&gt;准备-&gt;解析-&gt;初始化-&gt;使用-&gt;卸载</p><p>类加载过程包括加载，验证，准备，解析，初始化</p><p>加载</p><p>加载是类加载机制的第一个过程，在加载阶段，虚拟机主要完成三件事</p><p>（1）通过一个类的全限定类名来获取其定义的二进制字节流。</p><p>（2）将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。</p><p>（3）在堆中生成一个代表这个类的Class对象，作为方法区中这些数据的访问结构</p><p>验证</p><p>作用：确保被加载类的正确性，主要完成四个阶段的验证</p><p>文本格式验证</p><p>元数据验证</p><p>字节码验证</p><p>符号引用验证</p><p>准备</p><p>为类变量分配内存并设置初始值</p><p>（1）类（static）变量：类变量会分配内存，但实例变量不会，实例变量会随着对象的实例化分配到堆中。</p><p>（2）默认初始化，不是赋值</p><p>解析</p><p>解析阶段主要是虚拟机将常量池中的符号引用转换为直接引用的过程。</p><p>符号引用：用一组符号描述所引用的目标，可以是任何形式的字面量，只要是能无歧义定位到目标就好。</p><p>直接引用：直接引用是可以指向目标的指针，相对偏移量或者一个能直接或间接定位到目标的句柄。和虚拟机实现的内存一样，不同虚拟机直接引用不同。</p><p>初始化</p><p>为类的静态变量赋值，在java中对类变量进行初始值设定有两种形式。</p><ul><li>声明类变量是指定初始值</li><li>静态代码块为类变量指定初始值</li></ul><p>JVM初始化步骤</p><ol><li>如果这个类还没有加载和连接，则程序先加载并连接该类</li><li>如果该类的父类没有被初始化，则先初始化其直接父类</li><li>如果类中有初始化语句，则系统依次执行这些初始化语句</li></ol><p>类的初始化时机：只有当该类的主动使用的时候才会导致类的初始化</p><ul><li><p>new </p></li><li><p>访问某个类或接口的静态变量，或者对该静态变量赋值</p></li><li><p>调用类的静态方法</p></li><li><p>反射</p></li><li><p>初始化某个类的子类，则父类也会被初始化</p><p>结束生命周期</p><p>执行<code>System.exit()</code>方法</p><p>程序正常执行</p><p>程序在执行过程中遇到了异常或错误</p><p>由于操作系统出现错误导致java虚拟机进程终止</p></li></ul><h6 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3. 类加载器"></a>3. 类加载器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        System.out.println(contextClassLoader);</span><br><span class="line">        System.out.println(contextClassLoader.getParent());</span><br><span class="line">        System.out.println(contextClassLoader.getParent().getParent());</span><br><span class="line">        System.out.println(contextClassLoader.getParent().getParent().getParent());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：</p><ol><li><code>sun.misc.Launcher$AppClassLoader@64fef26a</code></li><li><code>sun.misc.Launcher$ExtClassLoader@1ddd40f3</code></li><li><code>null</code>：bootstrap是由c写的，所以报null</li></ol></blockquote><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdl2.iteye.com%2Fupload%2Fattachment%2F0096%2F6392%2F487b4ab6-3b8c-3bbb-a0d7-2d5b75ca6000.png&amp;refer=http%3A%2F%2Fdl2.iteye.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1621740057&amp;t=f669b1056be590ced3ad75964f4687f2" alt></p><p>java提供了三种类加载器，应用程序都是由这三种类加载器相互配合加载的，如果有必要，可以加入自定义类加载器</p><h6 id="4-类加载的三种方式"><a href="#4-类加载的三种方式" class="headerlink" title="4. 类加载的三种方式"></a>4. 类加载的三种方式</h6><ol><li>命令行启动应用时由JVM初始化加载</li><li>通过<code>Class.forName()</code>方法动态加载：将字节码文件加载到<code>jvm</code>中，不会执行static中的内容，只有在<code>newInstance</code>的时候才会执行static</li><li>通过<code>ClassLoader.loadClass()</code>方法动态加载 : 将字节码文件加载到<code>jvm</code>中，还会对类进行解释，执行类中static块。</li></ol><h6 id="5-双亲委派模型"><a href="#5-双亲委派模型" class="headerlink" title="5. 双亲委派模型"></a>5. 双亲委派模型</h6><p> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。 </p><ol><li>当<code>AppClasLoader</code>加载一个class时，他首先不会自己加载，而是把类加载请求委派给<code>ExtClassLoader</code>去完成</li><li>当<code>ExtClassLoader</code>加载一个class文件，他首先不会自己加载，而是把类加载请求委派给<code>BootStrapClassLoader</code>去完成</li><li>当<code>BootStrapClassLoader</code>收到一个加载请求，他去所对应的目录查找该类，如果没有，则交给<code>ExtClassLoader</code>,他也会去对应目录去查找，如果没有，交给<code>AppClassLoader</code>,如果他也找不到抛出<code>classNotFound</code>异常</li></ol><p>双亲委派的意义：</p><ol><li>防止出现多份同样的字节码文件</li><li>保证java程序安全稳定运行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6-自定义类加载器"><a href="#6-自定义类加载器" class="headerlink" title="6. 自定义类加载器"></a>6. 自定义类加载器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 继承ClassLoader,重写finaClass方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonClassLoader</span>  <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>传入的是类的全限定性类名</li><li>不要重写loadClass会破坏双亲委派模型</li></ol><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201808%2F20180822154213701984.png&amp;refer=http%3A%2F%2Fimage.bubuko.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1621753376&amp;t=c0cd58d9b7655ba5aca1ba129f64d635" alt></p><p>内存结构主要分为三大部分：堆内存，方法区和栈</p><p>堆内存是jvm中最大一块由年轻代和老年代组成，年轻代内存分为Eden空间，From Survior空间，to Survivor空间，默认比例为8：1：1分配</p><p>方法区存储类信息，常量，静态变量等数据，是线程共享区域，为了和堆区分，又叫非堆</p><p>栈分为虚拟机栈和本地方法栈。</p><p>方法区和堆是线程共享区域，栈是线程私有的内存区域。</p><h6 id="1-Java堆（Heap）"><a href="#1-Java堆（Heap）" class="headerlink" title="1. Java堆（Heap）"></a>1. Java堆（Heap）</h6><p>java堆是jvm管理的内存中最大的一块，被所有线程所共享，所有的对象实例都在这里分配内存，堆是垃圾收集器管理的主要区域，因此有时称为GC堆，从内存回收角度看，现在大部分收集器都是采用分代收集算法，所以java堆中可以细分为新生代，老年代，新生代又可以分为eden,s1,s2空间。</p><h6 id="2-方法区（Method-Area）"><a href="#2-方法区（Method-Area）" class="headerlink" title="2. 方法区（Method Area）"></a>2. 方法区（Method Area）</h6><p>方法区和堆一样都是各个线程共享的内存区域，他用于存储已经被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码数据，在hotSpot虚拟机，很多人愿意把方法区称为永久代，本质上两者不等价。</p><h6 id="3-程序计数器"><a href="#3-程序计数器" class="headerlink" title="3. 程序计数器"></a>3. 程序计数器</h6><p>作用：当前线程所执行字节码行号指示器。</p><p>如果线程执行java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址，如果执行的native方法，这个计数器值则为空。</p><h6 id="4-虚拟机栈"><a href="#4-虚拟机栈" class="headerlink" title="4. 虚拟机栈"></a>4. 虚拟机栈</h6><p>和程序计数器一样，虚拟机栈也是线程私有的，它的生命周期和线程一样，虚拟机栈描述的是java方法执行的内存模型，每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用直到执行完毕的过程，就对应着一个栈帧在虚拟机栈中入栈和出栈的过程</p><h6 id="5-本地方法栈"><a href="#5-本地方法栈" class="headerlink" title="5. 本地方法栈"></a>5. 本地方法栈</h6><p>本地方法栈和虚拟机栈发挥作用一致，虚拟机栈为执行java方法，本地方法栈为虚拟机使用到的native方法服务，和<code>jvm</code>栈一样，也会抛出<code>stackoverflowerror</code>和<code>outofmemoryerror</code></p><h4 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h4><h6 id="1-对象存活的判断"><a href="#1-对象存活的判断" class="headerlink" title="1. 对象存活的判断"></a>1. 对象存活的判断</h6><p>引用计数器法：每个对象有一个引用计数属性，新增一个引用时计数+1，引用释放的时候计数-1，当计数为0时，可以回收。（无法解决循环依赖问题）</p><p>可达性分析：从GC Roots开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，则此对象不可达。</p><p>GC Roots包括：</p><ul><li>虚拟机栈中的引用对象</li><li>方法区中类静态属性实体引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI的引用</li></ul><h6 id="2-垃圾收集算法"><a href="#2-垃圾收集算法" class="headerlink" title="2. 垃圾收集算法"></a>2. 垃圾收集算法</h6><p>标记-清除算法</p><blockquote><p>算法分为标记和清除阶段，首先先标记所有要被清除的对象，在标记完所有要清除的对象后，统一进行回收所有标记对象。</p><p>缺点：1 效率低 2 产生大量不连续的内存碎片</p></blockquote><p>复制算法</p><blockquote><p>将内存容量分成两个大小相等的两块，每次只使用其中的一块，当这一块用完以后，如果还有存活的对象，就将剩下存活的对象复制到另一块上面，然后把用完的那块内存空间一次清理掉。</p><p>缺点：将内存缩小为原来的一半，复制长期存活的对象导致效率低</p></blockquote><p>标记-压缩（整理）算法</p><blockquote><p>将所有存活的对象移动到一端，直接清除存活对象便捷以外的内存</p></blockquote><p>分代收集算法</p><blockquote><p>将java堆分为老年代和新生代，根据各个年代的特点采用适当的收集算法，在新生代中只有少量对象存活，采用复制算法，在老年代中，对象长期存活，没有额外的空间对他进行分配担保，就必须使用标记-清除或标记-整理算法进行回收。</p></blockquote><h6 id="3-垃圾收集器"><a href="#3-垃圾收集器" class="headerlink" title="3. 垃圾收集器"></a>3. 垃圾收集器</h6><p><strong>3.1 serial收集器</strong></p><blockquote><p>串行收集器最古老，最稳定以及效率最高，可能会产生停顿，只使用一个线程去回收，新生代，老年代采用串行收集器，新生代复制算法，老年代标记-压缩，垃圾收集的过程会stop the world(服务暂停)</p></blockquote><p> <strong>3.2 parNew收集器</strong></p><blockquote><p>parNew收集器是serial的多线程版本。新生代并行，老年代串行，新生代复制算法，老年代标记-整理算法</p></blockquote><p><strong>3.3 parallel收集器</strong></p><blockquote><p>parallel scavenge收集器类似于parNew，parallel更关注于系统的吞吐量，可以通过参数来打开自适应调节策略，虚拟机会根据当前系统运行的情况收集性能监控信息，动态调整这些参数，以提供合适的停顿时间或者最大吞吐量，也可以通过参数控制gc时间不大于多少毫秒或者比例，新生代复制算法，老年代标记-整理算法</p></blockquote><p><strong>3.4 parallel old 收集器</strong></p><blockquote><p>parallel old 是parallel scavenge收集器的老年代版本，使用多线程和标记-整理算法</p></blockquote><p><strong>3.5 CMS收集器</strong></p><blockquote><p>获取最短停顿时间为目标的收集器，目前很大一部分的java应用都集中互联网或B/S系统的服务端，这类服务尤其重视服务的响应速度，希望系统停顿时间最短，给用户带来较好的体验。</p><ul><li>初始标记  —&gt;停止服务 标记一下GC roots能够直接关联到的对象，速度很快</li><li>并发标记 进行GC roots Trancing 的过程</li><li>重新标记 —&gt;停止服务 修改并发标记期间，因用户程序运作而导致标记产生变动的那一部分对象</li><li>并发清除 这个阶段停顿时间一般会比初始标记阶段稍长，但远比并发标记时间短。</li></ul><p>收集器线程都可以与用户线程一起工作，所以总体来说，CMS收集器的内存回收过程与用户线程一起并发执行。老年代收集器，新生代使用parNew</p><p>优点：并发收集，低停顿</p><p>缺点：产生大量碎片，并发阶段降低吞吐量</p></blockquote><p><strong>3.6 G1收集器</strong></p><blockquote><p>特点：</p><ul><li>空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片，分配大对象时不会因为无法找到连续空间提前出发下一次GC</li><li>可预测停顿,降低停顿时间是G1和CMS共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集的时间不得超过N毫秒</li></ul><p>收集步骤：</p><ol><li>标记阶段    首先初始标记，这个阶段是停顿的，并且会触发一次普通mintor gc</li><li>Root region Scanning  程序运行过程会回收survivor区，这一过程必须在young gc之前完成</li><li>Concurrent marking：在整个堆中进行并发标记，此过程可能被young gc中打断，在并发标记阶段，若该区域中的对象都是垃圾，立刻回收该区域，同时并发阶段会计算每个区域的对象的存活性</li><li>Remark 再标记，再标记阶段用来收集并发阶段产生新的垃圾。</li><li>copy/clean up 多线程清楚失活对象</li></ol></blockquote><h4 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h4><h6 id="1-JDK监控故障处理命令"><a href="#1-JDK监控故障处理命令" class="headerlink" title="1. JDK监控故障处理命令"></a>1. JDK监控故障处理命令</h6><blockquote><p>jps  [options] [hostid]</p><p>jstat [options]  LVMID [interval] [count]  </p></blockquote><h6 id="2-获取GC日志"><a href="#2-获取GC日志" class="headerlink" title="2. 获取GC日志"></a>2. 获取GC日志</h6><ol><li>使用命令查看 jstat -gc</li><li>在容器中设置相关参数打印日志 -xx: printGc</li></ol><h6 id="3-GC分析工具"><a href="#3-GC分析工具" class="headerlink" title="3. GC分析工具"></a>3. GC分析工具</h6><blockquote><p>GChisto</p></blockquote><h6 id="4-JVM监控分析工具"><a href="#4-JVM监控分析工具" class="headerlink" title="4. JVM监控分析工具"></a>4. JVM监控分析工具</h6><blockquote><p>jconsole</p></blockquote><h6 id="5-内存溢出和内存泄漏"><a href="#5-内存溢出和内存泄漏" class="headerlink" title="5. 内存溢出和内存泄漏"></a>5. 内存溢出和内存泄漏</h6><p><strong>内存溢出</strong>：程序在申请内存时，没有足够空间供其使用出现out of memory</p><p><strong>内存泄漏</strong>： 程序申请内存后，无法释放已经申请的内存空间，一次内存泄漏危害可以忽略，但是内存泄漏堆积，无论多少内存，迟早会被占光，导致内存溢出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;类的加载机制&quot;&gt;&lt;a href=&quot;#类的加载机制&quot; class=&quot;headerlink&quot; title=&quot;类的加载机制&quot;&gt;&lt;/a&gt;类的加载机制&lt;/h4&gt;&lt;h6 id=&quot;1-类的加载&quot;&gt;&lt;a href=&quot;#1-类的加载&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="https://augus-liuzhi.github.io/2021/04/12/axios/"/>
    <id>https://augus-liuzhi.github.io/2021/04/12/axios/</id>
    <published>2021-04-12T01:15:30.422Z</published>
    <updated>2021-04-15T08:18:39.593Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p>基于promise对ajax的一种封装。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h6 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h6 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#默认方式，默认使用Get方式请求 </span><br><span class="line">axios(&#123;</span><br><span class="line">        url:<span class="string">'https://autumnfish.cn/api/joke'</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Get请求，无参数请求</span><br><span class="line">axios(&#123;</span><br><span class="line">        url:<span class="string">'https://autumnfish.cn/api/joke'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Get请求，有参数请求</span><br><span class="line">axios(&#123;</span><br><span class="line">        url:<span class="string">'https://autumnfish.cn/api/joke'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">            id:<span class="string">'1'</span>,</span><br><span class="line">            name:<span class="string">'haha'</span>,</span><br><span class="line">            ………………</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Post请求，有参数</span><br><span class="line">axios(&#123;</span><br><span class="line">        url:<span class="string">'https://autumnfish.cn/api/joke'</span>,</span><br><span class="line">    method:<span class="string">'post'</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">            id:<span class="string">'1'</span>,</span><br><span class="line">            name:<span class="string">'haha'</span>,</span><br><span class="line">            ………………</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h4><h6 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Get无参数请求</span><br><span class="line">axios.get(<span class="string">'https://autumnfish.cn/api/joke111'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">#Get有参数请求</span><br><span class="line"> axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>, &#123;<span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="number">3</span>&#125;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h6 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#post请求，无参数 </span><br><span class="line">axios.post(<span class="string">'https://autumnfish.cn/api/joke'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">#post请求，有参数，使用data传递参数，后台要使用@RequestBody注解</span><br><span class="line">axios.post(<span class="string">'https://autumnfish.cn/api/joke'</span>,<span class="string">"id=1"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">        axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>),</span><br><span class="line">        axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>),</span><br><span class="line">    ]).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(res[<span class="number">1</span>]);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">=====</span><br><span class="line"> axios.all([</span><br><span class="line">        axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>),</span><br><span class="line">        axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>),</span><br><span class="line">    ]).then(</span><br><span class="line">        axios.spread(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(res1);</span><br><span class="line">            <span class="built_in">console</span>.log(res2);</span><br><span class="line">        &#125;)</span><br><span class="line">    ).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"timeout"</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL=<span class="string">'https://autumnfish.cn/api'</span>;</span><br><span class="line">  axios.defaults.timeout=<span class="number">5</span>;</span><br><span class="line"><span class="comment">//全局配置基础上，进行网络请求</span></span><br><span class="line">  axios.get(<span class="string">'/joke'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newVar =axios.create(&#123;</span><br><span class="line">   baseeURL:<span class="string">'https://autumnfish.cn/api'</span>,</span><br><span class="line">   timeout:<span class="number">5</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"> newVar.get(<span class="string">'/joke'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(res);</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>请求方向的拦截，成功请求，失败请求。</p><p>响应方向的拦截。</p><p>主要用于在网络请求的时候，发起请求或者响应时对操作进行相应的进行处理。</p><p>发起请求时可以添加网页加载的动画，token认证的时候，强制登陆。</p><p>响应的时候进行相应的数据处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#请求方向 </span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"进入拦截器"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;<span class="comment">//放行</span></span><br><span class="line">  &#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请求失败"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br><span class="line">#响应方向</span><br><span class="line"> axios.interceptors.response.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"进入拦截器"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(config);</span><br><span class="line">    <span class="keyword">return</span> config;<span class="comment">//放行</span></span><br><span class="line">  &#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"响应失败"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  axios.get(<span class="string">'https://autumnfish.cn/api/joke'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Axios&quot;&gt;&lt;a href=&quot;#Axios&quot; class=&quot;headerlink&quot; title=&quot;Axios&quot;&gt;&lt;/a&gt;Axios&lt;/h4&gt;&lt;p&gt;基于promise对ajax的一种封装。&lt;/p&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://augus-liuzhi.github.io/2021/03/31/Docker/"/>
    <id>https://augus-liuzhi.github.io/2021/03/31/Docker/</id>
    <published>2021-03-31T08:34:09.845Z</published>
    <updated>2021-04-06T03:19:16.729Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><p><strong>环境： Centos7</strong></p><h6 id="1-设置仓库"><a href="#1-设置仓库" class="headerlink" title="1. 设置仓库"></a>1. 设置仓库</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h6 id="2-安装Docker引擎"><a href="#2-安装Docker引擎" class="headerlink" title="2. 安装Docker引擎"></a>2. 安装Docker引擎</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>默认安装最新版</p><p>如果安装指定版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看docker的版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash">安装指定版本号的docker</span></span><br><span class="line">yum install docker-ce-&lt;版本号&gt; docker-ce-cli-&lt;版本号&gt; containerd.io</span><br></pre></td></tr></table></figure><h6 id="3-运行Docker"><a href="#3-运行Docker" class="headerlink" title="3. 运行Docker"></a>3. 运行Docker</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h6 id="4-Hello-world"><a href="#4-Hello-world" class="headerlink" title="4. Hello-world"></a>4. Hello-world</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>显示<code>Hello from Docker!</code>到这就安装成功了</p><h6 id="5-docker镜像加速"><a href="#5-docker镜像加速" class="headerlink" title="5. docker镜像加速"></a>5. docker镜像加速</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/deamon.json </span><br><span class="line"><span class="meta">#</span><span class="bash">编辑此文件，写deamon.json为阿里云镜像源，为镜像加速</span></span><br><span class="line">&#123; </span><br><span class="line">"registry-mirrors": ["https://alzgoonw.mirror.aliyuncs.com"] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h4><h6 id="1-查看已有的镜像列表"><a href="#1-查看已有的镜像列表" class="headerlink" title="1. 查看已有的镜像列表"></a>1. 查看已有的镜像列表</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h6 id="2-查找镜像"><a href="#2-查找镜像" class="headerlink" title="2. 查找镜像"></a>2. 查找镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名</span><br></pre></td></tr></table></figure><h6 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3. 下载镜像"></a>3. 下载镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名</span><br></pre></td></tr></table></figure><h6 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4. 删除镜像"></a>4. 删除镜像</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure><h6 id="5-运行容器"><a href="#5-运行容器" class="headerlink" title="5. 运行容器"></a>5. 运行容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 后台运行 --name 给容器起个名 -p 容器端口映射到外部端口 镜像:版本</span><br></pre></td></tr></table></figure><h6 id="6-关闭容器"><a href="#6-关闭容器" class="headerlink" title="6. 关闭容器"></a>6. 关闭容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器id</span><br></pre></td></tr></table></figure><h6 id="7-运行以后再次启动容器"><a href="#7-运行以后再次启动容器" class="headerlink" title="7. 运行以后再次启动容器"></a>7. 运行以后再次启动容器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure><h6 id="8-进入容器后台"><a href="#8-进入容器后台" class="headerlink" title="8. 进入容器后台"></a>8. 进入容器后台</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure><h6 id="9-退出交互模式"><a href="#9-退出交互模式" class="headerlink" title="9. 退出交互模式"></a>9. 退出交互模式</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;环境： Centos7&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;1-设置仓
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot数据访问</title>
    <link href="https://augus-liuzhi.github.io/2021/03/31/springboot%E6%95%B4%E5%90%88%E6%95%B0%E6%8D%AE/"/>
    <id>https://augus-liuzhi.github.io/2021/03/31/springboot整合数据/</id>
    <published>2021-03-31T07:57:18.008Z</published>
    <updated>2021-03-31T07:58:16.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot数据访问"><a href="#SpringBoot数据访问" class="headerlink" title="SpringBoot数据访问"></a>SpringBoot数据访问</h1><h4 id="数据访问jdbc"><a href="#数据访问jdbc" class="headerlink" title="数据访问jdbc"></a>数据访问jdbc</h4><p><strong>1. 导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url:  jdbc:mysql:<span class="comment">//localhost:3306/ssm0306?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>3. 原理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration</span><br><span class="line">DataSourceConfiguration根据properties文件配置数据源信息，根据环境中有哪些类型，并自动选取类型，也可以自定义类型</span><br><span class="line">常见的数据源类型：</span><br><span class="line">    oracle.ucp.jdbc.PoolDataSource</span><br><span class="line">    org.apache.commons.dbcp2.BasicDataSource</span><br><span class="line">    com.zaxxer.hikari.HikariDataSource</span><br><span class="line">    org.apache.tomcat.jdbc.pool.DataSource</span><br><span class="line">自定义类型：</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createDataSource</span><span class="params">(DataSourceProperties properties, Class&lt;? extends DataSource&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties.initializeDataSourceBuilder().type(type).build();</span><br><span class="line">    &#125;</span><br><span class="line">通过initializeDataSourceBuilder()创建自定义的数据源类型</span><br><span class="line"><span class="keyword">public</span> DataSourceBuilder&lt;?&gt; initializeDataSourceBuilder() &#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create(<span class="keyword">this</span>.getClassLoader()).type(<span class="keyword">this</span>.getType()).driverClassName(<span class="keyword">this</span>.determineDriverClassName()).url(<span class="keyword">this</span>.determineUrl()).username(<span class="keyword">this</span>.determineUsername()).password(<span class="keyword">this</span>.determinePassword());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>4. 启动执行SQL脚本</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">配置文件</span></span><br><span class="line"><span class="string">将schema-*.sql放到resource路径下，*代表任意名</span></span><br><span class="line"><span class="attr">schema:</span> <span class="attr">classpath:schema-*.sql</span></span><br><span class="line"><span class="string">连接的是mysql数据库</span></span><br><span class="line"><span class="attr">   platform:</span> <span class="string">mysql</span></span><br><span class="line">   <span class="string">初始化数据源：alwaya全部数据源</span></span><br><span class="line"><span class="attr">   initialization-mode:</span> <span class="string">always</span></span><br><span class="line">   <span class="string">数据库脚本文件的分隔符</span></span><br><span class="line"><span class="attr">   separator:</span> <span class="string">$</span></span><br><span class="line">   <span class="string">执行完第一次以后，将此配置删除，否则再次启动项目，会重现创建表格导致启动失败。</span></span><br></pre></td></tr></table></figure><p><strong>5. 操作数据库</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Spring提供的JdbcTemplate操作数据库</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource, JdbcProperties properties)</span> </span>&#123;</span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        Template template = properties.getTemplate();</span><br><span class="line">        jdbcTemplate.setFetchSize(template.getFetchSize());</span><br><span class="line">        jdbcTemplate.setMaxRows(template.getMaxRows());</span><br><span class="line">        <span class="keyword">if</span> (template.getQueryTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">          jdbcTemplate.setQueryTimeout((<span class="keyword">int</span>)template.getQueryTimeout().getSeconds());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">只要有数据源，和数据源信息，就可以自动注入直接使用jdbcTemplate</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dep"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">"select  * from </span></span><br><span class="line"><span class="string">                                                                   dep"</span>);</span><br><span class="line">        <span class="keyword">return</span> maps.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h4><p><strong>1. 导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 配置文件</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span>  <span class="attr">jdbc:mysql://localhost:3306/ssm0306?useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><p><strong>3. 配置数据库监控</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getStatViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ServletRegistrationBean statViewServlet = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">       <span class="comment">//配置监控页面登陆的用户名和密码</span></span><br><span class="line">       statViewServlet.addInitParameter(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">       statViewServlet.addInitParameter(<span class="string">"loginPassword"</span>,<span class="string">"admin"</span>);</span><br><span class="line">       <span class="comment">//配置登陆监控网站的黑白名单</span></span><br><span class="line">       statViewServlet.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">       statViewServlet.addInitParameter(<span class="string">"deny"</span>, <span class="string">"192.168.43.179"</span>);</span><br><span class="line">       <span class="comment">//是否允许重置</span></span><br><span class="line">       statViewServlet.addInitParameter(<span class="string">"resetEnable"</span>,<span class="string">"false"</span>);</span><br><span class="line">       <span class="keyword">return</span> statViewServlet;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">getStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean statFilter=<span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">//添加过滤地址</span></span><br><span class="line">        statFilter.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">//设置过滤规则</span></span><br><span class="line">        statFilter.addInitParameter(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/</span></span><br><span class="line"><span class="string">                                    *,"</span>);</span><br><span class="line">        <span class="keyword">return</span> statFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h4><p><strong>1. 导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>1.1 注解配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from dep where depid=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeparmentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartmentServiceImpl</span> <span class="keyword">implements</span> <span class="title">DeparmentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">selectById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentServiceImpl departmentService;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/deparment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentService.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.2 xml配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  config-location:</span> <span class="attr">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mybatis/mapper/*.xml</span></span><br><span class="line"><span class="string">指定主配置文件和mapper的映射文件</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ccut.springboot06.springboot06data.Mapper.DepartmentMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.ccut.springboot06.springboot06data.Bean.Department"</span>&gt;</span></span><br><span class="line">    select * from dep where depid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>@Mapper 配置类为mapper类</p><p>@MapperScan(value = “扫描包名”)</p></blockquote><h4 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/ssm0306?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line">      <span class="comment">#自动生成表</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line">      <span class="comment">#控制台显示Sql</span></span><br><span class="line"><span class="attr">      show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties</span>(value = &#123; <span class="string">"hibernateLazyInitializer"</span>, <span class="string">"handler"</span> &#125;)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//主键自增长</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//指定列</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>  <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">SelectUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">SelectUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.getOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        User one = userService.SelectUserById(id);</span><br><span class="line">        <span class="keyword">return</span> one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><p>导入Repository两种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式1</span></span><br><span class="line"><span class="comment"> * 继承JpaRepository给出实体类，以及主键类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>  <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式2</span></span><br><span class="line"><span class="comment"> * 继承给出实体类，以及主键类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RepositoryDefinition</span>(domainClass = User.class,idClass = Integer.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot数据访问&quot;&gt;&lt;a href=&quot;#SpringBoot数据访问&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot数据访问&quot;&gt;&lt;/a&gt;SpringBoot数据访问&lt;/h1&gt;&lt;h4 id=&quot;数据访问jdbc&quot;&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringCloudAlibaba</title>
    <link href="https://augus-liuzhi.github.io/2021/03/02/SpringCloudAlibaba/"/>
    <id>https://augus-liuzhi.github.io/2021/03/02/SpringCloudAlibaba/</id>
    <published>2021-03-02T06:44:59.961Z</published>
    <updated>2021-03-31T08:08:12.030Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://augus-liuzhi.github.io/2021/02/19/redis/"/>
    <id>https://augus-liuzhi.github.io/2021/02/19/redis/</id>
    <published>2021-02-19T02:30:26.628Z</published>
    <updated>2021-03-31T08:07:07.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h4><p>基于内存运行，并支持持久化，高性能的NoSql数据库，redis中的数据大部分都是存储在内存中，适合存储频繁访问数据量比较少的数据。</p><h4 id="Redis特点"><a href="#Redis特点" class="headerlink" title="Redis特点"></a>Redis特点</h4><ul><li><p>支持数据持久化</p></li><li><p>支持多种数据结构</p></li><li><p>支持数据备份</p></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>Centos7下安装redis-6.0.6</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://download.redis.io/releases/redis-6.0.6.tar.gz</span><br><span class="line">$ tar xzf redis-6.0.6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.0.6</span><br><span class="line">$ make MALLOC=libc</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><blockquote><p>make install 将redis安装目录下src目录中生成的一列可执行文件拷贝到/usr/local/bin,类似于放到环境变量中，可以在任意目录使用redis命令</p></blockquote><h6 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h6><ul><li>前台启动：redis-server</li><li>后台启动：redis-server &amp;</li><li>指定配置文件启动：redis-server redis.conf  &amp;</li></ul><h6 id="关闭redis"><a href="#关闭redis" class="headerlink" title="关闭redis"></a>关闭redis</h6><ul><li>kill -9 pid </li><li>redic-cli shutdown</li></ul><h6 id="客户端链接Redis"><a href="#客户端链接Redis" class="headerlink" title="客户端链接Redis"></a>客户端链接Redis</h6><p>redis-cli </p><p>redis-cli -h 127.0.0.1 -p 6379</p><h6 id="退出客户端"><a href="#退出客户端" class="headerlink" title="退出客户端"></a>退出客户端</h6><ul><li>exit</li><li>quit</li></ul><h4 id="基本常识"><a href="#基本常识" class="headerlink" title="基本常识"></a>基本常识</h4><ol><li><p>测试Redis性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark</span><br></pre></td></tr></table></figure></li><li><p>查看redis是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">显示PONG则为正常</span><br></pre></td></tr></table></figure></li><li><p>查看redis服务器统计信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line"><span class="comment">#查看所有信息</span></span><br><span class="line">127.0.0.1:6379&gt; info</span><br><span class="line"><span class="comment">#查看指定信息</span></span><br><span class="line">127.0.0.1:6379&gt; info [信息段]</span><br></pre></td></tr></table></figure></li><li><p>redis的数据库实例</p><p>作用类似于mysql的数据库实例，redis中的数据库实例只能由redis服务来创建和维护，开发人员没有权限修改和创建数据库实例，默认情况下，redis会自动创建16个数据库实例，并且给这些数据库实例进行编号，从0开始，一直到15，通过使用编号来使用数据库，可以通过配置文件，指定redis自动创建数据库的个数，redis每个数据库实例本身占用的存储空间是很少的，所以也不会造成太多浪费。redis客户端默认使用0号库，可以使用select index切换数据库。</p></li><li><p>查询数据中有几条数据：dbsize</p></li><li><p>查询数据库中所有的key：key *</p></li><li><p>清空当前数据库：flushdb</p></li><li><p>清空所有数据库：flshall</p></li><li><p>查看redis中的配置信息：config get * 查看redis中指定信息：config get [port]</p></li></ol><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>字符串</p><p>列表</p><p>集合</p><p>哈希</p><p>有序集合</p><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><ol><li><p>redis中有关key的操作命令</p><ul><li><p>keys  通配符 ：查看数据库中key</p><blockquote><p>keys * 查看数据库中所有的key</p><p>keys k* 查看数据库中所有k开头后面有0个或多个字符的key</p><p>keys k?  查看数据库中K开头，后面仅有一个字符的key</p><p>keys k[0-9] 查看数据库中k开头，后面仅有一个字符，包含0-9的字符</p></blockquote></li></ul></li><li><p>判断key是否存在数据库中</p><blockquote><p>exists key 如果存在返回1，如果不存在返回0</p></blockquote></li><li><p>移动k到指定数据库</p><blockquote><p>move key index</p><p>key 为指定key</p><p>index为指定的数据库</p></blockquote></li><li><p>查看key的剩余ttl时间</p><blockquote><p>ttl keyname</p><p>返回值 -2 key不存在</p><p>返回值-1 当前key未设置ttl时间</p></blockquote></li><li><p>设置最大生存ttl时间</p><blockquote><p>EXPIRE keyname ttl时间</p></blockquote></li><li><p>查看key的数据类型</p><blockquote><p>type  keyname</p><p>重命名key</p><p>rename oldkey newkey</p><p>删除key</p><p>del keyname</p></blockquote></li></ol><h4 id="String操作命令"><a href="#String操作命令" class="headerlink" title="String操作命令"></a>String操作命令</h4><p>设置指定key的值(如果key已经存在，会覆盖以前的value)</p><p>set  key value</p><p>获取指定key的值</p><p>get key</p><p>追加指定key的value(返回追加之后的字符串的长度，如果key不存在，则新创建一个key value)</p><p>append key value</p><p>获取指定key的长度</p><p>strlen key</p><p>指定key+1运算</p><p>incr key</p><p>指定key加指定增量运算</p><p>incr key increment</p><p>指定key-1运算</p><p>decr key</p><p>指定key减指定减量运算</p><p>decrby key decrment</p><p>加减运算必须是数值</p><p>字符串截取</p><p>getrange  key  startindex  endindex</p><p>修改部分字符串</p><p>setrange key startindex value</p><p>设置值的同时设置最大生命周期</p><p>setex key second value</p><p>当key不存在时设置值,key存在则设置失败</p><p>setnx key value</p><p>批量设置数据</p><p>mset key1 v1 key2 v2 key3 v3</p><p>批量获取key的值</p><p>mget k1 k2 k3</p><p>批量设置key不存在时再设置,有一个失败，全部失败</p><p>msetnx</p><h4 id="list操作命令"><a href="#list操作命令" class="headerlink" title="list操作命令"></a>list操作命令</h4><p>单个key,多个有序的value,最左侧是表头，最右侧是表尾。每个元素都有下标，从0开始，也可以用负数表示，从表尾开始，元素的在列表中的顺序，由放入顺序决定。</p><p>将1个或多个值放入往表头插入</p><p>lpush key v1 v2 v3</p><p>获取列表中指定区间下标的元素</p><p>将1个或多个值放入往表尾插入</p><p>rpush key v1 v2 v3</p><p>删除表头的第一个元素并返回该元素</p><p>lpop key</p><p>删除表尾的元素，并返回该元素</p><p>rpop key</p><p>获取列表的长度</p><p>llen key</p><p>通过索引获取列表的值</p><p>lindex key index</p><p>移除并获取列表的第一个元素</p><p>blpop key timeout</p><p>移除并获取列表的最后一个元素</p><p>brpop key timeout</p><p>在列表的元素前或后插入元素</p><p>linsert key before/after 指定元素 value</p><p>给已存在的列表元素</p><p>rpushx key value</p><p>移除列表中某些数据</p><p>lrem key count value</p><p>count&gt;0 从列表左侧移除count个数据</p><p>count&lt;0从列表右侧移除count个数据</p><p>修剪列表，删除不在区间之内的元素</p><p>LRANGE key  startindex  endindex</p><h4 id="Set操作命令"><a href="#Set操作命令" class="headerlink" title="Set操作命令"></a>Set操作命令</h4><p>单key有多个无序的value,一个key有多个value,value之间没有顺序，并且不能重复</p><p>将一个或多个存储到set</p><p>sadd key value</p><p>获取指定集合中的元素</p><p>SMEMBERS key</p><p>判断元素是否存在集合中,存在返回1，不存在返回0</p><p>SISMEMBER key  value</p><p>获取集合的长度</p><p>SCARD key</p><p>移除指定集合中的一个或多个元素,返回成功移除的个数</p><p>srem key vlaue value value</p><p>随机获取一个或多个元素</p><p>srandmember  key  count</p><p>随机移除一个或多个元素</p><p>spop key   count</p><p>将一个集合的元素移动到另一个集合</p><p>smove  source destination value</p><p>求差集key1中有，key2中没有</p><p>sdiff  key1 key2……</p><p>获取集合的交集</p><p>sinter key1 key2</p><p>获取集合的并集</p><p>sunion key1 key2</p><h4 id="hash操作命令"><a href="#hash操作命令" class="headerlink" title="hash操作命令"></a>hash操作命令</h4><p>单key:field-value</p><p>将一个或多个单key:field-value设置到哈希表中</p><p>hset stu1001 id 1001</p><p>获取指定哈希表中的指定filed的值</p><p>hget  key filed</p><p>批量获取哈希表中filed的值</p><p>hmget key filedname1   filedname2……</p><p>获取指定哈希表所有filed和value</p><p>hgetall key</p><p>删除哈希表中一个filed或多个filed</p><p>hdel key filedname1 filedname2</p><p>获取哈希表中所有filed的个数</p><p>hlen key</p><p>判断哈希表中是否存在某一个filed</p><p>hexists key files</p><p>获取哈希表中所有filed</p><p>hkeys key</p><p>获取哈希表中所有的value</p><p>hvals key</p><p>对指定哈希表中指定filed值进行整数加法运算</p><p>hincreby key filed increment</p><p>对指定哈希表中指定filed值进行浮点数加法运算</p><p>hincrebyfloat key filed increment</p><p>设置filed-value,当其不存在时设置</p><p>hsetnx key filed value</p><h4 id="Zset操作命令"><a href="#Zset操作命令" class="headerlink" title="Zset操作命令"></a>Zset操作命令</h4><p>有序集合,元素有序，且不能重复，zset每个元素都会关联一个分数，分数可以重复，redis通过分数的大小进行排序，有序集合都有顺序，每个元素都有一个下标，和list排序规则不一样，list是放入顺序，zset是分数大小排序。</p><p>将一个或多个memeber及其分数值加入有序集合</p><p>zadd  key score value score value</p><p>获取指定有序集合中指定下标区间的元素</p><p>zrange  key srartindex endindex withscores</p><p>获取指定分数区间的有序集合的元素</p><p>zrangebyscore key min max withscores </p><p>删除指定有序集合元素</p><p>zrem key  value</p><p>获取有序集合中元素的个数</p><p>zcard zset01</p><p>获取指定有序集合中指定的元素排名</p><p>zrank key value,排名从0开始</p><p>获取指定分数区间的有序集合的个数</p><p>zcount key startscore endscore</p><p>获取指定元素的分数</p><p>zscore key vlaue</p><h4 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h4><p><strong>网络配置</strong></p><p>port: 指定redis服务所使用的端口，默认使用6379</p><p>bind: 配置客户端连接redis服务时，所使用的ip地址</p><p>redis-cli -h 192.168.43.179 -p 6379 </p><p>tcp-keepalieve：连接保活策略</p><p><strong>常规配置</strong></p><p>loglevel:配置日志级别，开发阶段配置debug,上线配置notcing和warning</p><p>logfile:指定日志文件，redis运行过程会输出一些日志信息，默认情况信息会输出到控制台，我们可以使用logfile配置</p><p>database 16：默认配置16个数据库实例</p><p><strong>安全配置</strong></p><p>requirepass：设置redis服务时，所使用的密码，默认不使用。此参数protected-mode=yes时才起作用。</p><p>一旦设置密码验证，客户端连接redis服务时，必须使用密码连接，redis-cli -a pwd -h ip -p port</p><h4 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h4><p>redis是内存数据库，他把数据存储到内存中，高效访问的同时带来了安全问题–宕机导致数据丢失，redis提供了持久化策略，适当的时候把内存的数据持久化到硬盘，每次redis服务启动时，都可以把磁盘上的数据再次加载到内存中使用。</p><p>RDB策略：在指定时间间隔内，redis服务执行指定次数写操作，会触发一次持久化操作。默认使用。</p><p>save second change   多少秒，进行多少次写操作，触发持久化。</p><p>dbfilename：持久化文件名称</p><p>dir : ./   持久化文件保存目录</p><p>缺点：最后写的数据可能会丢失，不能完全持久化。</p><p>AOF策略：采用操作日志来记录每一次写操作。每次redis服务启动时，都会执行一遍操作。效率低，默认不开启。</p><p>appendonly ：配置是否开启AOF策略</p><p>appendfilename：配置操作日志文件</p><p>小结：根据数据的特点决定开启哪种策略，一般情况开启rdb足够</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事务：把一组数据库写操作放到一起执行，保证操作的原子性，要么同时成功，要么同时失败。</p><p>redis事务，允许把一组redis命令放在一起执行，把命令进行序列化，按照顺序依次执行，保证部分原子性。</p><p>multi:标记一个事务的开启</p><p>exec:执行队列中事务</p><p>redis事务只能保证部分原子性，一组命令中，进入事务队列如果发生错误，则该事务的所用命令都不执行，保证事务的原子性。</p><p>一组命令中，进入队列过程正常，但是在执行队列任务命令发生了错误，则只会影响该命令的错误，不会影响其他命令执行，所以不能保证事务的原子性。</p><p>discard：放弃压入队列的命令。清楚所有已经压入队列中的命令，结束整个事务。</p><p>watch：监控某一个key-vlaue,当事务执行过程中，key-value发生改变，则事务放弃执行，否则正常执行。</p><p>unwatch : 放弃监控所有键</p><h4 id="消息发布与订阅"><a href="#消息发布与订阅" class="headerlink" title="消息发布与订阅"></a>消息发布与订阅</h4><p>redis订阅频道，消息的发布者往频道上发布消息，所有订阅频道的客户端都能收到消息。</p><p>subscribe：订阅一个或多个频道消息 subscribe ch1 ch2，psubscribe也可以订阅，订阅的频道名支持通配符。</p><p>publish : 将消息发送到指定频道。</p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>主少从多，主写从读，读写分离，主写同步复制到从。</p><p>搭建一主而从</p><p>搭建3台redis服务，用一个redis模拟三台redis服务，修改redis的配置文件，提供三份配置文件。</p><p>分别启动三个redis服务</p><p>查看redis服务的角色，info</p><p>先往6379写数据，三台redis服务相互独立，互不影响。</p><p>设置主从关系，设置6379主机，6380，6381从机</p><p>全量复制：主从关系确定，会将主机上已有的数据全部复制到从机。</p><p>增量复制 :  主机写数据，会自动同步到从机</p><p>主写从读，读写分离：6380和6381上写数据报错。</p><p>主机宕机：关闭6379服务，从机原地待命。</p><p>主机恢复：无影响</p><p>从机宕机：关闭6380服务，主机少一个从机，其他从机不变。</p><p>从机恢复：必须重新设置主从关系</p><p>从机上位：关闭主机，断开主从关系，SLAVEOF no one,重新设置主从关系</p><p>原主机恢复：可恢复成主机，也可以变成主机，从机也可以有从机，一台主机有多个从机，一个从机也可以有多个从机，主机数据会依次传递数据。</p><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><ol><li>搭建一主二从集群架构</li><li>提供一个哨兵配置文件 : redis_sentinel.conf</li><li>启动哨兵服务</li><li>主机宕机，哨兵自动选举从机上位</li><li>之前主机恢复</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h4 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务Gateway</title>
    <link href="https://augus-liuzhi.github.io/2021/02/02/GateWay/"/>
    <id>https://augus-liuzhi.github.io/2021/02/02/GateWay/</id>
    <published>2021-02-02T01:49:34.978Z</published>
    <updated>2021-03-31T08:04:24.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><blockquote><p>SpringCloud Gateway 使用的webflux中的reactor-netty响应式编程组件，底层使用的Netty通讯框架</p></blockquote><p>路由</p><p>断言</p><p>过滤</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gateway&quot;&gt;&lt;a href=&quot;#Gateway&quot; class=&quot;headerlink&quot; title=&quot;Gateway&quot;&gt;&lt;/a&gt;Gateway&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SpringCloud Gateway 使用的webflux中的react
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hystrix</title>
    <link href="https://augus-liuzhi.github.io/2021/01/28/Hystrix/"/>
    <id>https://augus-liuzhi.github.io/2021/01/28/Hystrix/</id>
    <published>2021-01-28T05:50:43.484Z</published>
    <updated>2021-03-31T08:05:01.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HYSTRIX"><a href="#HYSTRIX" class="headerlink" title="HYSTRIX"></a>HYSTRIX</h1><h6 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h6><p>服务器压力剧增，根据当前服务和流量对一些服务和页面进行有策略的降级，来保证服务器的高可用。</p><p>当出现问题时，它直接返回一个提前准备好的fallback(退路)错误处理信息，这样虽然提供了一个有损的服务但是保证了整个系统的稳定性和可用性。</p><h6 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h6><p>为了防止整个系统雪崩，暂停对该服务的调用。</p><h6 id="熔断VS降级"><a href="#熔断VS降级" class="headerlink" title="熔断VS降级"></a>熔断VS降级</h6><p>相同点：</p><ul><li>目标一致都是从可用性和可靠性出发，为了防止系统崩溃</li><li>用户体验类似，最终都是让用户体验到某些功能暂时不可用</li></ul><p>不同点：</p><p>触发原因不同，服务熔断是下游服务故障导致的，服务降级是保证服务的高可用</p><h6 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h6><p>秒杀高并发等操作，为了保证服务不被大量请求冲垮，通过限制请求速度来保护系统</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HYSTRIX&quot;&gt;&lt;a href=&quot;#HYSTRIX&quot; class=&quot;headerlink&quot; title=&quot;HYSTRIX&quot;&gt;&lt;/a&gt;HYSTRIX&lt;/h1&gt;&lt;h6 id=&quot;服务降级&quot;&gt;&lt;a href=&quot;#服务降级&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ribbon</title>
    <link href="https://augus-liuzhi.github.io/2021/01/26/Ribbon/"/>
    <id>https://augus-liuzhi.github.io/2021/01/26/Ribbon/</id>
    <published>2021-01-26T05:53:05.541Z</published>
    <updated>2021-03-31T08:07:23.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><h4 id="Ribbon-1"><a href="#Ribbon-1" class="headerlink" title="Ribbon"></a>Ribbon</h4><p>客户端负载均衡工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ribbon&quot;&gt;&lt;a href=&quot;#Ribbon&quot; class=&quot;headerlink&quot; title=&quot;Ribbon&quot;&gt;&lt;/a&gt;Ribbon&lt;/h1&gt;&lt;h4 id=&quot;Ribbon-1&quot;&gt;&lt;a href=&quot;#Ribbon-1&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>服务发现Consul</title>
    <link href="https://augus-liuzhi.github.io/2021/01/25/Consul/"/>
    <id>https://augus-liuzhi.github.io/2021/01/25/Consul/</id>
    <published>2021-01-25T07:48:55.414Z</published>
    <updated>2021-03-31T08:02:50.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h4 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h4><p>Consul是一个服务网格解决方案，它提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些特性中的每一个都可以根据需要单独使用，也可以一起用于构建全服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。领事船与一个简单的内置代理，使一切工作的开箱即用，但也支持第三方代理集成，如特使。</p><h4 id="key-features"><a href="#key-features" class="headerlink" title="key features"></a>key features</h4><p><strong>Service Discovery</strong></p><p><strong>Health Checking</strong></p><p><strong>KV Store</strong></p><p><strong>Secure Service Communication</strong></p><p><strong>Multi Datacenter</strong></p><p>启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  -p 8500:8500/tcp --name consulconsul  consul agent -server -ui -bootstrap-expect=1 -client=0.0.0.0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Consul&quot;&gt;&lt;a href=&quot;#Consul&quot; class=&quot;headerlink&quot; title=&quot;Consul&quot;&gt;&lt;/a&gt;Consul&lt;/h1&gt;&lt;h4 id=&quot;consul&quot;&gt;&lt;a href=&quot;#consul&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ZooKeeper</title>
    <link href="https://augus-liuzhi.github.io/2021/01/25/Zookeeper/"/>
    <id>https://augus-liuzhi.github.io/2021/01/25/Zookeeper/</id>
    <published>2021-01-25T06:03:20.909Z</published>
    <updated>2021-03-31T08:10:13.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Zookeeper&quot;&gt;&lt;a href=&quot;#Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper&quot;&gt;&lt;/a&gt;Zookeeper&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务注册与发现中心Eureka</title>
    <link href="https://augus-liuzhi.github.io/2021/01/22/Eureka/"/>
    <id>https://augus-liuzhi.github.io/2021/01/22/Eureka/</id>
    <published>2021-01-22T06:33:55.182Z</published>
    <updated>2021-03-31T08:03:51.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><h4 id="1-Eureka简介"><a href="#1-Eureka简介" class="headerlink" title="1. Eureka简介"></a>1. Eureka简介</h4><p>Eureka是一种基于REST服务，主要用在AWS云，用于定位服务，实现中间层服务器的负载平衡和故障转移。</p><p>在微服务中，Eureka是微服务的注册与发现中心，主管服务的注册与发现，使用简单的服务标识符，consumer微服务想要访问provider微服务,不需要修改服务调用的配置文件。</p><h4 id="2-Eureka两大组件"><a href="#2-Eureka两大组件" class="headerlink" title="2. Eureka两大组件"></a>2. Eureka两大组件</h4><p><strong>1.Eureka Server</strong></p><p>提供服务注册服务，各个微服务启动后的会在Eureka Server进行服务的注册，Eureka Server会将各个可用微服务节点存储到服务注册表中。</p><p><strong>Eureka Server功能</strong></p><ol><li><p>服务注册</p><p>服务提供者启动后，会通过Eureka Client向Eureka Server注册信息，Eureka Server会存储该服务信息，Eureka Server内部有两层缓存机制来维护整个注册表。</p></li><li><p>提供注册表</p><p>服务消费者调用服务时，如果Eureka Client没有缓存注册表，会从Eureka Server获取最新的注册表</p></li><li><p>同步状态</p><p>Eureka Client通过注册，心跳机制和Eureka Server同步当前客户端的状态</p></li></ol><p><strong>2.Eureka Client</strong></p><p>是一个java客户端，用于简化和Eureka Server交互，客户端同时具有一个内置的，使用轮询算法的负载均衡器。客户端启动后会向Eureka Server发送心跳，默认周期30S,如果Eureka Server在3个心跳周期内(默认90S)没有收到该客户端发送心跳，Eureka Server将会在服务列表删除该节点信息。</p><p><strong>3.创建Eureka Server</strong></p><ol><li><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">  <span class="comment">#是否向注册中心注册自己</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从Eureka Server获取注册实例信息</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#设置注册中心地址</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">#开启Eureka Server服务</span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>4. 创建Eureka Client</strong></p><ol><li><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span>  <span class="attr">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">#开启Eureka Client客户端</span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-Eureka架构"><a href="#3-Eureka架构" class="headerlink" title="3. Eureka架构"></a>3. Eureka架构</h4><p><img src="/Augus-LIUZHI.github.io/2021/01/22/Eureka/Hexo/hexo\blog\source\_posts\Eureka\1611304226726.png" alt="1611304226726"></p><p>Eureka Server：表示注册中心集群</p><p>us-east-xxx：表示集群所在的区域</p><p>Application Service：表示服务提供者</p><p>Application Client：表示服务消费者</p><p>Eureka Client：表示Eureka客户端</p><h4 id="4-Eureka原理"><a href="#4-Eureka原理" class="headerlink" title="4. Eureka原理"></a>4. Eureka原理</h4><p>eureka server可以集群部署，多个节点之间会进行（异步方式）数据同步，保证数据最终一致性，Eureka Server作为一个开箱即用的服务注册中心，提供的功能包括：服务注册、接收服务心跳、服务剔除、服务下线等。需要注意的是，Eureka Server同时也是一个Eureka Client，在不禁止Eureka Server的客户端行为时，它会向它配置文件中的其他Eureka Server进行拉取注册表、服务注册和发送心跳等操作。</p><h4 id="5-自我保护"><a href="#5-自我保护" class="headerlink" title="5. 自我保护"></a>5. 自我保护</h4><p>默认情况下，如果 Eureka Server 在一定的 90s 内没有接收到某个微服务实例的心跳，会注销该实例。但是在微服务架构下服务之间通常都是跨进程调用，网络通信往往会面临着各种问题，比如微服务状态正常，网络分区故障，导致此实例被注销。</p><p>Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。当个别客户端出现心跳失联时，则认为是客户端的问题，剔除掉客户端；当 Eureka 捕获到大量的心跳失败时，则认为可能是网络问题，进入自我保护机制；当客户端心跳恢复时，Eureka 会自动退出自我保护机制。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="6-Eureka和Zookeeper对比"><a href="#6-Eureka和Zookeeper对比" class="headerlink" title="6. Eureka和Zookeeper对比"></a>6. Eureka和Zookeeper对比</h4><h6 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h6><p>一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡。在此Zookeeper保证的是CP, 而Eureka则是AP。</p><h6 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h6><p>zookeeper优先保证CP，当服务发生故障会进行leader的选举，整个期间服务处在不可用状态，如果选举时间过长势必会大幅度降低性能，另外就用途来说zookeeper偏向于服务的协调，当然含有注册中心的作用。</p><p>eureka优先保证AP, 即服务的节点各个都是平等的，没有leader不leader一说， 当服务发生故障时，其余的节点仍然可以提供服务，因此在出现故障时，性能表现优于zookeeper，但是可能会造成数据不一致的情况。</p><p><strong>Eureka作为单纯的服务注册中心来说要比zookeeper更加“专业”，因为注册服务更重要的是可用性，我们可以接受短期内达不到一致性的状况。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eureka&quot;&gt;&lt;a href=&quot;#Eureka&quot; class=&quot;headerlink&quot; title=&quot;Eureka&quot;&gt;&lt;/a&gt;Eureka&lt;/h1&gt;&lt;h4 id=&quot;1-Eureka简介&quot;&gt;&lt;a href=&quot;#1-Eureka简介&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="https://augus-liuzhi.github.io/2021/01/20/SpringCloud-md/"/>
    <id>https://augus-liuzhi.github.io/2021/01/20/SpringCloud-md/</id>
    <published>2021-01-20T08:44:15.467Z</published>
    <updated>2021-03-31T08:08:42.907Z</updated>
    
    <content type="html"><![CDATA[<p>springcloud环境搭建</p><ol><li><p>创建项目</p><p><img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612160411466.png" alt="1612160411466"></p><p>名称为springcloud002，删除SRC文件夹，隐藏无关紧要的其他文件。</p><p><img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612160511459.png" alt="1612160511459"></p><p>​    工程下只有POM.xml文件。</p></li><li><p>修改pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud002<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父项目传递依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定依赖版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot-version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">spring.boot-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父项目管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        springcloud和springboot版本的选择参见官网。</p><p>​        <code>https://spring.io/projects/spring-cloud#learn</code></p><p><img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612160844297.png" alt="1612160844297"></p><p>​    <img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612160899361.png" alt="1612160899361"></p></li><li><p>添加子工程</p><p>通过maven创建Module</p><p><img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612161094697.png" alt="1612161094697"></p><p><img src="/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\SpringCloud-md\1612161160301.png" alt="1612161160301"></p></li></ol><p>​            </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;springcloud环境搭建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建项目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Augus-LIUZHI.github.io/2021/01/20/SpringCloud-md/Hexo/hexo\blog\source\_posts\Spri
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://augus-liuzhi.github.io/2021/01/14/RabbitMQ/"/>
    <id>https://augus-liuzhi.github.io/2021/01/14/RabbitMQ/</id>
    <published>2021-01-14T10:47:43.151Z</published>
    <updated>2021-03-31T08:06:44.348Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h4><h6 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h6><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610621395119.png" alt="1610621395119"></p><blockquote><p>P : 生产者，发送消息</p><p>queue : 队列</p><p>C : 消费者，接收消息</p></blockquote><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610621574940.png" alt="1610621574940"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">publisher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException,</span></span><br><span class="line"><span class="function">    InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.工厂模式创建连接</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);<span class="comment">//设置ip，默认localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置端口号，默认5672</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);<span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);<span class="comment">//设置密码</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);<span class="comment">//设置虚拟机</span></span><br><span class="line">        <span class="comment">//3.获取Connection</span></span><br><span class="line">        Connection connectionPub=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.获取channel</span></span><br><span class="line">        Channel channel=connectionPub.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        queue:队列名,如果不存在就会创建指定的队列名</span></span><br><span class="line"><span class="comment">        durable:是否持久化，默认是false,当mq重启以后还在</span></span><br><span class="line"><span class="comment">        exclusive:</span></span><br><span class="line"><span class="comment">                是否独占，只能有一个消费者监听这个队列</span></span><br><span class="line"><span class="comment">                当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        autoDelete:是否自动删除,当没有consumer的时候，自动删除</span></span><br><span class="line"><span class="comment">        arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"hello"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.发送消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, BasicProperties props, </span></span><br><span class="line"><span class="comment">        byte[] body)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        exchange:交换机,简单模式默认为”“</span></span><br><span class="line"><span class="comment">        routingKey:路由名称,简单模式默认和队列名字一致</span></span><br><span class="line"><span class="comment">        props:配置信息</span></span><br><span class="line"><span class="comment">        body:发送消息的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String body=<span class="string">"hello rabbitMQ"</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>,<span class="string">"hello"</span>,<span class="keyword">null</span>,body.getBytes());</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connectionPub.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610621660429.png" alt="1610621660429"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.工厂模式创建连接</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);<span class="comment">//设置ip，默认localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置端口号，默认5672</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);<span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);<span class="comment">//设置密码</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.获取Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.获取channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        queue:队列名,如果不存在就会创建指定的队列名</span></span><br><span class="line"><span class="comment">        durable:是否持久化，默认是false,当mq重启以后还在</span></span><br><span class="line"><span class="comment">        exclusive:</span></span><br><span class="line"><span class="comment">                是否独占，只能有一个消费者监听这个队列</span></span><br><span class="line"><span class="comment">                当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        autoDelete:是否自动删除,当没有consumer的时候，自动删除</span></span><br><span class="line"><span class="comment">        arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"hello"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6 接收消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultConsumer defaultConsumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回调方法，当收到消息后会自动执行</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 标识</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 获取一些信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 真实数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"consumerTag"</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">"Exchange"</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">"RoutingKey"</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">"properties"</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">"body"</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"hello"</span>,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="work-queue工作队列模式"><a href="#work-queue工作队列模式" class="headerlink" title="work queue工作队列模式"></a>work queue工作队列模式</h6><p>work queus 与简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个对列的消息</p><p>应用场景： 任务过重或者任务过多情况下使用工作队列提高任务处理速度</p><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610622835270.png" alt="1610622835270"></p><p>C1 C2都是消费者</p><p>一个队列对应多个消费者，消费者之间对于同一消息是竞争关系</p><p>两个消费者对于任务过重或者任务过多情况下使用工作队列提高任务处理速度</p><p>P</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">work_queues</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, </span></span><br><span class="line"><span class="function">    InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.工厂模式创建连接</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);<span class="comment">//设置ip，默认localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置端口号，默认5672</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);<span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);<span class="comment">//设置密码</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.获取Connection</span></span><br><span class="line">        Connection connectionPub=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.获取channel</span></span><br><span class="line">        Channel channel=connectionPub.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        queue:队列名,如果不存在就会创建指定的队列名</span></span><br><span class="line"><span class="comment">        durable:是否持久化，默认是false,当mq重启以后还在</span></span><br><span class="line"><span class="comment">        exclusive:</span></span><br><span class="line"><span class="comment">                是否独占，只能有一个消费者监听这个队列</span></span><br><span class="line"><span class="comment">                当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        autoDelete:是否自动删除,当没有consumer的时候，自动删除</span></span><br><span class="line"><span class="comment">        arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.发送消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, BasicProperties props, </span></span><br><span class="line"><span class="comment">        byte[] body)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        exchange:交换机,简单模式默认为”“</span></span><br><span class="line"><span class="comment">        routingKey:路由名称,workqueue模式默认和队列名字一致</span></span><br><span class="line"><span class="comment">        props:配置信息</span></span><br><span class="line"><span class="comment">        body:发送消息的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//发送多条消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String body=<span class="string">"hello rabbitMQ"</span>+i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>,<span class="string">"work_queues"</span>,<span class="keyword">null</span>,body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connectionPub.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">work_queues1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.工厂模式创建连接</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);<span class="comment">//设置ip，默认localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置端口号，默认5672</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);<span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);<span class="comment">//设置密码</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.获取Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.获取channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        queue:队列名,如果不存在就会创建指定的队列名</span></span><br><span class="line"><span class="comment">        durable:是否持久化，默认是false,当mq重启以后还在</span></span><br><span class="line"><span class="comment">        exclusive:</span></span><br><span class="line"><span class="comment">                是否独占，只能有一个消费者监听这个队列</span></span><br><span class="line"><span class="comment">                当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        autoDelete:是否自动删除,当没有consumer的时候，自动删除</span></span><br><span class="line"><span class="comment">        arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6 接收消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultConsumer defaultConsumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回调方法，当收到消息后会自动执行</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 标识</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 获取一些信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 真实数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">               </span><br><span class="line">                System.out.println(<span class="string">"body"</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">work_queues2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.工厂模式创建连接</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);<span class="comment">//设置ip，默认localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置端口号，默认5672</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);<span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);<span class="comment">//设置密码</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.获取Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.获取channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">        Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">        queue:队列名,如果不存在就会创建指定的队列名</span></span><br><span class="line"><span class="comment">        durable:是否持久化，默认是false,当mq重启以后还在</span></span><br><span class="line"><span class="comment">        exclusive:</span></span><br><span class="line"><span class="comment">                是否独占，只能有一个消费者监听这个队列</span></span><br><span class="line"><span class="comment">                当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">        autoDelete:是否自动删除,当没有consumer的时候，自动删除</span></span><br><span class="line"><span class="comment">        arguments：参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6 接收消息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        (String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DefaultConsumer defaultConsumer=<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 回调方法，当收到消息后会自动执行</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> consumerTag 标识</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> envelope 获取一些信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> properties 配置信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> body 真实数据</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">               </span><br><span class="line">                System.out.println(<span class="string">"body"</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Pub-Sub订阅模式"><a href="#Pub-Sub订阅模式" class="headerlink" title="Pub/Sub订阅模式"></a>Pub/Sub订阅模式</h6><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610623362450.png" alt="1610623362450"></p><p>在订阅模式中，多了一个Exchange角色,多个消费者接收不同队列的信息</p><p>Exchange类型：</p><p>fanout广播</p><p>Direct:定向</p><p>Topic通配符</p><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pubsubMode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.channel声明交换机</span></span><br><span class="line">        String exchangeName=<span class="string">"firstExchange"</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String exchange, BuiltinExchangeType type, boolean durable, boolean </span></span><br><span class="line"><span class="comment">         autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, </span><br><span class="line">                                BuiltinExchangeType.FANOUT,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.channel声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"queue3"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(<span class="string">"queue4"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7.交换机绑定队列</span></span><br><span class="line">        channel.queueBind(<span class="string">"queue3"</span>,exchangeName,<span class="string">""</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueBind(<span class="string">"queue4"</span>,exchangeName,<span class="string">""</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String hello=<span class="string">"hello,RabbitMQ1111"</span>;</span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">""</span>,<span class="keyword">null</span>,hello.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pubsubModeCousumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//3.创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String exchangeName=<span class="string">"firstExchange"</span>;</span><br><span class="line">        channel.exchangeDeclare(exchangeName, </span><br><span class="line">                                BuiltinExchangeType.FANOUT,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        String queue3=<span class="string">"queue3"</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(queue3,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue3,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pubhubModeConsumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//3.创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        String queue4=<span class="string">"queue4"</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(queue4,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> </span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue4,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Routing路由模式"><a href="#Routing路由模式" class="headerlink" title="Routing路由模式"></a>Routing路由模式</h6><ol><li><p>队列和交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey(路由key)</p></li><li><p>消息的发送发在向Exchange发送消息的时候也要指定消息的RoutingKey</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的routingKey和消息的RoutingKey保持一致才会接收到消息</p></li></ol><p><img src="/Augus-LIUZHI.github.io/2021/01/14/RabbitMQ/Hexo/hexo\blog\source\_posts\RabbitMQ\1610689619683.png" alt="1610689619683"></p><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingModelPublisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"direct_logs"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME1 = <span class="string">"RoutingQueue1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME2 = <span class="string">"RoutingQueue2"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.channel声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, </span><br><span class="line">                                BuiltinExchangeType.DIRECT,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.channel声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME1,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME2,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7.交换机绑定队列</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME1,EXCHANGE_NAME,<span class="string">"RoutingKey1"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME2,EXCHANGE_NAME,<span class="string">"RoutingKey2"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME2,EXCHANGE_NAME,<span class="string">"RoutingKey3"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME2,EXCHANGE_NAME,<span class="string">"RoutingKey4"</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String data1=<span class="string">"RoutingKey1从队列1来"</span>;</span><br><span class="line">        String data2=<span class="string">"RoutingKey2从队列2来"</span>;</span><br><span class="line">        String data3=<span class="string">"RoutingKey3从队列2来"</span>;</span><br><span class="line">        String data4=<span class="string">"RoutingKey4从队列2来"</span>;</span><br><span class="line">        String data5=<span class="string">"RoutingKey5从队列2来"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"RoutingKey1"</span>,<span class="keyword">null</span>,data1.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"RoutingKey2"</span>,<span class="keyword">null</span>,data2.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"RoutingKey2"</span>,<span class="keyword">null</span>,data3.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"RoutingKey2"</span>,<span class="keyword">null</span>,data4.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"RoutingKey2"</span>,<span class="keyword">null</span>,data5.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingModelConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME1 = <span class="string">"RoutingQueue1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME2 = <span class="string">"RoutingQueue2"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME1,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, DeliverCallback deliverCallback, CancelCallback </span></span><br><span class="line"><span class="comment">         cancelCallback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME1,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pubhubModeConsumer2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//3.创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        String queue4=<span class="string">"queue4"</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(queue4,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.handleDelivery(consumerTag, envelope, properties, body);</span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue4,<span class="keyword">true</span>,defaultConsumer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Topics通配符模式"><a href="#Topics通配符模式" class="headerlink" title="Topics通配符模式"></a>Topics通配符模式</h6><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicModelPublisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"Topic_logs"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME1 = <span class="string">"TopicQueue1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME2 = <span class="string">"TopicQueue2"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.channel声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,</span><br><span class="line">                                BuiltinExchangeType.TOPIC,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6.channel声明队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME1,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME2,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7.交换机绑定队列</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME1,EXCHANGE_NAME,<span class="string">"#.error"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME2,EXCHANGE_NAME,<span class="string">"*.order"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME2,EXCHANGE_NAME,<span class="string">"*.*"</span>);</span><br><span class="line">        <span class="comment">//8.发送消息</span></span><br><span class="line">        String data1=<span class="string">"my.error"</span>;</span><br><span class="line">        String data2=<span class="string">"123456.order"</span>;</span><br><span class="line">        String data3=<span class="string">"topic"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"#.error"</span>,<span class="keyword">null</span>,data1.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"*.order"</span>,<span class="keyword">null</span>,data2.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">"*.*"</span>,<span class="keyword">null</span>,data3.getBytes());</span><br><span class="line">        <span class="comment">//9.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicModelConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME1 = <span class="string">"TopicQueue1"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete, </span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME1,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, </span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, DeliverCallback deliverCallback, CancelCallback </span></span><br><span class="line"><span class="comment">         cancelCallback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME1,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>消费者2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicModelConsumer2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME2 = <span class="string">"TopicQueue2"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取创建connection的的工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2.设置工厂参数</span></span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setHost(<span class="string">"192.168.43.179"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"virtual"</span>);</span><br><span class="line">        <span class="comment">//3.创建Connection</span></span><br><span class="line">        Connection connection=factory.newConnection();</span><br><span class="line">        <span class="comment">//4.创建channel</span></span><br><span class="line">        Channel channel=connection.createChannel();</span><br><span class="line">        <span class="comment">//5.声明队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, boolean durable, boolean exclusive, boolean autoDelete,</span></span><br><span class="line"><span class="comment">         Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME2,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6.接收消息</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"body "</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (String queue, DeliverCallback deliverCallback, CancelCallback </span></span><br><span class="line"><span class="comment">         cancelCallback)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME2,defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息的可靠性传递"><a href="#消息的可靠性传递" class="headerlink" title="消息的可靠性传递"></a>消息的可靠性传递</h4><p>confirm模式</p><p>return回退模式</p><h4 id="Consumer-ACK"><a href="#Consumer-ACK" class="headerlink" title="Consumer ACK"></a>Consumer ACK</h4><p>ack(Acknowledge) 确认，表示消费端收到消息后的确认方式。</p><p>三种方式：</p><ul><li>自动确认 acknowledge=”none”</li><li>手动确认 acknowledge=”manual”</li><li>根据异常确认 acknowledge=”auto”</li></ul><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.43</span><span class="number">.179</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment">#开启消费者手动确认</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      direct:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"TopicQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(Message message, Channel channel)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.接收转换消息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">            <span class="comment">//2.处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">"处理业务"</span>);</span><br><span class="line">            <span class="comment">//int i=3/0;</span></span><br><span class="line">            <span class="comment">//3.签收消息</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * (long deliveryTag, boolean multiple)</span></span><br><span class="line"><span class="comment">             * deliveryTag: 标签</span></span><br><span class="line"><span class="comment">             * multiple: true签收所有消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//3.1 手动签收消息</span></span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"手动签收成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//3.2 如果签收失败</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * (long deliveryTag, boolean multiple, boolean requeue)</span></span><br><span class="line"><span class="comment">             * requeue:设置为true，消息会重回队列，broker会重新发送给消费者这条消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"手动签收失败，正在回退到队列"</span>);</span><br><span class="line">                </span><br><span class="line">channel.basicNack(message.getMessageProperties().getDeliveryTag(),<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                System.out.println(<span class="string">"消息回退失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息可靠性总结</p><ol><li>持久化<ul><li>exchange持久化</li><li>queue持久化</li><li>message持久化</li></ul></li><li>生产方确认Confirm</li><li>消费方确认ACK</li><li>Broker高可用</li></ol><h4 id="消费端限流"><a href="#消费端限流" class="headerlink" title="消费端限流"></a>消费端限流</h4><ol><li>consumer ack为手动确认</li><li>配置属性prefetch</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">    virtual-host:</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.43</span><span class="number">.179</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    listener:</span></span><br><span class="line"><span class="attr">      direct:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">        prefetch:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">      simple:</span></span><br><span class="line"><span class="attr">        acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="attr">        prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"TopicQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">    InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        <span class="comment">//channel.basicAck(message.getMessageProperties().getDeliveryTag(),true);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>存活时间，过期时间</p><p>当消息到达存活时间，还没有被消费，会被自动清除</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列设置过期时间</p><p>队列消息过期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(<span class="string">"queue"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Queue <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QueueName).ttl(<span class="number">100000</span>).build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>消息过期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(Producer.ExchangeName, <span class="string">"boot.aaaa"</span>, meaaage, <span class="keyword">new</span></span><br><span class="line">                              MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                <span class="comment">//设置消息过期时间</span></span><br><span class="line">                message.getMessageProperties().setExpiration(<span class="string">"5000"</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>队列消息过期后，会将队列里所有的消息移除</p><p>消息过期后，会将在队列顶端的消息进行判断是否过期，过期的话移除</p><p>两者同时设置，按照时间最短的</p><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><p>DLX dead Letter Exchange(死信交换机)，当消息成为dead message后，可以被重新发往另一个交换机，这个交换机就是DLX.</p><p>消息成为死信的三种情况</p><ol><li>队列消息长度到达限制</li><li>消费者拒收消息，basicNack不在把消息重新放入目标队列，requeue=FALSE</li><li>原队列存在消息过期设置，消费到达超时时间未被消费。</li></ol><p><strong>创建死信交换机和队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ExchangeName=<span class="string">"topicExchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DlxExchangeName=<span class="string">"DlxTopicExchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QueueName=<span class="string">"TopicQueue"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DlxQueueName=<span class="string">"DlxTopicQueue"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dlxExchange"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">getDlxExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(DlxExchangeName).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"dlxQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">getDlxQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(DlxQueueName).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">getDlxBinding</span><span class="params">(@Qualifier(<span class="string">"dlxQueue"</span>)</span>Queue dlxQueue,@<span class="title">Qualifier</span><span class="params">(<span class="string">"dlxExchange"</span>)</span>Exchange dlxExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(dlxQueue).to(dlxExchange).with(<span class="string">"#.dlx"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"exchange"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">getExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ExchangeName).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QueueName).deadLetterExchange(DlxExchangeName).deadLetterRoutingKey(<span class="string">"haha.dlx"</span>).ttl(<span class="number">10000</span>).maxLength(<span class="number">10</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">getBinding</span><span class="params">(@Qualifier(<span class="string">"queue"</span>)</span>Queue queue,@<span class="title">Qualifier</span><span class="params">(<span class="string">"exchange"</span>)</span>Exchange exchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"boot.#"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DlxTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送死信消息</span></span><br><span class="line"><span class="comment">     * 1.过期时间</span></span><br><span class="line"><span class="comment">     * 2.长度限制</span></span><br><span class="line"><span class="comment">     * 3.消息拒收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//测试过期时间</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String letter=<span class="string">"我是消息"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(Producer.ExchangeName,<span class="string">"boot.haha"</span>,letter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试长度限制</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lengthTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String letter=<span class="string">"我是消息"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(Producer.ExchangeName,<span class="string">"boot.haha"</span>,letter+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试消息拒收</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String letter=<span class="string">"拒收消息"</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(Producer.ExchangeName,<span class="string">"boot.haha"</span>,letter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试消息拒收的消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"TopicQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(Message message, Channel channel)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行业务"</span>);</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"拒收消息"</span>);           channel.basicNack(message.getMessageProperties().getDeliveryTag(),<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                System.out.println(<span class="string">"回退失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>死信交换机和死信队列和普通的没有区别</p></li><li><p>当消息称为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</p></li><li>消息称为死信的三种情况<ul><li>消息长度限制</li><li>消息达到过期时间</li><li>消费者拒收消息</li></ul></li></ol><h4 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h4><p>延迟队列：消息进入队列后不会被立即消费，只有达到指定时间才会被消费。</p><p>TTL+死信队列实现延迟队列</p><h4 id="日记与监控"><a href="#日记与监控" class="headerlink" title="日记与监控"></a>日记与监控</h4><p>默认日志存放：/var/log/rabbitmq/</p><h4 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h4><p><code>rabbitmqctl trace_on</code></p><p><code>rabbitmq-plugins enable rabbitmq_tracing</code></p><h4 id="应用问题"><a href="#应用问题" class="headerlink" title="应用问题"></a>应用问题</h4><p>消息可靠性保障</p><p>消息幂等性保障</p><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;工作模式&quot;&gt;&lt;a href=&quot;#工作模式&quot; class=&quot;headerlink&quot; title=&quot;工作模式&quot;&gt;&lt;/a&gt;工作模式&lt;/h4&gt;&lt;h6 id=&quot;简单模式&quot;&gt;&lt;a href=&quot;#简单模式&quot; class=&quot;headerlink&quot; title=&quot;简单模式&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Thymeleaf</title>
    <link href="https://augus-liuzhi.github.io/2021/01/13/Thymeleaf/"/>
    <id>https://augus-liuzhi.github.io/2021/01/13/Thymeleaf/</id>
    <published>2021-01-13T08:13:58.741Z</published>
    <updated>2021-03-31T08:09:29.041Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单链表</title>
    <link href="https://augus-liuzhi.github.io/2021/01/12/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://augus-liuzhi.github.io/2021/01/12/单链表/</id>
    <published>2021-01-12T06:26:48.069Z</published>
    <updated>2021-01-13T01:05:33.918Z</updated>
    
    <content type="html"><![CDATA[<h4 id="链表的结构"><a href="#链表的结构" class="headerlink" title="链表的结构"></a>链表的结构</h4><p>数据域+指针域</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/20/1641a579e288345c?w=668&amp;h=87&amp;f=png&amp;s=8183" alt></p><h4 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h4><p>指向链表的第一个节点的位置。</p><h4 id="头节点"><a href="#头节点" class="headerlink" title="头节点"></a>头节点</h4><p>链表第一个节点前额外设置的一个节点，数据域不存放数据，指针域指向第一个节点的指针（存储位置），引入头节点使得开始节点可以和其他的元素一样，方便进行删除和插入操作。</p><h4 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h4><p>增 add删 delete改 update查 find插 insert</p><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个节点类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;String&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//数据域</span></span><br><span class="line">    <span class="keyword">public</span> String data;</span><br><span class="line">    <span class="comment">//指针域</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;String&gt; next;</span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String data, Node&lt;String&gt; next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化链表"><a href="#初始化链表" class="headerlink" title="初始化链表"></a>初始化链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="comment">//首元节点，链表中真正第一个元素</span></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">int</span> listSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//链表长度为0</span></span><br><span class="line">        listSize=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//头指针指向首元节点</span></span><br><span class="line">        first=<span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        head=<span class="keyword">new</span> Node(<span class="keyword">null</span>,first);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断单链表是否为空</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(listSize==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取节点</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Node&lt;String&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=listSize)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"非法参数"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       Node&lt;String&gt; currNode=head;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">           currNode= currNode.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> currNode;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在末尾添加元素</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Node&lt;String&gt; node)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       getNode(listSize-<span class="number">1</span>).next=node;</span><br><span class="line">       listSize++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//删除i位置的节点，并返回删除的数据。</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(i==listSize-<span class="number">1</span>)&#123;</span><br><span class="line">           String s=getNode(i).data;</span><br><span class="line">           getNode(i-<span class="number">2</span>).next=<span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">return</span> s;</span><br><span class="line">       &#125;</span><br><span class="line">       Node&lt;String&gt; node=getNode(i-<span class="number">1</span>);</span><br><span class="line">       String s=node.next.data;</span><br><span class="line">       node.next=node.next.next;</span><br><span class="line">       <span class="keyword">return</span> s;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在i位置插入新节点</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i,String a)</span></span>&#123;</span><br><span class="line">       Node&lt;String&gt; preNode=getNode(i-<span class="number">1</span>);</span><br><span class="line">       Node&lt;String&gt; newNode=<span class="keyword">new</span> Node&lt;&gt;(a,<span class="keyword">null</span>);</span><br><span class="line">       newNode.next=preNode.next;</span><br><span class="line">       preNode.next=newNode;</span><br><span class="line">       listSize++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取i位置的数据</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getNode(i).data;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//为i位置元素重新赋值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> i,String newData)</span></span>&#123;</span><br><span class="line">       getNode(i).data=newData;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//返回链表节点的个数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> listSize;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//清空链表</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">       initList();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//打印链表</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;listSize;i++)&#123;</span><br><span class="line">           System.out.println(getNode(i).data);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//查找链表中是否有元素e</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">       Node currNode=head.next;</span><br><span class="line">       <span class="keyword">while</span> (currNode.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(currNode.data.equals(s))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           currNode=currNode.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;链表的结构&quot;&gt;&lt;a href=&quot;#链表的结构&quot; class=&quot;headerlink&quot; title=&quot;链表的结构&quot;&gt;&lt;/a&gt;链表的结构&lt;/h4&gt;&lt;p&gt;数据域+指针域&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/201
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot-Web开发</title>
    <link href="https://augus-liuzhi.github.io/2021/01/01/SpringBoot-Web%E5%BC%80%E5%8F%91/"/>
    <id>https://augus-liuzhi.github.io/2021/01/01/SpringBoot-Web开发/</id>
    <published>2021-01-01T12:46:43.906Z</published>
    <updated>2021-01-06T01:30:08.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot-Web开发"></a>SpringBoot-Web开发</h1><h4 id="1-简单功能分析"><a href="#1-简单功能分析" class="headerlink" title="1 简单功能分析"></a>1 简单功能分析</h4><h6 id="1-1-静态资源目录"><a href="#1-1-静态资源目录" class="headerlink" title="1.1 静态资源目录"></a>1.1 静态资源目录</h6><p>springBoot默认将类路径下的<code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>)作为静态资源目录，静态资源只要放在以上目录，访问路径为localhost:8080/+静态资源名，就可以直接访问静态资源。</p><p><img src="/Augus-LIUZHI.github.io/2021/01/01/SpringBoot-Web开发/Hexo/hexo\blog\source\_posts\SpringBoot-Web开发\1609507632808.png" alt="1609507632808"></p><p>当静态资源名和controller包的映射名一致时，优先进行controller进行处理，当请求进来时，先去找controller看看能不能处理，如果controller处理不了，再交给静态资源处理，这是因为静态资源它的映射也是/**，一般默认使用static作为存放静态资源的路径。<code>可以通过访问前缀进行区分</code></p><h6 id="1-2-静态资源访问前缀"><a href="#1-2-静态资源访问前缀" class="headerlink" title="1.2 静态资源访问前缀"></a>1.2 静态资源访问前缀</h6><p>springboot默认访问静态资源是没有前缀的，访问路径直接localhost:8080/+静态资源名</p><p><strong>设置访问前缀</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置访问前缀</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure><p>此时访问路径：localhost:8080/+前缀+静态资源名。</p><h6 id="1-3-设置静态资源路径"><a href="#1-3-设置静态资源路径" class="headerlink" title="1.3 设置静态资源路径"></a>1.3 设置静态资源路径</h6><p>springboot默认是那4个静态资源路径，一旦自定义访问静态资源的路径，其他的将会失效。[meta-inf/resources还是生效why]</p><p><strong>设置静态资源路径</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="attr">      static-locations:</span> <span class="attr">classpath:/haha</span></span><br></pre></td></tr></table></figure><h6 id="1-4-访问webjars"><a href="#1-4-访问webjars" class="headerlink" title="1.4 访问webjars"></a>1.4 访问webjars</h6><p>访问webjars时，例如jquery,首先添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问路径为：localhost:8080/webjars/jquery/版本号/静态资源名</p><h6 id="1-5-welcome欢迎页"><a href="#1-5-welcome欢迎页" class="headerlink" title="1.5 welcome欢迎页"></a>1.5 welcome欢迎页</h6><p>index.html存放在默认的静态目录下，或者我们指定的静态文件下，即可默认直达欢迎页面，当我们设置前缀的时候，必须加上前缀才可以访问欢迎页面。</p><h6 id="1-6-favicon"><a href="#1-6-favicon" class="headerlink" title="1.6 favicon"></a>1.6 favicon</h6><p>配置favicon.ico,只需要在静态资源路径放置favicon.ico图片，springboot会自动配置。</p><h6 id="1-7-静态资源配置原理"><a href="#1-7-静态资源配置原理" class="headerlink" title="1.7 静态资源配置原理"></a>1.7 静态资源配置原理</h6><ul><li></li></ul><h4 id="2-请求参数处理"><a href="#2-请求参数处理" class="headerlink" title="2 请求参数处理"></a>2 请求参数处理</h4><h6 id="表单rest风格"><a href="#表单rest风格" class="headerlink" title="表单rest风格"></a>表单rest风格</h6><p>rest风格是指以不同的请求方式，来区分用户的增删改查操作，表单提交默认只有post,get请求，通过修改隐藏域的_method参数，可以添加springboot2支持的put,delete,patch请求。</p><ul><li>以前增删改查，/addUser,/DeleteUser,/UpdateUser,/SelectUser</li><li>Rest风格，处理增删改查，url映射统一为/User,用不同的请求方法，进行区分增删改查操作</li></ul><p><strong>rest开发步骤</strong></p><ol><li>创建表单，修改隐藏域，添加put,delete请求方式</li><li>创建Controller,用SpringBoot新注解进行区分请求方式</li><li>springboot开启rest风格配置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>REST风格测试<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"get测试"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post测试"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">添加隐藏域的_method的值，表单必须为post请求才可以</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"put"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"put测试"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"delete测试"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用不同请求方式的注解，进行区分增删改查</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloRest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"get"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloRest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"request"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloRest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"put"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloRest4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"delete"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启REST风格</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    hiddenmethod:</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h6 id="请求参数注解"><a href="#请求参数注解" class="headerlink" title="请求参数注解"></a>请求参数注解</h6><p><strong>@PathVariable(“参数名”)</strong></p><blockquote><p>绑定url占位符参数到Controller</p><p>localhost:8080/user/{占位符1}/{占位符2}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/variable/&#123;username&#125;/&#123;password&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parameter</span><span class="params">(@PathVariable(<span class="string">"username"</span>)</span>String username,@<span class="title">PathVariable</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>&#123;</span><br><span class="line">        String variable=username+<span class="string">"--"</span>+password;</span><br><span class="line">        <span class="keyword">return</span> variable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@RequestHeader</strong></p><blockquote><p>获取请求头中的数据，通过指定参数，来获取请求头中指定参数的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/RequestHeader"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">ReqHeader</span><span class="params">(@RequestHeader(<span class="string">"User-Agent"</span>)</span> String UserAgent,@<span class="title">RequestHeader</span><span class="params">(<span class="string">"Accept-Language"</span>)</span> String language)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"UserAgent"</span>,UserAgent);</span><br><span class="line">        map.put(<span class="string">"Accept-Language"</span>,language);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>@RequestParam</strong></p><blockquote><p>获取请求的指定参数，通过制定参数的名称来获取请求参数的值</p><p><code>http://localhost:8080/RequestParam?id=3</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/RequestParam"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">ReqParam</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">       Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">"id"</span>,id);</span><br><span class="line">       <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>@CookieValue</strong></p><blockquote><p>获取请求的Cookies的值，通过指定参数的值来获取cookies的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/cookies"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getCookies</span><span class="params">(@CookieValue(value = <span class="string">"JSESSIONID"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"null"</span>)</span> String JSESSIONID)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"JSESSIONID"</span>,JSESSIONID);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>@RequestBody</strong></p><blockquote><p>该注解可以用来接收从前端传入的json数据</p></blockquote><p><strong>@RequestAttribute</strong></p><blockquote><p>获取request域中指定参数的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/ReqAt"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Reqat</span><span class="params">(HttpServletRequest httpServletRequest)</span></span>&#123;</span><br><span class="line">        HttpServletRequest request=httpServletRequest;</span><br><span class="line">        request.setAttribute(<span class="string">"user"</span>,<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/requestAttribute"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/requestAttribute"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getrequestAttribute</span><span class="params">(@RequestAttribute(<span class="string">"user"</span>)</span>String user)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"User"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    <strong>@MatrixVariable</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot-Web开发&quot;&gt;&lt;a href=&quot;#SpringBoot-Web开发&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-Web开发&quot;&gt;&lt;/a&gt;SpringBoot-Web开发&lt;/h1&gt;&lt;h4 id=&quot;1-简单功能分析&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
